!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : HyCtl
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE HyCtlDyn(Poi_Spt, Poi_Ms, Pv_Ms, SCS_Spt, SC_Spt,      &
     &   SCS_Fb, SC_Fb, Bess_Ms, SCDC_Fb, DEBUG, GEN_Fb, FileNum,       &
     &   Log2File, Fsys, GridOpCmdSCS, Tcyc, Tactivate, BatPwrAtInit,   &
     &   BatPwrRtInit, PvPwrAtInit, PvPwrRtInit)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    SAMP5         ! Interpolating Sampler
      REAL    LIMIT         ! Hard Limiter
!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    PQ_SelectDyn  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: FileNum, Log2File
      INTEGER, INTENT(IN)  :: GridOpCmdSCS
      REAL,    INTENT(IN)  :: Poi_Spt(11)
      REAL,    INTENT(IN)  :: Poi_Ms(12)
      REAL,    INTENT(IN)  :: Pv_Ms(4)
      REAL,    INTENT(IN)  :: SCS_Fb(10)
      REAL,    INTENT(IN)  :: SC_Fb(10)
      REAL,    INTENT(IN)  :: Bess_Ms(4)
      REAL,    INTENT(IN)  :: SCDC_Fb(10)
      REAL,    INTENT(IN)  :: GEN_Fb(10), Fsys
      REAL,    INTENT(IN)  :: Tcyc, Tactivate
      REAL,    INTENT(IN)  :: BatPwrAtInit
      REAL,    INTENT(IN)  :: BatPwrRtInit
      REAL,    INTENT(IN)  :: PvPwrAtInit
      REAL,    INTENT(IN)  :: PvPwrRtInit
      REAL,    INTENT(OUT) :: SCS_Spt(20)
      REAL,    INTENT(OUT) :: SC_Spt(20)
      REAL,    INTENT(OUT) :: DEBUG(40)

! Electrical Node Indices

! Control Signals
      INTEGER  FileNo, Log2File_, IT_1
      REAL     VAr_PV_meter, W_PV_meter
      REAL     VAr_BESS_meter, W_BESS_meter
      REAL     RT_1(20), W_POI, VAr_POI, Vol_POI
      REAL     Hz_POI, McbStt, GcbStt
      REAL     Vrms_abc_POI(3), RT_2, RT_3(30)
      REAL     RT_4, RT_5, Tactivate_, Tcyc_
      REAL     RT_6, RT_7, RT_8, RT_9, RT_10(10)
      REAL     ExtPwrAtLimHi, ExtPwrAtLimLo
      REAL     BessWSpt, PoiVArSpt, PoiPFSpt
      REAL     VolSpt, RT_11(10), RT_12, CtrlMode
      REAL     RT_13, WSpt_pu_SCS, VArSpt_pu_SCS
      REAL     RT_14, RT_15, RT_16(10), RT_17
      REAL     RT_18, RT_19, RT_20, RT_21, RT_22
      REAL     RT_23, RT_24, RT_25, RT_26
      REAL     BessPwrAtMaxTot, BessPwrRtMaxTot
      REAL     RT_27, RT_28, RT_29, VArSpt_pu_SC
      REAL     Fsys_, WSptMin_pu_SCDC, RT_30
      REAL     RT_31(10), RT_32, RT_33, RT_34
      REAL     RT_35, HzSpt, ExtPwrAtLimSales
      REAL     RT_36, RT_37, RT_38, PvPwrRtMaxTot
      REAL     PvPwrAtMaxTot, xdata(20), RT_39
      REAL     RT_40, RT_41, RT_42(10), RT_43(10)
      REAL     VtgNomSpntPc, RT_44, GridOpCmdSCS_
      REAL     RT_45, SCSOpCmd, HybridSysState
      REAL     RT_46, RT_47, WSpt_SC, RT_48
      REAL     RT_49, RT_50, BatPwrAtInit_
      REAL     VArSpt_SCS, BatPwrRtInit_
      REAL     PvPwrAtInit_, RT_51, VArSpt_SC
      REAL     PvPwrRtInit_, RT_52, RT_53
      REAL     RT_54(3), PVDCPwrAtMaxTot
      REAL     RT_55(10), W_SCMod, VAr_SCMod
      REAL     RT_56, HybridPwrAtChrSpntTot
      REAL     RT_57, RT_58
      REAL     HybridPwrAtChrSpntTot_pu_SC
      REAL     HybridPwrAtDisSpntTot_pu_SC, RT_59
      REAL     RT_60, HybridPwrAtDisSpntTot
      REAL     RT_61, RT_62, RT_63, Activate
      REAL     WSpt_SCS, RT_64, RT_65, W_PV
      REAL     VAr_PV, Vol_PV, Hz_PV, W_Bess
      REAL     VAr_Bess, Vol_Bess, Hz_Bess, RT_66
      REAL     RT_67(40), W_aval_SCS
      REAL     VAr_aval_SCS, W_SCS, VAr_SCS
      REAL     RT_68, RT_69(50), W_aval_SC
      REAL     VAr_aval_SC, W_SC, VAr_SC, RT_70
      REAL     RT_71(60), W_aval_SCDC
      REAL     VAr_aval_SCDC, W_SCDC, VAr_SCDC
      REAL     WDC_PV_SCDC, WDC_Bat_SCDC, RT_72
      REAL     RT_73(70), PwrAtLimHi, PwrAtLimLo
      REAL     PwrApLim, PvBatMax, PvBatMin
      REAL     PvPwrAtLimTot, BatPwrAtSpntTot
      REAL     BatPwrAtSpnt_Cmd, PvPwrAtLim_Cmd
      REAL     FrqDroopActive, RT_74(10)
      REAL     AutoMode, FrqPoiFiltered
      REAL     PwrRtSpnt, PwrRtSpntTot
      REAL     BatPwrRtSpnt_Cmd, PvPwrRtSpnt_Cmd
      REAL     PwrRtCtrlMode, FrtActive, VtgLoLim
      REAL     VtgUpLim, RT_75(20), MinVtg_FRT
      REAL     MaxVtg_FRT, VtgSpnt
      REAL     BatGfPwrAtSpntOfs
      REAL     BatGfPwrRtSpntOfs, VtgNomSpnt
      REAL     PwrAtPoi, PwrRtPoi, RT_76
      REAL     RT_77(30), RT_78, VArRtg_SC
      REAL     VArRtg_SCDC, WRtg_SC, RT_79, RT_80
      REAL     RT_81, RT_82, WRtg_SCDC, RT_83
      REAL     RT_84, RT_85, RT_86, RT_87
      REAL     WSpt_pu_SC, RT_88, RT_89, RT_90
      REAL     RT_91, WRtg_SCS, RT_92, RT_93
      REAL     VArRtg_SCS, WRtg_SCMod, RT_94
      REAL     RT_95, VArRtg_SCMod, RT_96(10)
      REAL     xin(100), WRtg_DG, VArRtg__DG
      REAL     W_aval_DG, VAr_aval_DG, W_DG
      REAL     VAr_DG, RT_97, RT_98(80)
      REAL     Vrms_abc_FRT(3), RT_99, RT_100(90)
      REAL     RT_101, RT_102, RT_103, Poi_DiffW
      REAL     Poi_DiffVAr, Poi_Vol, RT_104
      REAL     RT_105, RT_106(3), ExtPwrApLim
      REAL     ExtPwrRtLimLo, ExtPwrRtLimHi
      REAL     HybridSysStateTrans, xout(50)

! Internal Variables
      INTEGER  IVD1_1, NSTORF_SAVE, NSTORI_SAVE
      INTEGER  i
      REAL     RVD2_1(2), DELT_CTL

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 6
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 1127
      IPGB      = NPGB
      NPGB      = NPGB + 154
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      VAr_PV_meter = STOF(ISTOF + 159)
      W_PV_meter = STOF(ISTOF + 160)
      VAr_BESS_meter = STOF(ISTOF + 161)
      W_BESS_meter = STOF(ISTOF + 162)
      W_POI    = STOF(ISTOF + 183)
      VAr_POI  = STOF(ISTOF + 184)
      Vol_POI  = STOF(ISTOF + 185)
      Hz_POI   = STOF(ISTOF + 186)
      McbStt   = STOF(ISTOF + 187)
      GcbStt   = STOF(ISTOF + 188)
      RT_2     = STOF(ISTOF + 192)
      FileNo   = STOI(ISTOI + 4)
      RT_4     = STOF(ISTOF + 223)
      RT_5     = STOF(ISTOF + 224)
      Tactivate_ = STOF(ISTOF + 225)
      Tcyc_    = STOF(ISTOF + 226)
      RT_6     = STOF(ISTOF + 227)
      RT_7     = STOF(ISTOF + 228)
      RT_8     = STOF(ISTOF + 229)
      RT_9     = STOF(ISTOF + 230)
      ExtPwrAtLimHi = STOF(ISTOF + 241)
      ExtPwrAtLimLo = STOF(ISTOF + 242)
      BessWSpt = STOF(ISTOF + 243)
      PoiVArSpt = STOF(ISTOF + 244)
      PoiPFSpt = STOF(ISTOF + 245)
      VolSpt   = STOF(ISTOF + 246)
      RT_12    = STOF(ISTOF + 257)
      CtrlMode = STOF(ISTOF + 258)
      RT_13    = STOF(ISTOF + 259)
      WSpt_pu_SCS = STOF(ISTOF + 260)
      VArSpt_pu_SCS = STOF(ISTOF + 261)
      RT_14    = STOF(ISTOF + 262)
      RT_15    = STOF(ISTOF + 263)
      RT_17    = STOF(ISTOF + 274)
      RT_18    = STOF(ISTOF + 275)
      RT_19    = STOF(ISTOF + 276)
      RT_20    = STOF(ISTOF + 277)
      RT_21    = STOF(ISTOF + 278)
      RT_22    = STOF(ISTOF + 279)
      RT_23    = STOF(ISTOF + 280)
      RT_24    = STOF(ISTOF + 281)
      RT_25    = STOF(ISTOF + 282)
      RT_26    = STOF(ISTOF + 283)
      BessPwrAtMaxTot = STOF(ISTOF + 284)
      BessPwrRtMaxTot = STOF(ISTOF + 285)
      RT_27    = STOF(ISTOF + 286)
      RT_28    = STOF(ISTOF + 287)
      RT_29    = STOF(ISTOF + 288)
      VArSpt_pu_SC = STOF(ISTOF + 289)
      Fsys_    = STOF(ISTOF + 290)
      WSptMin_pu_SCDC = STOF(ISTOF + 291)
      RT_30    = STOF(ISTOF + 292)
      RT_32    = STOF(ISTOF + 303)
      RT_33    = STOF(ISTOF + 304)
      RT_34    = STOF(ISTOF + 305)
      RT_35    = STOF(ISTOF + 306)
      HzSpt    = STOF(ISTOF + 307)
      ExtPwrAtLimSales = STOF(ISTOF + 308)
      RT_36    = STOF(ISTOF + 309)
      RT_37    = STOF(ISTOF + 310)
      RT_38    = STOF(ISTOF + 311)
      PvPwrRtMaxTot = STOF(ISTOF + 312)
      PvPwrAtMaxTot = STOF(ISTOF + 313)
      RT_39    = STOF(ISTOF + 334)
      RT_40    = STOF(ISTOF + 335)
      RT_41    = STOF(ISTOF + 336)
      Log2File_ = STOI(ISTOI + 5)
      VtgNomSpntPc = STOF(ISTOF + 357)
      RT_44    = STOF(ISTOF + 358)
      IT_1     = STOI(ISTOI + 6)
      GridOpCmdSCS_ = STOF(ISTOF + 359)
      RT_45    = STOF(ISTOF + 360)
      SCSOpCmd = STOF(ISTOF + 361)
      HybridSysState = STOF(ISTOF + 362)
      RT_46    = STOF(ISTOF + 363)
      RT_47    = STOF(ISTOF + 364)
      WSpt_SC  = STOF(ISTOF + 365)
      RT_48    = STOF(ISTOF + 366)
      RT_49    = STOF(ISTOF + 367)
      RT_50    = STOF(ISTOF + 368)
      BatPwrAtInit_ = STOF(ISTOF + 369)
      VArSpt_SCS = STOF(ISTOF + 370)
      BatPwrRtInit_ = STOF(ISTOF + 371)
      PvPwrAtInit_ = STOF(ISTOF + 372)
      RT_51    = STOF(ISTOF + 373)
      VArSpt_SC = STOF(ISTOF + 374)
      PvPwrRtInit_ = STOF(ISTOF + 375)
      RT_52    = STOF(ISTOF + 376)
      RT_53    = STOF(ISTOF + 377)
      PVDCPwrAtMaxTot = STOF(ISTOF + 381)
      W_SCMod  = STOF(ISTOF + 392)
      VAr_SCMod = STOF(ISTOF + 393)
      RT_56    = STOF(ISTOF + 394)
      HybridPwrAtChrSpntTot = STOF(ISTOF + 395)
      RT_57    = STOF(ISTOF + 396)
      RT_58    = STOF(ISTOF + 397)
      HybridPwrAtChrSpntTot_pu_SC = STOF(ISTOF + 398)
      HybridPwrAtDisSpntTot_pu_SC = STOF(ISTOF + 399)
      RT_59    = STOF(ISTOF + 400)
      RT_60    = STOF(ISTOF + 401)
      HybridPwrAtDisSpntTot = STOF(ISTOF + 402)
      RT_61    = STOF(ISTOF + 403)
      RT_62    = STOF(ISTOF + 404)
      RT_63    = STOF(ISTOF + 405)
      Activate = STOF(ISTOF + 406)
      WSpt_SCS = STOF(ISTOF + 407)
      RT_64    = STOF(ISTOF + 408)
      RT_65    = STOF(ISTOF + 409)
      W_PV     = STOF(ISTOF + 410)
      VAr_PV   = STOF(ISTOF + 411)
      Vol_PV   = STOF(ISTOF + 412)
      Hz_PV    = STOF(ISTOF + 413)
      W_Bess   = STOF(ISTOF + 414)
      VAr_Bess = STOF(ISTOF + 415)
      Vol_Bess = STOF(ISTOF + 416)
      Hz_Bess  = STOF(ISTOF + 417)
      RT_66    = STOF(ISTOF + 418)
      W_aval_SCS = STOF(ISTOF + 459)
      VAr_aval_SCS = STOF(ISTOF + 460)
      W_SCS    = STOF(ISTOF + 461)
      VAr_SCS  = STOF(ISTOF + 462)
      RT_68    = STOF(ISTOF + 463)
      W_aval_SC = STOF(ISTOF + 514)
      VAr_aval_SC = STOF(ISTOF + 515)
      W_SC     = STOF(ISTOF + 516)
      VAr_SC   = STOF(ISTOF + 517)
      RT_70    = STOF(ISTOF + 518)
      W_aval_SCDC = STOF(ISTOF + 579)
      VAr_aval_SCDC = STOF(ISTOF + 580)
      W_SCDC   = STOF(ISTOF + 581)
      VAr_SCDC = STOF(ISTOF + 582)
      WDC_PV_SCDC = STOF(ISTOF + 583)
      WDC_Bat_SCDC = STOF(ISTOF + 584)
      RT_72    = STOF(ISTOF + 585)
      PwrAtLimHi = STOF(ISTOF + 656)
      PwrAtLimLo = STOF(ISTOF + 657)
      PwrApLim = STOF(ISTOF + 658)
      PvBatMax = STOF(ISTOF + 659)
      PvBatMin = STOF(ISTOF + 660)
      PvPwrAtLimTot = STOF(ISTOF + 661)
      BatPwrAtSpntTot = STOF(ISTOF + 662)
      BatPwrAtSpnt_Cmd = STOF(ISTOF + 663)
      PvPwrAtLim_Cmd = STOF(ISTOF + 664)
      FrqDroopActive = STOF(ISTOF + 665)
      AutoMode = STOF(ISTOF + 676)
      FrqPoiFiltered = STOF(ISTOF + 677)
      PwrRtSpnt = STOF(ISTOF + 678)
      PwrRtSpntTot = STOF(ISTOF + 679)
      BatPwrRtSpnt_Cmd = STOF(ISTOF + 680)
      PvPwrRtSpnt_Cmd = STOF(ISTOF + 681)
      PwrRtCtrlMode = STOF(ISTOF + 682)
      FrtActive = STOF(ISTOF + 683)
      VtgLoLim = STOF(ISTOF + 684)
      VtgUpLim = STOF(ISTOF + 685)
      MinVtg_FRT = STOF(ISTOF + 706)
      MaxVtg_FRT = STOF(ISTOF + 707)
      VtgSpnt  = STOF(ISTOF + 708)
      BatGfPwrAtSpntOfs = STOF(ISTOF + 709)
      BatGfPwrRtSpntOfs = STOF(ISTOF + 710)
      VtgNomSpnt = STOF(ISTOF + 711)
      PwrAtPoi = STOF(ISTOF + 712)
      PwrRtPoi = STOF(ISTOF + 713)
      RT_76    = STOF(ISTOF + 714)
      RT_78    = STOF(ISTOF + 745)
      VArRtg_SC = STOF(ISTOF + 746)
      VArRtg_SCDC = STOF(ISTOF + 747)
      WRtg_SC  = STOF(ISTOF + 748)
      RT_79    = STOF(ISTOF + 749)
      RT_80    = STOF(ISTOF + 750)
      RT_81    = STOF(ISTOF + 751)
      RT_82    = STOF(ISTOF + 752)
      WRtg_SCDC = STOF(ISTOF + 753)
      RT_83    = STOF(ISTOF + 754)
      RT_84    = STOF(ISTOF + 755)
      RT_85    = STOF(ISTOF + 756)
      RT_86    = STOF(ISTOF + 757)
      RT_87    = STOF(ISTOF + 758)
      WSpt_pu_SC = STOF(ISTOF + 759)
      RT_88    = STOF(ISTOF + 760)
      RT_89    = STOF(ISTOF + 761)
      RT_90    = STOF(ISTOF + 762)
      RT_91    = STOF(ISTOF + 763)
      WRtg_SCS = STOF(ISTOF + 764)
      RT_92    = STOF(ISTOF + 765)
      RT_93    = STOF(ISTOF + 766)
      VArRtg_SCS = STOF(ISTOF + 767)
      WRtg_SCMod = STOF(ISTOF + 768)
      RT_94    = STOF(ISTOF + 769)
      RT_95    = STOF(ISTOF + 770)
      VArRtg_SCMod = STOF(ISTOF + 771)
      WRtg_DG  = STOF(ISTOF + 882)
      VArRtg__DG = STOF(ISTOF + 883)
      W_aval_DG = STOF(ISTOF + 884)
      VAr_aval_DG = STOF(ISTOF + 885)
      W_DG     = STOF(ISTOF + 886)
      VAr_DG   = STOF(ISTOF + 887)
      RT_97    = STOF(ISTOF + 888)
      RT_99    = STOF(ISTOF + 972)
      RT_101   = STOF(ISTOF + 1063)
      RT_102   = STOF(ISTOF + 1064)
      RT_103   = STOF(ISTOF + 1065)
      Poi_DiffW = STOF(ISTOF + 1066)
      Poi_DiffVAr = STOF(ISTOF + 1067)
      Poi_Vol  = STOF(ISTOF + 1068)
      RT_104   = STOF(ISTOF + 1069)
      RT_105   = STOF(ISTOF + 1070)
      ExtPwrApLim = STOF(ISTOF + 1074)
      ExtPwrRtLimLo = STOF(ISTOF + 1075)
      ExtPwrRtLimHi = STOF(ISTOF + 1076)
      HybridSysStateTrans = STOF(ISTOF + 1077)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         Vrms_abc_POI(IT_0) = STOF(ISTOF + 188 + IT_0)
         RT_54(IT_0) = STOF(ISTOF + 377 + IT_0)
         Vrms_abc_FRT(IT_0) = STOF(ISTOF + 968 + IT_0)
         RT_106(IT_0) = STOF(ISTOF + 1070 + IT_0)
      END DO

! Array (1:10) quantities...
      DO IT_0 = 1,10
         RT_10(IT_0) = STOF(ISTOF + 230 + IT_0)
         RT_11(IT_0) = STOF(ISTOF + 246 + IT_0)
         RT_16(IT_0) = STOF(ISTOF + 263 + IT_0)
         RT_31(IT_0) = STOF(ISTOF + 292 + IT_0)
         RT_42(IT_0) = STOF(ISTOF + 336 + IT_0)
         RT_43(IT_0) = STOF(ISTOF + 346 + IT_0)
         RT_55(IT_0) = STOF(ISTOF + 381 + IT_0)
         RT_74(IT_0) = STOF(ISTOF + 665 + IT_0)
         RT_96(IT_0) = STOF(ISTOF + 771 + IT_0)
      END DO

! Array (1:20) quantities...
      DO IT_0 = 1,20
         SCS_Spt(IT_0) = STOF(ISTOF + 27 + IT_0)
         SC_Spt(IT_0) = STOF(ISTOF + 47 + IT_0)
         RT_1(IT_0) = STOF(ISTOF + 162 + IT_0)
         xdata(IT_0) = STOF(ISTOF + 313 + IT_0)
         RT_75(IT_0) = STOF(ISTOF + 685 + IT_0)
      END DO

! Array (1:30) quantities...
      DO IT_0 = 1,30
         RT_3(IT_0) = STOF(ISTOF + 192 + IT_0)
         RT_77(IT_0) = STOF(ISTOF + 714 + IT_0)
      END DO

! Array (1:40) quantities...
      DO IT_0 = 1,40
         DEBUG(IT_0) = STOF(ISTOF + 101 + IT_0)
         RT_67(IT_0) = STOF(ISTOF + 418 + IT_0)
      END DO

! Array (1:50) quantities...
      DO IT_0 = 1,50
         RT_69(IT_0) = STOF(ISTOF + 463 + IT_0)
         xout(IT_0) = STOF(ISTOF + 1077 + IT_0)
      END DO

! Array (1:60) quantities...
      DO IT_0 = 1,60
         RT_71(IT_0) = STOF(ISTOF + 518 + IT_0)
      END DO

! Array (1:70) quantities...
      DO IT_0 = 1,70
         RT_73(IT_0) = STOF(ISTOF + 585 + IT_0)
      END DO

! Array (1:80) quantities...
      DO IT_0 = 1,80
         RT_98(IT_0) = STOF(ISTOF + 888 + IT_0)
      END DO

! Array (1:90) quantities...
      DO IT_0 = 1,90
         RT_100(IT_0) = STOF(ISTOF + 972 + IT_0)
      END DO

! Array (1:100) quantities...
      DO IT_0 = 1,100
         xin(IT_0) = STOF(ISTOF + 781 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'HyCtl.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'CtrlMode'
      CtrlMode = 4.0

! 30:[unity] Type/Shape conversion block 
! real -> real
      Fsys_ = Fsys

! 50:[unity] Type/Shape conversion block 
! integer -> integer
      FileNo = FileNum

! 70:[unity] Type/Shape conversion block 
! real -> real
      GridOpCmdSCS_ = REAL(GridOpCmdSCS)

! 80:[const] Real Constant 'FirstStep'
      RT_4 = 0.0

! 110:[unity] Type/Shape conversion block 
! integer -> integer
      Log2File_ = Log2File

! 120:[unity] Type/Shape conversion block 
! real -> real
      Tactivate_ = Tactivate

! 130:[time-sig] Output of Simulation Time 
      RT_48 = TIME

! 140:[time-sig] Output of Simulation Time 
      RT_5 = TIME

! 160:[unity] Type/Shape conversion block 
! real -> real
      BatPwrAtInit_ = BatPwrAtInit

! 170:[const] Real Constant 'PickupDelay'
      RT_50 = 0.1

! 190:[const] Real Constant 'Zero'
      RT_6 = 0.0

! 200:[unity] Type/Shape conversion block 
! real -> real
      BatPwrRtInit_ = BatPwrRtInit

! 210:[const] Real Constant 'Zero'
      RT_7 = 0.0

! 230:[unity] Type/Shape conversion block 
! real -> real
      PvPwrAtInit_ = PvPwrAtInit

! 240:[const] Real Constant 'Zero'
      RT_8 = 0.0

! 260:[const] Real Constant 'Zero'
      RT_9 = 0.0

! 270:[unity] Type/Shape conversion block 
! real -> real
      PvPwrRtInit_ = PvPwrRtInit

! 290:[unity] Type/Shape conversion block 
! real -> real
      Tcyc_ = Tcyc

! 300:[const] Real Constant 'Zero'
      RT_47 = 0.0

! 310:[const] Real Constant 'Zero'
      RT_76 = 0.0

! 320:[const] Real Constant 'Zero'
      RT_78 = 0.0

! 340:[datatap] Scalar/Array Tap 
      ExtPwrApLim = Poi_Spt(1)

! 350:[datatap] Scalar/Array Tap 
      ExtPwrAtLimHi = Poi_Spt(2)

! 360:[datatap] Scalar/Array Tap 
      ExtPwrAtLimSales = Poi_Spt(3)

! 370:[datatap] Scalar/Array Tap 
      ExtPwrAtLimLo = Poi_Spt(4)

! 380:[datatap] Scalar/Array Tap 
      ExtPwrRtLimHi = Poi_Spt(5)

! 390:[datatap] Scalar/Array Tap 
      ExtPwrRtLimLo = Poi_Spt(6)

! 400:[datatap] Scalar/Array Tap 
      BessWSpt = Poi_Spt(7)

! 410:[datatap] Scalar/Array Tap 
      PoiVArSpt = Poi_Spt(8)

! 420:[datatap] Scalar/Array Tap 
      PoiPFSpt = Poi_Spt(9)

! 430:[datatap] Scalar/Array Tap 
      VolSpt = Poi_Spt(10)

! 440:[datatap] Scalar/Array Tap 
      HzSpt = Poi_Spt(11)

! 450:[const] Real Constant 'Zero'
      RT_12 = 0.0

! 460:[const] Real Constant 'Grid Forming'
      RT_103 = 21521.0

! 470:[const] Real Constant 'Zero'
      RT_90 = 0.0

! 480:[const] Real Constant 'Grid Forming'
      RT_17 = 21521.0

! 500:[const] Real Constant 'Const'
      RT_92 = 1.0

! 510:[const] Real Constant 'Stop'
      RT_102 = 381.0

! 520:[datatap] Scalar/Array Tap 
      RT_24 = Poi_Ms(1)

! 530:[gain] Gain Block 
!  Gain
      W_POI = 1000.0 * RT_24

! 540:[datatap] Scalar/Array Tap 
      RT_25 = Poi_Ms(2)

! 550:[gain] Gain Block 
!  Gain
      VAr_POI = 1000.0 * RT_25

! 560:[datatap] Scalar/Array Tap 
      RT_26 = Poi_Ms(3)

! 570:[gain] Gain Block 
!  Gain
      Vol_POI = 1000.0 * RT_26

! 580:[const] Real Constant 'Zero'
      RT_89 = 0.0

! 590:[const] Real Constant 'Zero'
      RT_35 = 0.0

! 600:[datatap] Scalar/Array Tap 
      Hz_POI = Poi_Ms(4)

! 610:[datatap] Scalar/Array Tap 
      McbStt = Poi_Ms(5)

! 620:[const] Real Constant 'Const'
      RT_93 = 1.0

! 630:[datatap] Scalar/Array Tap 
      GcbStt = Poi_Ms(6)

! 640:[datatap] Scalar/Array Tap 
      RT_54 = Poi_Ms(7 : 9)

! 650:[gain] Gain Block 
!  Gain
      Vrms_abc_POI = 1000.0 * RT_54

! 660:[const] Real Constant 'Zero'
      RT_87 = 0.0

! 670:[datatap] Scalar/Array Tap 
      RT_106 = Poi_Ms(10 : 12)

! 680:[gain] Gain Block 
!  Gain
      Vrms_abc_FRT = 1000.0 * RT_106

! 700:[const] Real Constant 'Zero'
      RT_2 = 0.0

! 710:[const] Real Constant 'Const'
      RT_94 = 1.0

! 720:[const] Real Constant 'Zero'
      RT_13 = 0.0

! 730:[const] Real Constant 'Zero'
      RT_104 = 0.0

! 740:[datatap] Scalar/Array Tap 
      RT_38 = Pv_Ms(1)

! 750:[gain] Gain Block 
!  Gain
      W_PV_meter = 1000.0 * RT_38

! 760:[const] Real Constant 'PFSpt_SCS'
      RT_14 = 1.0

! 770:[datatap] Scalar/Array Tap 
      RT_37 = Pv_Ms(2)

! 780:[gain] Gain Block 
!  Gain
      VAr_PV_meter = 1000.0 * RT_37

! 790:[const] Real Constant 
      RT_44 = 100.0

! 800:[const] Real Constant 'Zero'
      RT_85 = 0.0

! 810:[datatap] Scalar/Array Tap 
      RT_36 = Pv_Ms(3)

! 820:[gain] Gain Block 
!  Gain
      Vol_PV = 1000.0 * RT_36

! 830:[datatap] Scalar/Array Tap 
      Hz_PV = Pv_Ms(4)

! 840:[const] Real Constant 'Const'
      RT_95 = 1.0

! 860:[const] Real Constant 'Zero'
      RT_66 = 0.0

! 870:[const] Real Constant 'Zero'
      RT_57 = 0.0

! 880:[datatap] Scalar/Array Tap 
      RT_39 = Bess_Ms(1)

! 890:[gain] Gain Block 
!  Gain
      W_BESS_meter = 1000.0 * RT_39

! 900:[datatap] Scalar/Array Tap 
      RT_40 = Bess_Ms(2)

! 910:[gain] Gain Block 
!  Gain
      VAr_BESS_meter = 1000.0 * RT_40

! 920:[const] Real Constant 'Zero'
      RT_30 = 0.0

! 930:[const] Real Constant 'Zero'
      RT_105 = 0.0

! 940:[datatap] Scalar/Array Tap 
      RT_41 = Bess_Ms(3)

! 950:[gain] Gain Block 
!  Gain
      Vol_Bess = 1000.0 * RT_41

! 960:[const] Real Constant 'PFSpt_SC'
      RT_29 = 1.0

! 970:[datatap] Scalar/Array Tap 
      Hz_Bess = Bess_Ms(4)

! 980:[const] Real Constant 'VolSpt_SC'
      RT_28 = 1.0

! 990:[const] Real Constant 'Zero'
      RT_61 = 0.0

! 1000:[const] Real Constant 'SCSOpCmd'
      RT_27 = 21416.0

! 1010:[const] Real Constant 'Zero'
      RT_68 = 0.0

! 1030:[sampler] Interpolating Sampler 
      DO IVD1_1 = 1,10
        RT_42(IVD1_1) = SAMP5(SCS_Fb(IVD1_1),10.0,0,0.0,0)
      ENDDO

! 1040:[const] Real Constant 'Zero'
      RT_83 = 0.0

! 1050:[datatap] Scalar/Array Tap 
      WRtg_SCS = RT_42(1)

! 1060:[const] Real Constant 'Zero'
      RT_62 = 0.0

! 1070:[datatap] Scalar/Array Tap 
      VArRtg_SCS = RT_42(2)

! 1080:[datatap] Scalar/Array Tap 
      W_aval_SCS = RT_42(3)

! 1090:[const] Real Constant 'Zero'
      RT_70 = 0.0

! 1100:[datatap] Scalar/Array Tap 
      VAr_aval_SCS = RT_42(4)

! 1110:[datatap] Scalar/Array Tap 
      W_SCS = RT_42(5)

! 1120:[datatap] Scalar/Array Tap 
      VAr_SCS = RT_42(6)

! 1140:[sampler] Interpolating Sampler 
      DO IVD1_1 = 1,10
        RT_43(IVD1_1) = SAMP5(SC_Fb(IVD1_1),10.0,0,0.0,0)
      ENDDO

! 1150:[datatap] Scalar/Array Tap 
      WRtg_SC = RT_43(1)

! 1160:[const] Real Constant 'Zero'
      RT_72 = 0.0

! 1170:[datatap] Scalar/Array Tap 
      VArRtg_SC = RT_43(2)

! 1180:[datatap] Scalar/Array Tap 
      W_aval_SC = RT_43(3)

! 1190:[datatap] Scalar/Array Tap 
      VAr_aval_SC = RT_43(4)

! 1200:[datatap] Scalar/Array Tap 
      W_SC = RT_43(5)

! 1210:[datatap] Scalar/Array Tap 
      VAr_SC = RT_43(6)

! 1230:[sampler] Interpolating Sampler 
      DO IVD1_1 = 1,10
        RT_55(IVD1_1) = SAMP5(SCDC_Fb(IVD1_1),10.0,0,0.0,0)
      ENDDO

! 1240:[const] Real Constant 'Zero'
      RT_97 = 0.0

! 1250:[datatap] Scalar/Array Tap 
      WRtg_SCDC = RT_55(1)

! 1260:[datatap] Scalar/Array Tap 
      VArRtg_SCDC = RT_55(2)

! 1270:[datatap] Scalar/Array Tap 
      W_aval_SCDC = RT_55(3)

! 1280:[datatap] Scalar/Array Tap 
      VAr_aval_SCDC = RT_55(4)

! 1290:[datatap] Scalar/Array Tap 
      W_SCDC = RT_55(5)

! 1300:[const] Real Constant 'Zero'
      RT_99 = 0.0

! 1310:[datatap] Scalar/Array Tap 
      VAr_SCDC = RT_55(6)

! 1320:[datatap] Scalar/Array Tap 
      WDC_PV_SCDC = RT_55(7)

! 1330:[datatap] Scalar/Array Tap 
      WDC_Bat_SCDC = RT_55(8)

! 1340:[sumjct] Summing/Differencing Junctions 
      WRtg_SCMod = + WRtg_SC + WRtg_SCDC

! 1360:[sampler] Interpolating Sampler 
      DO IVD1_1 = 1,10
        RT_96(IVD1_1) = SAMP5(GEN_Fb(IVD1_1),10.0,0,0.0,0)
      ENDDO

! 1370:[sumjct] Summing/Differencing Junctions 
      VArRtg_SCMod = + VArRtg_SC + VArRtg_SCDC

! 1380:[datatap] Scalar/Array Tap 
      WRtg_DG = RT_96(1)

! 1390:[datatap] Scalar/Array Tap 
      VArRtg__DG = RT_96(2)

! 1400:[const] Real Constant 'Zero'
      RT_101 = 0.0

! 1410:[datatap] Scalar/Array Tap 
      W_aval_DG = RT_96(3)

! 1420:[datatap] Scalar/Array Tap 
      VAr_aval_DG = RT_96(4)

! 1430:[datatap] Scalar/Array Tap 
      W_DG = RT_96(5)

! 1440:[datatap] Scalar/Array Tap 
      VAr_DG = RT_96(6)

! 1450:[sumjct] Summing/Differencing Junctions 
      RT_49 = + Tactivate_ + RT_50

! 1460:[datamerge] Merges data signals into an array 
      RT_10(1) = RT_47
      RT_10(2) = RT_47
      RT_10(3) = RT_47
      RT_10(4) = RT_47
      RT_10(5) = RT_47
      RT_10(6) = RT_47
      RT_10(7) = RT_47
      RT_10(8) = RT_47
      RT_10(9) = RT_47
      RT_10(10) = RT_47

! 1470:[datamerge] Merges data signals into an array 
      RT_11(1) = CtrlMode
      RT_11(2) = ExtPwrApLim
      RT_11(3) = ExtPwrAtLimHi
      RT_11(4) = ExtPwrAtLimLo
      RT_11(5) = ExtPwrRtLimHi
      RT_11(6) = ExtPwrRtLimLo
      RT_11(7) = BessWSpt
      RT_11(8) = PoiVArSpt
      RT_11(9) = PoiPFSpt
      RT_11(10) = VolSpt

! 1480:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_20 = LIMIT(1.0, 1000000000.0, WRtg_SCS)
      ELSE
        RT_20 = WRtg_SCS
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,702507463,1,"Lower limit is more than&
     & the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1490:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,WRtg_SCS,RT_92,1.0,0.0,0.0,RVD2_1)
      RT_91 = RVD2_1(1)

! 1500:[datamerge] Merges data signals into an array 
      RT_1(1 : 10) = RT_11
      RT_1(11) = HzSpt
      RT_1(12) = ExtPwrAtLimSales
      RT_1(13) = RT_35
      RT_1(14) = RT_35
      RT_1(15) = RT_35
      RT_1(16) = RT_35
      RT_1(17) = RT_35
      RT_1(18) = RT_35
      RT_1(19) = RT_35
      RT_1(20) = RT_35

! 1510:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_23 = LIMIT(1.0, 1000000000.0, VArRtg_SCS)
      ELSE
        RT_23 = VArRtg_SCS
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1546801954,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1520:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,VArRtg_SCS,RT_93,1.0,0.0,0.0,RVD2_1)
      RT_88 = RVD2_1(1)

! 1530:[PQ_Select]  
      CALL PQ_SelectDyn(VAr_Bess, W_Bess, VAr_SCS, W_SCS, VAr_BESS_meter&
     &, W_BESS_meter)


! 1540:[datamerge] Merges data signals into an array 
      RT_3(1 : 20) = RT_1
      RT_3(21) = W_POI
      RT_3(22) = VAr_POI
      RT_3(23) = Vol_POI
      RT_3(24) = Hz_POI
      RT_3(25) = McbStt
      RT_3(26) = GcbStt
      RT_3(27 : 29) = Vrms_abc_POI
      RT_3(30) = RT_2

! 1550:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_34 = LIMIT(1.0, 1000000000.0, WRtg_SCMod)
      ELSE
        RT_34 = WRtg_SCMod
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,622096297,1,"Lower limit is more than&
     & the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1560:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,WRtg_SCMod,RT_94,1.0,0.0,0.0,RVD2_1)
      RT_86 = RVD2_1(1)

! 1570:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_51 = LIMIT(1.0, 1000000000.0, VArRtg_SCMod)
      ELSE
        RT_51 = VArRtg_SCMod
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1604001910,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1580:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,VArRtg_SCMod,RT_95,1.0,0.0,0.0,RVD2_1)
      RT_84 = RVD2_1(1)

! 1590:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_56 = LIMIT(1.0, 1000000000.0, WRtg_SCDC)
      ELSE
        RT_56 = WRtg_SCDC
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1469567227,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1600:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_60 = LIMIT(1.0, 1000000000.0, WRtg_SCDC)
      ELSE
        RT_60 = WRtg_SCDC
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1213978662,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1610:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (1.0 .LE. 1000000000.0) THEN
        RT_63 = LIMIT(1.0, 1000000000.0, WRtg_SCDC)
      ELSE
        RT_63 = WRtg_SCDC
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1499914178,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1620:[sumjct] Summing/Differencing Junctions 
      W_SCMod = + W_SC + W_SCDC

! 1630:[sumjct] Summing/Differencing Junctions 
      VAr_SCMod = + VAr_SC + VAr_SCDC

! 1640:[datamerge] Merges data signals into an array 
      xdata(1) = REAL(FileNo)
      xdata(2) = REAL(Log2File_)
      xdata(3) = RT_4
      xdata(4) = RT_5
      xdata(5) = Tactivate_
      xdata(6) = Tcyc_
      xdata(7) = RT_6
      xdata(8) = RT_7
      xdata(9) = RT_8
      xdata(10) = RT_9
      xdata(11 : 20) = RT_10

! 1650:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_48,RT_49,1.0,0.0,0.0,RVD2_1)
      Activate = RVD2_1(1)

! 1660:[PQ_Select]  
      CALL PQ_SelectDyn(VAr_PV, W_PV, VAr_SCMod, W_SCMod, VAr_PV_meter, &
     &W_PV_meter)


! 1670:[datamerge] Merges data signals into an array 
      RT_67(1 : 30) = RT_3
      RT_67(31) = W_PV
      RT_67(32) = VAr_PV
      RT_67(33) = Vol_PV
      RT_67(34) = Hz_PV
      RT_67(35) = W_Bess
      RT_67(36) = VAr_Bess
      RT_67(37) = Vol_Bess
      RT_67(38) = Hz_Bess
      RT_67(39) = RT_66
      RT_67(40) = RT_66

! 1680:[datamerge] Merges data signals into an array 
      RT_69(1 : 40) = RT_67
      RT_69(41) = WRtg_SCS
      RT_69(42) = VArRtg_SCS
      RT_69(43) = W_aval_SCS
      RT_69(44) = VAr_aval_SCS
      RT_69(45) = W_SCS
      RT_69(46) = VAr_SCS
      RT_69(47) = RT_68
      RT_69(48) = RT_68
      RT_69(49) = RT_68
      RT_69(50) = RT_68

! 1690:[datamerge] Merges data signals into an array 
      RT_71(1 : 50) = RT_69
      RT_71(51) = WRtg_SC
      RT_71(52) = VArRtg_SC
      RT_71(53) = W_aval_SC
      RT_71(54) = VAr_aval_SC
      RT_71(55) = W_SC
      RT_71(56) = VAr_SC
      RT_71(57) = RT_70
      RT_71(58) = RT_70
      RT_71(59) = RT_70
      RT_71(60) = RT_70

! 1700:[datamerge] Merges data signals into an array 
      RT_73(1 : 60) = RT_71
      RT_73(61) = WRtg_SCDC
      RT_73(62) = VArRtg_SCDC
      RT_73(63) = W_aval_SCDC
      RT_73(64) = VAr_aval_SCDC
      RT_73(65) = W_SCDC
      RT_73(66) = VAr_SCDC
      RT_73(67) = WDC_PV_SCDC
      RT_73(68) = WDC_Bat_SCDC
      RT_73(69) = RT_72
      RT_73(70) = RT_72

! 1710:[datamerge] Merges data signals into an array 
      RT_98(1 : 70) = RT_73
      RT_98(71) = WRtg_DG
      RT_98(72) = VArRtg__DG
      RT_98(73) = W_aval_DG
      RT_98(74) = VAr_aval_DG
      RT_98(75) = W_DG
      RT_98(76) = VAr_DG
      RT_98(77) = RT_97
      RT_98(78) = RT_97
      RT_98(79) = RT_97
      RT_98(80) = RT_97

! 1720:[datamerge] Merges data signals into an array 
      RT_100(1 : 80) = RT_98
      RT_100(81 : 83) = Vrms_abc_FRT
      RT_100(84) = RT_99
      RT_100(85) = RT_99
      RT_100(86) = RT_99
      RT_100(87) = RT_99
      RT_100(88) = RT_99
      RT_100(89) = RT_99
      RT_100(90) = RT_99

! 1730:[datamerge] Merges data signals into an array 
      xin(1 : 90) = RT_100
      xin(91) = RT_101
      xin(92) = RT_101
      xin(93) = RT_101
      xin(94) = RT_101
      xin(95) = RT_101
      xin(96) = RT_101
      xin(97) = RT_101
      xin(98) = RT_101
      xin(99) = RT_101
      xin(100) = RT_101

! 1740:[HyCtl_Lib]  'HyCon'

! Sample Time Required by the SMA Hybrid controller
      DELT_CTL = xdata(6)  ! Default is 40ms

! Save Storage pointers for the output state variables
      NSTORF_SAVE = NSTORF
      NSTORI_SAVE = NSTORI
      NSTORF = NSTORF + 50
      NSTORI = NSTORI + 2

! Set Initial Conditions of State Variables
      IF ( TIMEZERO ) THEN
! Set Initial state of time step counter
         STORI(NSTORI_SAVE+0) = NINT(DELT_CTL/DELT)
! Warning if the simulation time step is not an integer of the time step required by the SMA controls
         ! IF ( ((DELT_CTL/DELT)-INT(DELT_CTL/DELT)).GE. 0.001) THEN
            ! WRITE(6,*) "*** Warning - The SMA Hybrid controller requires a 40ms time step..."
            ! WRITE(6,*) "The simulation time step should be N times smaller than 40 mSec,"
            ! WRITE(6,*) " where N is an integer..."
         ! ENDIF
      ELSE
! Increment time step counter by the simulation time step (DELT)
         STORI(NSTORI_SAVE+0) = STORI(NSTORI_SAVE+0) + 1
      ENDIF

      IF ( FIRSTSTEP ) THEN
! Set marker that it is the first step after a new start
         STORI(NSTORI_SAVE+1) = 1
      ENDIF

! Retrieve from Storage
      do i = 1, 50
          xout(i)= STORF(NSTORF_SAVE+i-1)
      end do


! Check if the controls should be called on its 40ms sample time
      IF ( TIMEZERO .OR. (STORI(NSTORI_SAVE+0).GE.NINT(DELT_CTL/DELT)) )&
     & THEN

! Reset timer
        STORI(NSTORI_SAVE+0) = 0

! Pass first step flag
        xdata(3) = STORI(NSTORI_SAVE+1)

! Reset the FIRSTSTEP flag
         STORI(NSTORI_SAVE+1) = 0

!Call control code
         CALL HyCon_PSCAD_FInterface(xdata, xin, xout, RT_12)

! Put back into storage
        do i = 1, 50
           STORF(NSTORF_SAVE+i-1) = xout(i)
        end do

      ENDIF

! Increment of Storage Pointers for the SMA code is done here
! because it must be incremented for every time step (not juss steps where the SMA code is called)
      NSTORI = NSTORI + 100000

! 1750:[datatap] Scalar/Array Tap 
      WSpt_SCS = xout(1)

! 1760:[datatap] Scalar/Array Tap 
      VArSpt_SCS = xout(2)

! 1770:[datatap] Scalar/Array Tap 
      WSpt_SC = xout(3)

! 1780:[datatap] Scalar/Array Tap 
      VArSpt_SC = xout(4)

! 1790:[datatap] Scalar/Array Tap 
      HybridPwrAtChrSpntTot = xout(5)

! 1800:[datatap] Scalar/Array Tap 
      HybridPwrAtDisSpntTot = xout(6)

! 1810:[datatap] Scalar/Array Tap 
      VtgNomSpntPc = xout(7)

! 1820:[datatap] Scalar/Array Tap 
      HybridSysState = xout(8)

! 1830:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_22 = VArSpt_SCS
      ELSE
         RT_22 = BatPwrRtInit_
      ENDIF
      NRTCI = NRTCI + 1
!

! 1840:[div] Divider 
      IF (ABS(RT_23) .LT. 1.0E-100) THEN
         IF (RT_23 .LT. 0.0)  THEN
            RT_21 = -1.0E100 * RT_22
         ELSE
            RT_21 =  1.0E100 * RT_22
         ENDIF
      ELSE
         RT_21 = RT_22 / RT_23
      ENDIF

! 1850:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (-1.0 .LE. 1.0) THEN
        RT_80 = LIMIT(-1.0, 1.0, RT_21)
      ELSE
        RT_80 = RT_21
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,699518702,1,"Lower limit is more than&
     & the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1860:[unity] Type/Shape conversion block 
! real -> integer
      IT_1 = INT(HybridSysState)

! 1870:[select] Two Input Selector 
      IF (NINT(RT_88) .EQ. RTCI(NRTCI)) THEN
         VArSpt_pu_SCS = RT_80
      ELSE
         VArSpt_pu_SCS = RT_89
      ENDIF
      NRTCI = NRTCI + 1
!

! 1880:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_33 = WSpt_SC
      ELSE
         RT_33 = PvPwrAtInit_
      ENDIF
      NRTCI = NRTCI + 1
!

! 1890:[div] Divider 
      IF (ABS(RT_34) .LT. 1.0E-100) THEN
         IF (RT_34 .LT. 0.0)  THEN
            RT_32 = -1.0E100 * RT_33
         ELSE
            RT_32 =  1.0E100 * RT_33
         ENDIF
      ELSE
         RT_32 = RT_33 / RT_34
      ENDIF

! 1900:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (-1.0 .LE. 1.0) THEN
        RT_81 = LIMIT(-1.0, 1.0, RT_32)
      ELSE
        RT_81 = RT_32
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1776931512,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1910:[select] Two Input Selector 
      IF (NINT(RT_86) .EQ. RTCI(NRTCI)) THEN
         WSpt_pu_SC = RT_81
      ELSE
         WSpt_pu_SC = RT_87
      ENDIF
      NRTCI = NRTCI + 1
!

! 1920:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_52 = VArSpt_SC
      ELSE
         RT_52 = PvPwrRtInit_
      ENDIF
      NRTCI = NRTCI + 1
!

! 1930:[div] Divider 
      IF (ABS(RT_51) .LT. 1.0E-100) THEN
         IF (RT_51 .LT. 0.0)  THEN
            RT_53 = -1.0E100 * RT_52
         ELSE
            RT_53 =  1.0E100 * RT_52
         ENDIF
      ELSE
         RT_53 = RT_52 / RT_51
      ENDIF

! 1940:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (-1.0 .LE. 1.0) THEN
        RT_82 = LIMIT(-1.0, 1.0, RT_53)
      ELSE
        RT_82 = RT_53
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,1596762434,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1950:[select] Two Input Selector 
      IF (NINT(RT_84) .EQ. RTCI(NRTCI)) THEN
         VArSpt_pu_SC = RT_82
      ELSE
         VArSpt_pu_SC = RT_85
      ENDIF
      NRTCI = NRTCI + 1
!

! 1960:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_58 = HybridPwrAtChrSpntTot
      ELSE
         RT_58 = RT_57
      ENDIF
      NRTCI = NRTCI + 1
!

! 1970:[div] Divider 
      IF (ABS(RT_56) .LT. 1.0E-100) THEN
         IF (RT_56 .LT. 0.0)  THEN
            HybridPwrAtChrSpntTot_pu_SC = -1.0E100 * RT_58
         ELSE
            HybridPwrAtChrSpntTot_pu_SC =  1.0E100 * RT_58
         ENDIF
      ELSE
         HybridPwrAtChrSpntTot_pu_SC = RT_58 / RT_56
      ENDIF

! 1980:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_59 = HybridPwrAtDisSpntTot
      ELSE
         RT_59 = RT_61
      ENDIF
      NRTCI = NRTCI + 1
!

! 1990:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_64 = WSpt_SCS
      ELSE
         RT_64 = RT_62
      ENDIF
      NRTCI = NRTCI + 1
!

! 2000:[div] Divider 
      IF (ABS(RT_63) .LT. 1.0E-100) THEN
         IF (RT_63 .LT. 0.0)  THEN
            RT_65 = -1.0E100 * RT_64
         ELSE
            RT_65 =  1.0E100 * RT_64
         ENDIF
      ELSE
         RT_65 = RT_64 / RT_63
      ENDIF

! 2010:[datatap] Scalar/Array Tap 
      PwrAtLimHi = xout(21)

! 2020:[datatap] Scalar/Array Tap 
      PwrAtLimLo = xout(22)

! 2030:[datatap] Scalar/Array Tap 
      PwrApLim = xout(23)

! 2040:[datatap] Scalar/Array Tap 
      PvBatMax = xout(24)

! 2050:[datatap] Scalar/Array Tap 
      PvBatMin = xout(25)

! 2060:[datatap] Scalar/Array Tap 
      PvPwrAtLimTot = xout(26)

! 2070:[datatap] Scalar/Array Tap 
      BatPwrAtSpntTot = xout(27)

! 2080:[datatap] Scalar/Array Tap 
      BatPwrAtSpnt_Cmd = xout(28)

! 2090:[datatap] Scalar/Array Tap 
      PvPwrAtLim_Cmd = xout(29)

! 2100:[datatap] Scalar/Array Tap 
      FrqDroopActive = xout(30)

! 2110:[datatap] Scalar/Array Tap 
      AutoMode = xout(31)

! 2120:[datatap] Scalar/Array Tap 
      FrqPoiFiltered = xout(32)

! 2130:[datatap] Scalar/Array Tap 
      PwrRtSpnt = xout(33)

! 2140:[datatap] Scalar/Array Tap 
      PwrRtSpntTot = xout(34)

! 2150:[select] Two Input Selector 
      IF (NINT(Activate) .EQ. RTCI(NRTCI)) THEN
         RT_19 = WSpt_SCS
      ELSE
         RT_19 = BatPwrAtInit_
      ENDIF
      NRTCI = NRTCI + 1
!

! 2160:[div] Divider 
      IF (ABS(RT_20) .LT. 1.0E-100) THEN
         IF (RT_20 .LT. 0.0)  THEN
            RT_18 = -1.0E100 * RT_19
         ELSE
            RT_18 =  1.0E100 * RT_19
         ENDIF
      ELSE
         RT_18 = RT_19 / RT_20
      ENDIF

! 2170:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (-1.0 .LE. 1.0) THEN
        RT_79 = LIMIT(-1.0, 1.0, RT_18)
      ELSE
        RT_79 = RT_18
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,364919865,1,"Lower limit is more than&
     & the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 2180:[select] Two Input Selector 
      IF (IT_1 .EQ. RTCI(NRTCI)) THEN
         RT_46 = RT_103
      ELSE
         RT_46 = RT_102
      ENDIF
      NRTCI = NRTCI + 1
!

! 2190:[select] Two Input Selector 
      IF (IT_1 .EQ. RTCI(NRTCI)) THEN
         RT_45 = RT_17
      ELSE
         RT_45 = RT_46
      ENDIF
      NRTCI = NRTCI + 1
!

! 2200:[datamerge] Merges data signals into an array 
      RT_74(1) = PwrAtLimHi
      RT_74(2) = PwrAtLimLo
      RT_74(3) = PwrApLim
      RT_74(4) = PvBatMax
      RT_74(5) = PvBatMin
      RT_74(6) = PvPwrAtLimTot
      RT_74(7) = BatPwrAtSpntTot
      RT_74(8) = BatPwrAtSpnt_Cmd
      RT_74(9) = PvPwrAtLim_Cmd
      RT_74(10) = FrqDroopActive

! 2210:[select] Two Input Selector 
      IF (IT_1 .EQ. RTCI(NRTCI)) THEN
         SCSOpCmd = GridOpCmdSCS_
      ELSE
         SCSOpCmd = RT_45
      ENDIF
      NRTCI = NRTCI + 1
!

! 2220:[select] Two Input Selector 
      IF (NINT(RT_91) .EQ. RTCI(NRTCI)) THEN
         WSpt_pu_SCS = RT_79
      ELSE
         WSpt_pu_SCS = RT_90
      ENDIF
      NRTCI = NRTCI + 1
!

! 2230:[datatap] Scalar/Array Tap 
      BatGfPwrRtSpntOfs = xout(45)

! 2240:[datatap] Scalar/Array Tap 
      BatGfPwrAtSpntOfs = xout(44)

! 2250:[datatap] Scalar/Array Tap 
      VtgSpnt = xout(43)

! 2260:[datatap] Scalar/Array Tap 
      MaxVtg_FRT = xout(42)

! 2270:[datatap] Scalar/Array Tap 
      MinVtg_FRT = xout(41)

! 2280:[datatap] Scalar/Array Tap 
      VtgUpLim = xout(40)

! 2290:[datatap] Scalar/Array Tap 
      VtgLoLim = xout(39)

! 2300:[datatap] Scalar/Array Tap 
      FrtActive = xout(38)

! 2310:[datatap] Scalar/Array Tap 
      PwrRtCtrlMode = xout(37)

! 2320:[datatap] Scalar/Array Tap 
      PvPwrRtSpnt_Cmd = xout(36)

! 2330:[datatap] Scalar/Array Tap 
      BatPwrRtSpnt_Cmd = xout(35)

! 2340:[datamerge] Merges data signals into an array 
      RT_75(1 : 10) = RT_74
      RT_75(11) = AutoMode
      RT_75(12) = FrqPoiFiltered
      RT_75(13) = PwrRtSpnt
      RT_75(14) = PwrRtSpntTot
      RT_75(15) = BatPwrRtSpnt_Cmd
      RT_75(16) = PvPwrRtSpnt_Cmd
      RT_75(17) = PwrRtCtrlMode
      RT_75(18) = FrtActive
      RT_75(19) = VtgLoLim
      RT_75(20) = VtgUpLim

! 2350:[select] Two Input Selector 
      IF (NINT(WRtg_SCDC) .EQ. RTCI(NRTCI)) THEN
         WSptMin_pu_SCDC = RT_83
      ELSE
         WSptMin_pu_SCDC = RT_65
      ENDIF
      NRTCI = NRTCI + 1
!

! 2360:[div] Divider 
      IF (ABS(RT_60) .LT. 1.0E-100) THEN
         IF (RT_60 .LT. 0.0)  THEN
            HybridPwrAtDisSpntTot_pu_SC = -1.0E100 * RT_59
         ELSE
            HybridPwrAtDisSpntTot_pu_SC =  1.0E100 * RT_59
         ENDIF
      ELSE
         HybridPwrAtDisSpntTot_pu_SC = RT_59 / RT_60
      ENDIF

! 2370:[datamerge] Merges data signals into an array 
      RT_31(1) = WSpt_pu_SC
      RT_31(2) = VArSpt_pu_SC
      RT_31(3) = RT_29
      RT_31(4) = RT_28
      RT_31(5) = Fsys_
      RT_31(6) = RT_27
      RT_31(7) = WSptMin_pu_SCDC
      RT_31(8) = HybridPwrAtDisSpntTot_pu_SC
      RT_31(9) = HybridPwrAtChrSpntTot_pu_SC
      RT_31(10) = RT_30

! 2380:[div] Divider 
      IF (ABS(RT_44) .LT. 1.0E-100) THEN
         IF (RT_44 .LT. 0.0)  THEN
            RT_15 = -1.0E100 * VtgNomSpntPc
         ELSE
            RT_15 =  1.0E100 * VtgNomSpntPc
         ENDIF
      ELSE
         RT_15 = VtgNomSpntPc / RT_44
      ENDIF

! 2390:[datamerge] Merges data signals into an array 
      RT_16(1) = WSpt_pu_SCS
      RT_16(2) = VArSpt_pu_SCS
      RT_16(3) = RT_14
      RT_16(4) = RT_15
      RT_16(5) = Fsys_
      RT_16(6) = SCSOpCmd
      RT_16(7) = RT_13
      RT_16(8) = RT_13
      RT_16(9) = RT_13
      RT_16(10) = RT_13

! 2400:[datatap] Scalar/Array Tap 
      Poi_Vol = xout(12)

! 2410:[datatap] Scalar/Array Tap 
      Poi_DiffVAr = xout(11)

! 2420:[datatap] Scalar/Array Tap 
      Poi_DiffW = xout(10)

! 2430:[datatap] Scalar/Array Tap 
      PwrRtPoi = xout(48)

! 2440:[datatap] Scalar/Array Tap 
      PwrAtPoi = xout(47)

! 2450:[datatap] Scalar/Array Tap 
      VtgNomSpnt = xout(46)

! 2460:[datamerge] Merges data signals into an array 
      RT_77(1 : 20) = RT_75
      RT_77(21) = MinVtg_FRT
      RT_77(22) = MaxVtg_FRT
      RT_77(23) = VtgSpnt
      RT_77(24) = BatGfPwrAtSpntOfs
      RT_77(25) = BatGfPwrRtSpntOfs
      RT_77(26) = VtgNomSpnt
      RT_77(27) = PwrAtPoi
      RT_77(28) = PwrRtPoi
      RT_77(29) = RT_76
      RT_77(30) = RT_76

! 2470:[datamerge] Merges data signals into an array 
      SC_Spt(1 : 10) = RT_31
      SC_Spt(11) = RT_105
      SC_Spt(12) = RT_105
      SC_Spt(13) = RT_105
      SC_Spt(14) = RT_105
      SC_Spt(15) = RT_105
      SC_Spt(16) = RT_105
      SC_Spt(17) = RT_105
      SC_Spt(18) = RT_105
      SC_Spt(19) = RT_105
      SC_Spt(20) = RT_105

! 2480:[datamerge] Merges data signals into an array 
      SCS_Spt(1 : 10) = RT_16
      SCS_Spt(11) = Poi_DiffW
      SCS_Spt(12) = Poi_DiffVAr
      SCS_Spt(13) = Poi_Vol
      SCS_Spt(14) = RT_104
      SCS_Spt(15) = RT_104
      SCS_Spt(16) = RT_104
      SCS_Spt(17) = RT_104
      SCS_Spt(18) = RT_104
      SCS_Spt(19) = RT_104
      SCS_Spt(20) = RT_104

! 2490:[datamerge] Merges data signals into an array 
      DEBUG(1 : 30) = RT_77
      DEBUG(31) = RT_78
      DEBUG(32) = RT_78
      DEBUG(33) = RT_78
      DEBUG(34) = RT_78
      DEBUG(35) = RT_78
      DEBUG(36) = RT_78
      DEBUG(37) = RT_78
      DEBUG(38) = RT_78
      DEBUG(39) = RT_78
      DEBUG(40) = RT_78

! 2500:[pgb] Output Channel 'xin'

      DO IVD1_1 = 1, 100
         PGB(IPGB+1+IVD1_1-1) = xin(IVD1_1)
      ENDDO

! 2510:[pgb] Output Channel 'VArSpt_pu_SC'

      PGB(IPGB+101) = VArSpt_pu_SC

! 2520:[pgb] Output Channel 'WSpt_pu_SC'

      PGB(IPGB+102) = WSpt_pu_SC

! 2540:[pgb] Output Channel 'VArSpt_pu_SCS'

      PGB(IPGB+103) = VArSpt_pu_SCS

! 2550:[pgb] Output Channel 'WSpt_pu_SCS'

      PGB(IPGB+104) = WSpt_pu_SCS

! 2570:[pgb] Output Channel 'xout'

      DO IVD1_1 = 1, 50
         PGB(IPGB+105+IVD1_1-1) = xout(IVD1_1)
      ENDDO

! 2580:[datatap] Scalar/Array Tap 
      HybridSysStateTrans = xout(9)

! 2590:[unity] Type/Shape conversion block 
! real -> real
      PVDCPwrAtMaxTot = WRtg_SCDC

! 2600:[unity] Type/Shape conversion block 
! real -> real
      PvPwrRtMaxTot = VArRtg_SC

! 2610:[unity] Type/Shape conversion block 
! real -> real
      PvPwrAtMaxTot = WRtg_SC

! 2620:[unity] Type/Shape conversion block 
! real -> real
      BessPwrRtMaxTot = VArRtg_SCS

! 2630:[unity] Type/Shape conversion block 
! real -> real
      BessPwrAtMaxTot = WRtg_SCS

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 1) = FileNum
      STOI(ISTOI + 2) = Log2File
      STOF(ISTOF + 152) = Fsys
      STOI(ISTOI + 3) = GridOpCmdSCS
      STOF(ISTOF + 153) = Tcyc
      STOF(ISTOF + 154) = Tactivate
      STOF(ISTOF + 155) = BatPwrAtInit
      STOF(ISTOF + 156) = BatPwrRtInit
      STOF(ISTOF + 157) = PvPwrAtInit
      STOF(ISTOF + 158) = PvPwrRtInit
      STOF(ISTOF + 159) = VAr_PV_meter
      STOF(ISTOF + 160) = W_PV_meter
      STOF(ISTOF + 161) = VAr_BESS_meter
      STOF(ISTOF + 162) = W_BESS_meter
      STOF(ISTOF + 183) = W_POI
      STOF(ISTOF + 184) = VAr_POI
      STOF(ISTOF + 185) = Vol_POI
      STOF(ISTOF + 186) = Hz_POI
      STOF(ISTOF + 187) = McbStt
      STOF(ISTOF + 188) = GcbStt
      STOF(ISTOF + 192) = RT_2
      STOI(ISTOI + 4) = FileNo
      STOF(ISTOF + 223) = RT_4
      STOF(ISTOF + 224) = RT_5
      STOF(ISTOF + 225) = Tactivate_
      STOF(ISTOF + 226) = Tcyc_
      STOF(ISTOF + 227) = RT_6
      STOF(ISTOF + 228) = RT_7
      STOF(ISTOF + 229) = RT_8
      STOF(ISTOF + 230) = RT_9
      STOF(ISTOF + 241) = ExtPwrAtLimHi
      STOF(ISTOF + 242) = ExtPwrAtLimLo
      STOF(ISTOF + 243) = BessWSpt
      STOF(ISTOF + 244) = PoiVArSpt
      STOF(ISTOF + 245) = PoiPFSpt
      STOF(ISTOF + 246) = VolSpt
      STOF(ISTOF + 257) = RT_12
      STOF(ISTOF + 258) = CtrlMode
      STOF(ISTOF + 259) = RT_13
      STOF(ISTOF + 260) = WSpt_pu_SCS
      STOF(ISTOF + 261) = VArSpt_pu_SCS
      STOF(ISTOF + 262) = RT_14
      STOF(ISTOF + 263) = RT_15
      STOF(ISTOF + 274) = RT_17
      STOF(ISTOF + 275) = RT_18
      STOF(ISTOF + 276) = RT_19
      STOF(ISTOF + 277) = RT_20
      STOF(ISTOF + 278) = RT_21
      STOF(ISTOF + 279) = RT_22
      STOF(ISTOF + 280) = RT_23
      STOF(ISTOF + 281) = RT_24
      STOF(ISTOF + 282) = RT_25
      STOF(ISTOF + 283) = RT_26
      STOF(ISTOF + 284) = BessPwrAtMaxTot
      STOF(ISTOF + 285) = BessPwrRtMaxTot
      STOF(ISTOF + 286) = RT_27
      STOF(ISTOF + 287) = RT_28
      STOF(ISTOF + 288) = RT_29
      STOF(ISTOF + 289) = VArSpt_pu_SC
      STOF(ISTOF + 290) = Fsys_
      STOF(ISTOF + 291) = WSptMin_pu_SCDC
      STOF(ISTOF + 292) = RT_30
      STOF(ISTOF + 303) = RT_32
      STOF(ISTOF + 304) = RT_33
      STOF(ISTOF + 305) = RT_34
      STOF(ISTOF + 306) = RT_35
      STOF(ISTOF + 307) = HzSpt
      STOF(ISTOF + 308) = ExtPwrAtLimSales
      STOF(ISTOF + 309) = RT_36
      STOF(ISTOF + 310) = RT_37
      STOF(ISTOF + 311) = RT_38
      STOF(ISTOF + 312) = PvPwrRtMaxTot
      STOF(ISTOF + 313) = PvPwrAtMaxTot
      STOF(ISTOF + 334) = RT_39
      STOF(ISTOF + 335) = RT_40
      STOF(ISTOF + 336) = RT_41
      STOI(ISTOI + 5) = Log2File_
      STOF(ISTOF + 357) = VtgNomSpntPc
      STOF(ISTOF + 358) = RT_44
      STOI(ISTOI + 6) = IT_1
      STOF(ISTOF + 359) = GridOpCmdSCS_
      STOF(ISTOF + 360) = RT_45
      STOF(ISTOF + 361) = SCSOpCmd
      STOF(ISTOF + 362) = HybridSysState
      STOF(ISTOF + 363) = RT_46
      STOF(ISTOF + 364) = RT_47
      STOF(ISTOF + 365) = WSpt_SC
      STOF(ISTOF + 366) = RT_48
      STOF(ISTOF + 367) = RT_49
      STOF(ISTOF + 368) = RT_50
      STOF(ISTOF + 369) = BatPwrAtInit_
      STOF(ISTOF + 370) = VArSpt_SCS
      STOF(ISTOF + 371) = BatPwrRtInit_
      STOF(ISTOF + 372) = PvPwrAtInit_
      STOF(ISTOF + 373) = RT_51
      STOF(ISTOF + 374) = VArSpt_SC
      STOF(ISTOF + 375) = PvPwrRtInit_
      STOF(ISTOF + 376) = RT_52
      STOF(ISTOF + 377) = RT_53
      STOF(ISTOF + 381) = PVDCPwrAtMaxTot
      STOF(ISTOF + 392) = W_SCMod
      STOF(ISTOF + 393) = VAr_SCMod
      STOF(ISTOF + 394) = RT_56
      STOF(ISTOF + 395) = HybridPwrAtChrSpntTot
      STOF(ISTOF + 396) = RT_57
      STOF(ISTOF + 397) = RT_58
      STOF(ISTOF + 398) = HybridPwrAtChrSpntTot_pu_SC
      STOF(ISTOF + 399) = HybridPwrAtDisSpntTot_pu_SC
      STOF(ISTOF + 400) = RT_59
      STOF(ISTOF + 401) = RT_60
      STOF(ISTOF + 402) = HybridPwrAtDisSpntTot
      STOF(ISTOF + 403) = RT_61
      STOF(ISTOF + 404) = RT_62
      STOF(ISTOF + 405) = RT_63
      STOF(ISTOF + 406) = Activate
      STOF(ISTOF + 407) = WSpt_SCS
      STOF(ISTOF + 408) = RT_64
      STOF(ISTOF + 409) = RT_65
      STOF(ISTOF + 410) = W_PV
      STOF(ISTOF + 411) = VAr_PV
      STOF(ISTOF + 412) = Vol_PV
      STOF(ISTOF + 413) = Hz_PV
      STOF(ISTOF + 414) = W_Bess
      STOF(ISTOF + 415) = VAr_Bess
      STOF(ISTOF + 416) = Vol_Bess
      STOF(ISTOF + 417) = Hz_Bess
      STOF(ISTOF + 418) = RT_66
      STOF(ISTOF + 459) = W_aval_SCS
      STOF(ISTOF + 460) = VAr_aval_SCS
      STOF(ISTOF + 461) = W_SCS
      STOF(ISTOF + 462) = VAr_SCS
      STOF(ISTOF + 463) = RT_68
      STOF(ISTOF + 514) = W_aval_SC
      STOF(ISTOF + 515) = VAr_aval_SC
      STOF(ISTOF + 516) = W_SC
      STOF(ISTOF + 517) = VAr_SC
      STOF(ISTOF + 518) = RT_70
      STOF(ISTOF + 579) = W_aval_SCDC
      STOF(ISTOF + 580) = VAr_aval_SCDC
      STOF(ISTOF + 581) = W_SCDC
      STOF(ISTOF + 582) = VAr_SCDC
      STOF(ISTOF + 583) = WDC_PV_SCDC
      STOF(ISTOF + 584) = WDC_Bat_SCDC
      STOF(ISTOF + 585) = RT_72
      STOF(ISTOF + 656) = PwrAtLimHi
      STOF(ISTOF + 657) = PwrAtLimLo
      STOF(ISTOF + 658) = PwrApLim
      STOF(ISTOF + 659) = PvBatMax
      STOF(ISTOF + 660) = PvBatMin
      STOF(ISTOF + 661) = PvPwrAtLimTot
      STOF(ISTOF + 662) = BatPwrAtSpntTot
      STOF(ISTOF + 663) = BatPwrAtSpnt_Cmd
      STOF(ISTOF + 664) = PvPwrAtLim_Cmd
      STOF(ISTOF + 665) = FrqDroopActive
      STOF(ISTOF + 676) = AutoMode
      STOF(ISTOF + 677) = FrqPoiFiltered
      STOF(ISTOF + 678) = PwrRtSpnt
      STOF(ISTOF + 679) = PwrRtSpntTot
      STOF(ISTOF + 680) = BatPwrRtSpnt_Cmd
      STOF(ISTOF + 681) = PvPwrRtSpnt_Cmd
      STOF(ISTOF + 682) = PwrRtCtrlMode
      STOF(ISTOF + 683) = FrtActive
      STOF(ISTOF + 684) = VtgLoLim
      STOF(ISTOF + 685) = VtgUpLim
      STOF(ISTOF + 706) = MinVtg_FRT
      STOF(ISTOF + 707) = MaxVtg_FRT
      STOF(ISTOF + 708) = VtgSpnt
      STOF(ISTOF + 709) = BatGfPwrAtSpntOfs
      STOF(ISTOF + 710) = BatGfPwrRtSpntOfs
      STOF(ISTOF + 711) = VtgNomSpnt
      STOF(ISTOF + 712) = PwrAtPoi
      STOF(ISTOF + 713) = PwrRtPoi
      STOF(ISTOF + 714) = RT_76
      STOF(ISTOF + 745) = RT_78
      STOF(ISTOF + 746) = VArRtg_SC
      STOF(ISTOF + 747) = VArRtg_SCDC
      STOF(ISTOF + 748) = WRtg_SC
      STOF(ISTOF + 749) = RT_79
      STOF(ISTOF + 750) = RT_80
      STOF(ISTOF + 751) = RT_81
      STOF(ISTOF + 752) = RT_82
      STOF(ISTOF + 753) = WRtg_SCDC
      STOF(ISTOF + 754) = RT_83
      STOF(ISTOF + 755) = RT_84
      STOF(ISTOF + 756) = RT_85
      STOF(ISTOF + 757) = RT_86
      STOF(ISTOF + 758) = RT_87
      STOF(ISTOF + 759) = WSpt_pu_SC
      STOF(ISTOF + 760) = RT_88
      STOF(ISTOF + 761) = RT_89
      STOF(ISTOF + 762) = RT_90
      STOF(ISTOF + 763) = RT_91
      STOF(ISTOF + 764) = WRtg_SCS
      STOF(ISTOF + 765) = RT_92
      STOF(ISTOF + 766) = RT_93
      STOF(ISTOF + 767) = VArRtg_SCS
      STOF(ISTOF + 768) = WRtg_SCMod
      STOF(ISTOF + 769) = RT_94
      STOF(ISTOF + 770) = RT_95
      STOF(ISTOF + 771) = VArRtg_SCMod
      STOF(ISTOF + 882) = WRtg_DG
      STOF(ISTOF + 883) = VArRtg__DG
      STOF(ISTOF + 884) = W_aval_DG
      STOF(ISTOF + 885) = VAr_aval_DG
      STOF(ISTOF + 886) = W_DG
      STOF(ISTOF + 887) = VAr_DG
      STOF(ISTOF + 888) = RT_97
      STOF(ISTOF + 972) = RT_99
      STOF(ISTOF + 1063) = RT_101
      STOF(ISTOF + 1064) = RT_102
      STOF(ISTOF + 1065) = RT_103
      STOF(ISTOF + 1066) = Poi_DiffW
      STOF(ISTOF + 1067) = Poi_DiffVAr
      STOF(ISTOF + 1068) = Poi_Vol
      STOF(ISTOF + 1069) = RT_104
      STOF(ISTOF + 1070) = RT_105
      STOF(ISTOF + 1074) = ExtPwrApLim
      STOF(ISTOF + 1075) = ExtPwrRtLimLo
      STOF(ISTOF + 1076) = ExtPwrRtLimHi
      STOF(ISTOF + 1077) = HybridSysStateTrans

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 188 + IT_0) = Vrms_abc_POI(IT_0)
         STOF(ISTOF + 377 + IT_0) = RT_54(IT_0)
         STOF(ISTOF + 968 + IT_0) = Vrms_abc_FRT(IT_0)
         STOF(ISTOF + 1070 + IT_0) = RT_106(IT_0)
      END DO

! Array (1:4) quantities...
      DO IT_0 = 1,4
         STOF(ISTOF + 23 + IT_0) = Pv_Ms(IT_0)
         STOF(ISTOF + 87 + IT_0) = Bess_Ms(IT_0)
      END DO

! Array (1:10) quantities...
      DO IT_0 = 1,10
         STOF(ISTOF + 67 + IT_0) = SCS_Fb(IT_0)
         STOF(ISTOF + 77 + IT_0) = SC_Fb(IT_0)
         STOF(ISTOF + 91 + IT_0) = SCDC_Fb(IT_0)
         STOF(ISTOF + 141 + IT_0) = GEN_Fb(IT_0)
         STOF(ISTOF + 230 + IT_0) = RT_10(IT_0)
         STOF(ISTOF + 246 + IT_0) = RT_11(IT_0)
         STOF(ISTOF + 263 + IT_0) = RT_16(IT_0)
         STOF(ISTOF + 292 + IT_0) = RT_31(IT_0)
         STOF(ISTOF + 336 + IT_0) = RT_42(IT_0)
         STOF(ISTOF + 346 + IT_0) = RT_43(IT_0)
         STOF(ISTOF + 381 + IT_0) = RT_55(IT_0)
         STOF(ISTOF + 665 + IT_0) = RT_74(IT_0)
         STOF(ISTOF + 771 + IT_0) = RT_96(IT_0)
      END DO

! Array (1:11) quantities...
      DO IT_0 = 1,11
         STOF(ISTOF + 0 + IT_0) = Poi_Spt(IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         STOF(ISTOF + 11 + IT_0) = Poi_Ms(IT_0)
      END DO

! Array (1:20) quantities...
      DO IT_0 = 1,20
         STOF(ISTOF + 27 + IT_0) = SCS_Spt(IT_0)
         STOF(ISTOF + 47 + IT_0) = SC_Spt(IT_0)
         STOF(ISTOF + 162 + IT_0) = RT_1(IT_0)
         STOF(ISTOF + 313 + IT_0) = xdata(IT_0)
         STOF(ISTOF + 685 + IT_0) = RT_75(IT_0)
      END DO

! Array (1:30) quantities...
      DO IT_0 = 1,30
         STOF(ISTOF + 192 + IT_0) = RT_3(IT_0)
         STOF(ISTOF + 714 + IT_0) = RT_77(IT_0)
      END DO

! Array (1:40) quantities...
      DO IT_0 = 1,40
         STOF(ISTOF + 101 + IT_0) = DEBUG(IT_0)
         STOF(ISTOF + 418 + IT_0) = RT_67(IT_0)
      END DO

! Array (1:50) quantities...
      DO IT_0 = 1,50
         STOF(ISTOF + 463 + IT_0) = RT_69(IT_0)
         STOF(ISTOF + 1077 + IT_0) = xout(IT_0)
      END DO

! Array (1:60) quantities...
      DO IT_0 = 1,60
         STOF(ISTOF + 518 + IT_0) = RT_71(IT_0)
      END DO

! Array (1:70) quantities...
      DO IT_0 = 1,70
         STOF(ISTOF + 585 + IT_0) = RT_73(IT_0)
      END DO

! Array (1:80) quantities...
      DO IT_0 = 1,80
         STOF(ISTOF + 888 + IT_0) = RT_98(IT_0)
      END DO

! Array (1:90) quantities...
      DO IT_0 = 1,90
         STOF(ISTOF + 972 + IT_0) = RT_100(IT_0)
      END DO

! Array (1:100) quantities...
      DO IT_0 = 1,100
         STOF(ISTOF + 781 + IT_0) = xin(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !SCS_Spt  is output
      !SC_Spt   is output
      !DEBUG    is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE HyCtlOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    PQ_SelectOut  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_2, RT_4, RT_6, RT_7, RT_8, RT_9
      REAL     RT_12, CtrlMode, RT_13, RT_14
      REAL     RT_17, RT_27, RT_28, RT_29, RT_30
      REAL     RT_35, RT_44, RT_47, RT_50, RT_57
      REAL     RT_61, RT_62, RT_66, RT_68, RT_70
      REAL     RT_72, RT_76, RT_78, RT_83, RT_85
      REAL     RT_87, RT_89, RT_90, RT_92, RT_93
      REAL     RT_94, RT_95, RT_97, RT_99, RT_101
      REAL     RT_102, RT_103, RT_104, RT_105

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 154
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_2     = STOF(ISTOF + 192)
      RT_4     = STOF(ISTOF + 223)
      RT_6     = STOF(ISTOF + 227)
      RT_7     = STOF(ISTOF + 228)
      RT_8     = STOF(ISTOF + 229)
      RT_9     = STOF(ISTOF + 230)
      RT_12    = STOF(ISTOF + 257)
      CtrlMode = STOF(ISTOF + 258)
      RT_13    = STOF(ISTOF + 259)
      RT_14    = STOF(ISTOF + 262)
      RT_17    = STOF(ISTOF + 274)
      RT_27    = STOF(ISTOF + 286)
      RT_28    = STOF(ISTOF + 287)
      RT_29    = STOF(ISTOF + 288)
      RT_30    = STOF(ISTOF + 292)
      RT_35    = STOF(ISTOF + 306)
      RT_44    = STOF(ISTOF + 358)
      RT_47    = STOF(ISTOF + 364)
      RT_50    = STOF(ISTOF + 368)
      RT_57    = STOF(ISTOF + 396)
      RT_61    = STOF(ISTOF + 403)
      RT_62    = STOF(ISTOF + 404)
      RT_66    = STOF(ISTOF + 418)
      RT_68    = STOF(ISTOF + 463)
      RT_70    = STOF(ISTOF + 518)
      RT_72    = STOF(ISTOF + 585)
      RT_76    = STOF(ISTOF + 714)
      RT_78    = STOF(ISTOF + 745)
      RT_83    = STOF(ISTOF + 754)
      RT_85    = STOF(ISTOF + 756)
      RT_87    = STOF(ISTOF + 758)
      RT_89    = STOF(ISTOF + 761)
      RT_90    = STOF(ISTOF + 762)
      RT_92    = STOF(ISTOF + 765)
      RT_93    = STOF(ISTOF + 766)
      RT_94    = STOF(ISTOF + 769)
      RT_95    = STOF(ISTOF + 770)
      RT_97    = STOF(ISTOF + 888)
      RT_99    = STOF(ISTOF + 972)
      RT_101   = STOF(ISTOF + 1063)
      RT_102   = STOF(ISTOF + 1064)
      RT_103   = STOF(ISTOF + 1065)
      RT_104   = STOF(ISTOF + 1069)
      RT_105   = STOF(ISTOF + 1070)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'HyCtl.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'CtrlMode'

      CtrlMode = 4.0

! 80:[const] Real Constant 'FirstStep'

      RT_4 = 0.0

! 170:[const] Real Constant 'PickupDelay'

      RT_50 = 0.1

! 190:[const] Real Constant 'Zero'

      RT_6 = 0.0

! 210:[const] Real Constant 'Zero'

      RT_7 = 0.0

! 240:[const] Real Constant 'Zero'

      RT_8 = 0.0

! 260:[const] Real Constant 'Zero'

      RT_9 = 0.0

! 300:[const] Real Constant 'Zero'

      RT_47 = 0.0

! 310:[const] Real Constant 'Zero'

      RT_76 = 0.0

! 320:[const] Real Constant 'Zero'

      RT_78 = 0.0

! 450:[const] Real Constant 'Zero'

      RT_12 = 0.0

! 460:[const] Real Constant 'Grid Forming'

      RT_103 = 21521.0

! 470:[const] Real Constant 'Zero'

      RT_90 = 0.0

! 480:[const] Real Constant 'Grid Forming'

      RT_17 = 21521.0

! 500:[const] Real Constant 'Const'

      RT_92 = 1.0

! 510:[const] Real Constant 'Stop'

      RT_102 = 381.0

! 580:[const] Real Constant 'Zero'

      RT_89 = 0.0

! 590:[const] Real Constant 'Zero'

      RT_35 = 0.0

! 620:[const] Real Constant 'Const'

      RT_93 = 1.0

! 660:[const] Real Constant 'Zero'

      RT_87 = 0.0

! 700:[const] Real Constant 'Zero'

      RT_2 = 0.0

! 710:[const] Real Constant 'Const'

      RT_94 = 1.0

! 720:[const] Real Constant 'Zero'

      RT_13 = 0.0

! 730:[const] Real Constant 'Zero'

      RT_104 = 0.0

! 760:[const] Real Constant 'PFSpt_SCS'

      RT_14 = 1.0

! 790:[const] Real Constant 

      RT_44 = 100.0

! 800:[const] Real Constant 'Zero'

      RT_85 = 0.0

! 840:[const] Real Constant 'Const'

      RT_95 = 1.0

! 860:[const] Real Constant 'Zero'

      RT_66 = 0.0

! 870:[const] Real Constant 'Zero'

      RT_57 = 0.0

! 920:[const] Real Constant 'Zero'

      RT_30 = 0.0

! 930:[const] Real Constant 'Zero'

      RT_105 = 0.0

! 960:[const] Real Constant 'PFSpt_SC'

      RT_29 = 1.0

! 980:[const] Real Constant 'VolSpt_SC'

      RT_28 = 1.0

! 990:[const] Real Constant 'Zero'

      RT_61 = 0.0

! 1000:[const] Real Constant 'SCSOpCmd'

      RT_27 = 21416.0

! 1010:[const] Real Constant 'Zero'

      RT_68 = 0.0

! 1040:[const] Real Constant 'Zero'

      RT_83 = 0.0

! 1060:[const] Real Constant 'Zero'

      RT_62 = 0.0

! 1090:[const] Real Constant 'Zero'

      RT_70 = 0.0

! 1160:[const] Real Constant 'Zero'

      RT_72 = 0.0

! 1240:[const] Real Constant 'Zero'

      RT_97 = 0.0

! 1300:[const] Real Constant 'Zero'

      RT_99 = 0.0

! 1400:[const] Real Constant 'Zero'

      RT_101 = 0.0

! 1530:[PQ_Select]  
      CALL PQ_SelectOut()


! 1660:[PQ_Select]  
      CALL PQ_SelectOut()


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 192) = RT_2
      STOF(ISTOF + 223) = RT_4
      STOF(ISTOF + 227) = RT_6
      STOF(ISTOF + 228) = RT_7
      STOF(ISTOF + 229) = RT_8
      STOF(ISTOF + 230) = RT_9
      STOF(ISTOF + 257) = RT_12
      STOF(ISTOF + 258) = CtrlMode
      STOF(ISTOF + 259) = RT_13
      STOF(ISTOF + 262) = RT_14
      STOF(ISTOF + 274) = RT_17
      STOF(ISTOF + 286) = RT_27
      STOF(ISTOF + 287) = RT_28
      STOF(ISTOF + 288) = RT_29
      STOF(ISTOF + 292) = RT_30
      STOF(ISTOF + 306) = RT_35
      STOF(ISTOF + 358) = RT_44
      STOF(ISTOF + 364) = RT_47
      STOF(ISTOF + 368) = RT_50
      STOF(ISTOF + 396) = RT_57
      STOF(ISTOF + 403) = RT_61
      STOF(ISTOF + 404) = RT_62
      STOF(ISTOF + 418) = RT_66
      STOF(ISTOF + 463) = RT_68
      STOF(ISTOF + 518) = RT_70
      STOF(ISTOF + 585) = RT_72
      STOF(ISTOF + 714) = RT_76
      STOF(ISTOF + 745) = RT_78
      STOF(ISTOF + 754) = RT_83
      STOF(ISTOF + 756) = RT_85
      STOF(ISTOF + 758) = RT_87
      STOF(ISTOF + 761) = RT_89
      STOF(ISTOF + 762) = RT_90
      STOF(ISTOF + 765) = RT_92
      STOF(ISTOF + 766) = RT_93
      STOF(ISTOF + 769) = RT_94
      STOF(ISTOF + 770) = RT_95
      STOF(ISTOF + 888) = RT_97
      STOF(ISTOF + 972) = RT_99
      STOF(ISTOF + 1063) = RT_101
      STOF(ISTOF + 1064) = RT_102
      STOF(ISTOF + 1065) = RT_103
      STOF(ISTOF + 1069) = RT_104
      STOF(ISTOF + 1070) = RT_105


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE HyCtlDyn_Begin(FileNum, Log2File, Fsys, GridOpCmdSCS,  &
     &   Tcyc, Tactivate, BatPwrAtInit, BatPwrRtInit, PvPwrAtInit,      &
     &   PvPwrRtInit)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    PQ_SelectDyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: FileNum, Log2File
      INTEGER, INTENT(IN)  :: GridOpCmdSCS
      REAL,    INTENT(IN)  :: Fsys, Tcyc
      REAL,    INTENT(IN)  :: Tactivate
      REAL,    INTENT(IN)  :: BatPwrAtInit
      REAL,    INTENT(IN)  :: BatPwrRtInit
      REAL,    INTENT(IN)  :: PvPwrAtInit
      REAL,    INTENT(IN)  :: PvPwrRtInit

! Electrical Node Indices

! Control Signals
      REAL     RT_2, RT_4, RT_6, RT_7, RT_8, RT_9
      REAL     RT_12, CtrlMode, RT_13, RT_14
      REAL     RT_17, RT_27, RT_28, RT_29, RT_30
      REAL     RT_35, RT_44, RT_47, RT_50, RT_57
      REAL     RT_61, RT_62, RT_66, RT_68, RT_70
      REAL     RT_72, RT_76, RT_78, RT_83, RT_85
      REAL     RT_87, RT_89, RT_90, RT_92, RT_93
      REAL     RT_94, RT_95, RT_97, RT_99, RT_101
      REAL     RT_102, RT_103, RT_104, RT_105

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'CtrlMode'
      CtrlMode = 4.0

! 30:[unity] Type/Shape conversion block 

! 50:[unity] Type/Shape conversion block 

! 70:[unity] Type/Shape conversion block 

! 80:[const] Real Constant 'FirstStep'
      RT_4 = 0.0

! 110:[unity] Type/Shape conversion block 

! 120:[unity] Type/Shape conversion block 

! 130:[time-sig] Output of Simulation Time 

! 140:[time-sig] Output of Simulation Time 

! 160:[unity] Type/Shape conversion block 

! 170:[const] Real Constant 'PickupDelay'
      RT_50 = 0.1

! 190:[const] Real Constant 'Zero'
      RT_6 = 0.0

! 200:[unity] Type/Shape conversion block 

! 210:[const] Real Constant 'Zero'
      RT_7 = 0.0

! 230:[unity] Type/Shape conversion block 

! 240:[const] Real Constant 'Zero'
      RT_8 = 0.0

! 260:[const] Real Constant 'Zero'
      RT_9 = 0.0

! 270:[unity] Type/Shape conversion block 

! 290:[unity] Type/Shape conversion block 

! 300:[const] Real Constant 'Zero'
      RT_47 = 0.0

! 310:[const] Real Constant 'Zero'
      RT_76 = 0.0

! 320:[const] Real Constant 'Zero'
      RT_78 = 0.0

! 340:[datatap] Scalar/Array Tap 

! 350:[datatap] Scalar/Array Tap 

! 360:[datatap] Scalar/Array Tap 

! 370:[datatap] Scalar/Array Tap 

! 380:[datatap] Scalar/Array Tap 

! 390:[datatap] Scalar/Array Tap 

! 400:[datatap] Scalar/Array Tap 

! 410:[datatap] Scalar/Array Tap 

! 420:[datatap] Scalar/Array Tap 

! 430:[datatap] Scalar/Array Tap 

! 440:[datatap] Scalar/Array Tap 

! 450:[const] Real Constant 'Zero'
      RT_12 = 0.0

! 460:[const] Real Constant 'Grid Forming'
      RT_103 = 21521.0

! 470:[const] Real Constant 'Zero'
      RT_90 = 0.0

! 480:[const] Real Constant 'Grid Forming'
      RT_17 = 21521.0

! 500:[const] Real Constant 'Const'
      RT_92 = 1.0

! 510:[const] Real Constant 'Stop'
      RT_102 = 381.0

! 520:[datatap] Scalar/Array Tap 

! 530:[gain] Gain Block 

! 540:[datatap] Scalar/Array Tap 

! 550:[gain] Gain Block 

! 560:[datatap] Scalar/Array Tap 

! 570:[gain] Gain Block 

! 580:[const] Real Constant 'Zero'
      RT_89 = 0.0

! 590:[const] Real Constant 'Zero'
      RT_35 = 0.0

! 600:[datatap] Scalar/Array Tap 

! 610:[datatap] Scalar/Array Tap 

! 620:[const] Real Constant 'Const'
      RT_93 = 1.0

! 630:[datatap] Scalar/Array Tap 

! 640:[datatap] Scalar/Array Tap 

! 650:[gain] Gain Block 

! 660:[const] Real Constant 'Zero'
      RT_87 = 0.0

! 670:[datatap] Scalar/Array Tap 

! 680:[gain] Gain Block 

! 700:[const] Real Constant 'Zero'
      RT_2 = 0.0

! 710:[const] Real Constant 'Const'
      RT_94 = 1.0

! 720:[const] Real Constant 'Zero'
      RT_13 = 0.0

! 730:[const] Real Constant 'Zero'
      RT_104 = 0.0

! 740:[datatap] Scalar/Array Tap 

! 750:[gain] Gain Block 

! 760:[const] Real Constant 'PFSpt_SCS'
      RT_14 = 1.0

! 770:[datatap] Scalar/Array Tap 

! 780:[gain] Gain Block 

! 790:[const] Real Constant 
      RT_44 = 100.0

! 800:[const] Real Constant 'Zero'
      RT_85 = 0.0

! 810:[datatap] Scalar/Array Tap 

! 820:[gain] Gain Block 

! 830:[datatap] Scalar/Array Tap 

! 840:[const] Real Constant 'Const'
      RT_95 = 1.0

! 860:[const] Real Constant 'Zero'
      RT_66 = 0.0

! 870:[const] Real Constant 'Zero'
      RT_57 = 0.0

! 880:[datatap] Scalar/Array Tap 

! 890:[gain] Gain Block 

! 900:[datatap] Scalar/Array Tap 

! 910:[gain] Gain Block 

! 920:[const] Real Constant 'Zero'
      RT_30 = 0.0

! 930:[const] Real Constant 'Zero'
      RT_105 = 0.0

! 940:[datatap] Scalar/Array Tap 

! 950:[gain] Gain Block 

! 960:[const] Real Constant 'PFSpt_SC'
      RT_29 = 1.0

! 970:[datatap] Scalar/Array Tap 

! 980:[const] Real Constant 'VolSpt_SC'
      RT_28 = 1.0

! 990:[const] Real Constant 'Zero'
      RT_61 = 0.0

! 1000:[const] Real Constant 'SCSOpCmd'
      RT_27 = 21416.0

! 1010:[const] Real Constant 'Zero'
      RT_68 = 0.0

! 1030:[sampler] Interpolating Sampler 

! 1040:[const] Real Constant 'Zero'
      RT_83 = 0.0

! 1050:[datatap] Scalar/Array Tap 

! 1060:[const] Real Constant 'Zero'
      RT_62 = 0.0

! 1070:[datatap] Scalar/Array Tap 

! 1080:[datatap] Scalar/Array Tap 

! 1090:[const] Real Constant 'Zero'
      RT_70 = 0.0

! 1100:[datatap] Scalar/Array Tap 

! 1110:[datatap] Scalar/Array Tap 

! 1120:[datatap] Scalar/Array Tap 

! 1140:[sampler] Interpolating Sampler 

! 1150:[datatap] Scalar/Array Tap 

! 1160:[const] Real Constant 'Zero'
      RT_72 = 0.0

! 1170:[datatap] Scalar/Array Tap 

! 1180:[datatap] Scalar/Array Tap 

! 1190:[datatap] Scalar/Array Tap 

! 1200:[datatap] Scalar/Array Tap 

! 1210:[datatap] Scalar/Array Tap 

! 1230:[sampler] Interpolating Sampler 

! 1240:[const] Real Constant 'Zero'
      RT_97 = 0.0

! 1250:[datatap] Scalar/Array Tap 

! 1260:[datatap] Scalar/Array Tap 

! 1270:[datatap] Scalar/Array Tap 

! 1280:[datatap] Scalar/Array Tap 

! 1290:[datatap] Scalar/Array Tap 

! 1300:[const] Real Constant 'Zero'
      RT_99 = 0.0

! 1310:[datatap] Scalar/Array Tap 

! 1320:[datatap] Scalar/Array Tap 

! 1330:[datatap] Scalar/Array Tap 

! 1340:[sumjct] Summing/Differencing Junctions 

! 1360:[sampler] Interpolating Sampler 

! 1370:[sumjct] Summing/Differencing Junctions 

! 1380:[datatap] Scalar/Array Tap 

! 1390:[datatap] Scalar/Array Tap 

! 1400:[const] Real Constant 'Zero'
      RT_101 = 0.0

! 1410:[datatap] Scalar/Array Tap 

! 1420:[datatap] Scalar/Array Tap 

! 1430:[datatap] Scalar/Array Tap 

! 1440:[datatap] Scalar/Array Tap 

! 1450:[sumjct] Summing/Differencing Junctions 

! 1460:[datamerge] Merges data signals into an array 

! 1470:[datamerge] Merges data signals into an array 

! 1480:[hardlimit] Hard Limiter 

! 1490:[compar] Two Input Comparator 

! 1500:[datamerge] Merges data signals into an array 

! 1510:[hardlimit] Hard Limiter 

! 1520:[compar] Two Input Comparator 

! 1530:[PQ_Select]  
      CALL PQ_SelectDyn_Begin()


! 1540:[datamerge] Merges data signals into an array 

! 1550:[hardlimit] Hard Limiter 

! 1560:[compar] Two Input Comparator 

! 1570:[hardlimit] Hard Limiter 

! 1580:[compar] Two Input Comparator 

! 1590:[hardlimit] Hard Limiter 

! 1600:[hardlimit] Hard Limiter 

! 1610:[hardlimit] Hard Limiter 

! 1620:[sumjct] Summing/Differencing Junctions 

! 1630:[sumjct] Summing/Differencing Junctions 

! 1640:[datamerge] Merges data signals into an array 

! 1650:[compar] Two Input Comparator 

! 1660:[PQ_Select]  
      CALL PQ_SelectDyn_Begin()


! 1670:[datamerge] Merges data signals into an array 

! 1680:[datamerge] Merges data signals into an array 

! 1690:[datamerge] Merges data signals into an array 

! 1700:[datamerge] Merges data signals into an array 

! 1710:[datamerge] Merges data signals into an array 

! 1720:[datamerge] Merges data signals into an array 

! 1730:[datamerge] Merges data signals into an array 

! 1740:[HyCtl_Lib]  'HyCon'

! 1750:[datatap] Scalar/Array Tap 

! 1760:[datatap] Scalar/Array Tap 

! 1770:[datatap] Scalar/Array Tap 

! 1780:[datatap] Scalar/Array Tap 

! 1790:[datatap] Scalar/Array Tap 

! 1800:[datatap] Scalar/Array Tap 

! 1810:[datatap] Scalar/Array Tap 

! 1820:[datatap] Scalar/Array Tap 

! 1830:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1840:[div] Divider 

! 1850:[hardlimit] Hard Limiter 

! 1860:[unity] Type/Shape conversion block 

! 1870:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1880:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1890:[div] Divider 

! 1900:[hardlimit] Hard Limiter 

! 1910:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1920:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1930:[div] Divider 

! 1940:[hardlimit] Hard Limiter 

! 1950:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1960:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1970:[div] Divider 

! 1980:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1990:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 2000:[div] Divider 

! 2010:[datatap] Scalar/Array Tap 

! 2020:[datatap] Scalar/Array Tap 

! 2030:[datatap] Scalar/Array Tap 

! 2040:[datatap] Scalar/Array Tap 

! 2050:[datatap] Scalar/Array Tap 

! 2060:[datatap] Scalar/Array Tap 

! 2070:[datatap] Scalar/Array Tap 

! 2080:[datatap] Scalar/Array Tap 

! 2090:[datatap] Scalar/Array Tap 

! 2100:[datatap] Scalar/Array Tap 

! 2110:[datatap] Scalar/Array Tap 

! 2120:[datatap] Scalar/Array Tap 

! 2130:[datatap] Scalar/Array Tap 

! 2140:[datatap] Scalar/Array Tap 

! 2150:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 2160:[div] Divider 

! 2170:[hardlimit] Hard Limiter 

! 2180:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 2190:[select] Two Input Selector 
      RTCI(NRTCI) = 2
      NRTCI = NRTCI + 1

! 2200:[datamerge] Merges data signals into an array 

! 2210:[select] Two Input Selector 
      RTCI(NRTCI) = 3
      NRTCI = NRTCI + 1

! 2220:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 2230:[datatap] Scalar/Array Tap 

! 2240:[datatap] Scalar/Array Tap 

! 2250:[datatap] Scalar/Array Tap 

! 2260:[datatap] Scalar/Array Tap 

! 2270:[datatap] Scalar/Array Tap 

! 2280:[datatap] Scalar/Array Tap 

! 2290:[datatap] Scalar/Array Tap 

! 2300:[datatap] Scalar/Array Tap 

! 2310:[datatap] Scalar/Array Tap 

! 2320:[datatap] Scalar/Array Tap 

! 2330:[datatap] Scalar/Array Tap 

! 2340:[datamerge] Merges data signals into an array 

! 2350:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 2360:[div] Divider 

! 2370:[datamerge] Merges data signals into an array 

! 2380:[div] Divider 

! 2390:[datamerge] Merges data signals into an array 

! 2400:[datatap] Scalar/Array Tap 

! 2410:[datatap] Scalar/Array Tap 

! 2420:[datatap] Scalar/Array Tap 

! 2430:[datatap] Scalar/Array Tap 

! 2440:[datatap] Scalar/Array Tap 

! 2450:[datatap] Scalar/Array Tap 

! 2460:[datamerge] Merges data signals into an array 

! 2470:[datamerge] Merges data signals into an array 

! 2480:[datamerge] Merges data signals into an array 

! 2490:[datamerge] Merges data signals into an array 

! 2500:[pgb] Output Channel 'xin'

! 2510:[pgb] Output Channel 'VArSpt_pu_SC'

! 2520:[pgb] Output Channel 'WSpt_pu_SC'

! 2540:[pgb] Output Channel 'VArSpt_pu_SCS'

! 2550:[pgb] Output Channel 'WSpt_pu_SCS'

! 2570:[pgb] Output Channel 'xout'

! 2580:[datatap] Scalar/Array Tap 

! 2590:[unity] Type/Shape conversion block 

! 2600:[unity] Type/Shape conversion block 

! 2610:[unity] Type/Shape conversion block 

! 2620:[unity] Type/Shape conversion block 

! 2630:[unity] Type/Shape conversion block 

      RETURN
      END

!=======================================================================

      SUBROUTINE HyCtlOut_Begin(FileNum, Log2File, Fsys, GridOpCmdSCS,  &
     &   Tcyc, Tactivate, BatPwrAtInit, BatPwrRtInit, PvPwrAtInit,      &
     &   PvPwrRtInit)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    PQ_SelectOut_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: FileNum, Log2File
      INTEGER, INTENT(IN)  :: GridOpCmdSCS
      REAL,    INTENT(IN)  :: Fsys, Tcyc
      REAL,    INTENT(IN)  :: Tactivate
      REAL,    INTENT(IN)  :: BatPwrAtInit
      REAL,    INTENT(IN)  :: BatPwrRtInit
      REAL,    INTENT(IN)  :: PvPwrAtInit
      REAL,    INTENT(IN)  :: PvPwrRtInit

! Electrical Node Indices

! Control Signals
      REAL     RT_2, RT_4, RT_6, RT_7, RT_8, RT_9
      REAL     RT_12, CtrlMode, RT_13, RT_14
      REAL     RT_17, RT_27, RT_28, RT_29, RT_30
      REAL     RT_35, RT_44, RT_47, RT_50, RT_57
      REAL     RT_61, RT_62, RT_66, RT_68, RT_70
      REAL     RT_72, RT_76, RT_78, RT_83, RT_85
      REAL     RT_87, RT_89, RT_90, RT_92, RT_93
      REAL     RT_94, RT_95, RT_97, RT_99, RT_101
      REAL     RT_102, RT_103, RT_104, RT_105

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'CtrlMode'
      CtrlMode = 4.0

! 80:[const] Real Constant 'FirstStep'
      RT_4 = 0.0

! 170:[const] Real Constant 'PickupDelay'
      RT_50 = 0.1

! 190:[const] Real Constant 'Zero'
      RT_6 = 0.0

! 210:[const] Real Constant 'Zero'
      RT_7 = 0.0

! 240:[const] Real Constant 'Zero'
      RT_8 = 0.0

! 260:[const] Real Constant 'Zero'
      RT_9 = 0.0

! 300:[const] Real Constant 'Zero'
      RT_47 = 0.0

! 310:[const] Real Constant 'Zero'
      RT_76 = 0.0

! 320:[const] Real Constant 'Zero'
      RT_78 = 0.0

! 450:[const] Real Constant 'Zero'
      RT_12 = 0.0

! 460:[const] Real Constant 'Grid Forming'
      RT_103 = 21521.0

! 470:[const] Real Constant 'Zero'
      RT_90 = 0.0

! 480:[const] Real Constant 'Grid Forming'
      RT_17 = 21521.0

! 500:[const] Real Constant 'Const'
      RT_92 = 1.0

! 510:[const] Real Constant 'Stop'
      RT_102 = 381.0

! 580:[const] Real Constant 'Zero'
      RT_89 = 0.0

! 590:[const] Real Constant 'Zero'
      RT_35 = 0.0

! 620:[const] Real Constant 'Const'
      RT_93 = 1.0

! 660:[const] Real Constant 'Zero'
      RT_87 = 0.0

! 700:[const] Real Constant 'Zero'
      RT_2 = 0.0

! 710:[const] Real Constant 'Const'
      RT_94 = 1.0

! 720:[const] Real Constant 'Zero'
      RT_13 = 0.0

! 730:[const] Real Constant 'Zero'
      RT_104 = 0.0

! 760:[const] Real Constant 'PFSpt_SCS'
      RT_14 = 1.0

! 790:[const] Real Constant 
      RT_44 = 100.0

! 800:[const] Real Constant 'Zero'
      RT_85 = 0.0

! 840:[const] Real Constant 'Const'
      RT_95 = 1.0

! 860:[const] Real Constant 'Zero'
      RT_66 = 0.0

! 870:[const] Real Constant 'Zero'
      RT_57 = 0.0

! 920:[const] Real Constant 'Zero'
      RT_30 = 0.0

! 930:[const] Real Constant 'Zero'
      RT_105 = 0.0

! 960:[const] Real Constant 'PFSpt_SC'
      RT_29 = 1.0

! 980:[const] Real Constant 'VolSpt_SC'
      RT_28 = 1.0

! 990:[const] Real Constant 'Zero'
      RT_61 = 0.0

! 1000:[const] Real Constant 'SCSOpCmd'
      RT_27 = 21416.0

! 1010:[const] Real Constant 'Zero'
      RT_68 = 0.0

! 1040:[const] Real Constant 'Zero'
      RT_83 = 0.0

! 1060:[const] Real Constant 'Zero'
      RT_62 = 0.0

! 1090:[const] Real Constant 'Zero'
      RT_70 = 0.0

! 1160:[const] Real Constant 'Zero'
      RT_72 = 0.0

! 1240:[const] Real Constant 'Zero'
      RT_97 = 0.0

! 1300:[const] Real Constant 'Zero'
      RT_99 = 0.0

! 1400:[const] Real Constant 'Zero'
      RT_101 = 0.0

! 1530:[PQ_Select]  
      CALL PQ_SelectOut_Begin()


! 1660:[PQ_Select]  
      CALL PQ_SelectOut_Begin()


      RETURN
      END

