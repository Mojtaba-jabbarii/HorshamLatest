!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : SymmetricalComponentsCalc_1_1
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE SymmetricalComponentsCalc_1_1Dyn(neg, pos, zero, v_c,  &
     &   v_b, v_a, i_c, i_b, i_a, Frequency)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    FTN180        ! FFT Calculation

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: v_c, v_b, v_a, i_c
      REAL,    INTENT(IN)  :: i_b, i_a, Frequency
      REAL,    INTENT(OUT) :: neg, pos, zero

! Electrical Node Indices

! Control Signals
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     RT_7, RT_8, phase_v_a, RT_9, RT_10
      REAL     RT_11, RT_12, RT_13, RT_14, RT_15
      REAL     RT_16, RT_17, RT_18, RT_19, RT_20
      REAL     RT_21, RT_22, RT_23, RT_24, RT_25
      REAL     RT_26, RT_27, A_real_pos
      REAL     B_real_pos, C_real_pos, RT_28
      REAL     RT_29, RT_30, RT_31, RT_32, RT_33
      REAL     RT_34, A_imag_pos, B_imag_pos
      REAL     C_imag_pos, RT_35, RT_36, RT_37
      REAL     RT_38, RT_39, RT_40, RT_41, RT_42
      REAL     RT_43, A_real_zer, A_imag_zer
      REAL     RT_44, RT_45, C_real_zer
      REAL     C_imag_zer, B_imag_zer, RT_46
      REAL     B_real_zer, RT_47, RT_48, RT_49(7)
      REAL     RT_50(7), RT_51, RT_52(7)
      REAL     RT_53(7), RT_54, RT_55(7)
      REAL     RT_56(7), RT_57, RT_58(7)
      REAL     RT_59(7), RT_60, RT_61(7)
      REAL     RT_62(7), mag_v_a, RT_63, RT_64(7)
      REAL     RT_65(7), mag_v_b, mag_v_c, RT_66
      REAL     RT_67, iq_a, mag_i_a, phase_i_a
      REAL     RT_68, RT_69, iq_b, mag_i_b
      REAL     phase_i_b, phase_v_b, RT_70, RT_71
      REAL     iq_c, mag_i_c, phase_i_c
      REAL     phase_v_c, A_real_neg, A_imag_neg
      REAL     C_real_neg, C_imag_neg, B_imag_neg
      REAL     B_real_neg

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOF, IT_0                         ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOF     = NSTOF
      NSTOF     = NSTOF + 186
      IPGB      = NPGB
      NPGB      = NPGB + 15
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      neg      = STOF(ISTOF + 1)
      pos      = STOF(ISTOF + 2)
      zero     = STOF(ISTOF + 3)
      RT_1     = STOF(ISTOF + 11)
      RT_2     = STOF(ISTOF + 12)
      RT_3     = STOF(ISTOF + 13)
      RT_4     = STOF(ISTOF + 14)
      RT_5     = STOF(ISTOF + 15)
      RT_6     = STOF(ISTOF + 16)
      RT_7     = STOF(ISTOF + 17)
      RT_8     = STOF(ISTOF + 18)
      phase_v_a = STOF(ISTOF + 19)
      RT_9     = STOF(ISTOF + 20)
      RT_10    = STOF(ISTOF + 21)
      RT_11    = STOF(ISTOF + 22)
      RT_12    = STOF(ISTOF + 23)
      RT_13    = STOF(ISTOF + 24)
      RT_14    = STOF(ISTOF + 25)
      RT_15    = STOF(ISTOF + 26)
      RT_16    = STOF(ISTOF + 27)
      RT_17    = STOF(ISTOF + 28)
      RT_18    = STOF(ISTOF + 29)
      RT_19    = STOF(ISTOF + 30)
      RT_20    = STOF(ISTOF + 31)
      RT_21    = STOF(ISTOF + 32)
      RT_22    = STOF(ISTOF + 33)
      RT_23    = STOF(ISTOF + 34)
      RT_24    = STOF(ISTOF + 35)
      RT_25    = STOF(ISTOF + 36)
      RT_26    = STOF(ISTOF + 37)
      RT_27    = STOF(ISTOF + 38)
      A_real_pos = STOF(ISTOF + 39)
      B_real_pos = STOF(ISTOF + 40)
      C_real_pos = STOF(ISTOF + 41)
      RT_28    = STOF(ISTOF + 42)
      RT_29    = STOF(ISTOF + 43)
      RT_30    = STOF(ISTOF + 44)
      RT_31    = STOF(ISTOF + 45)
      RT_32    = STOF(ISTOF + 46)
      RT_33    = STOF(ISTOF + 47)
      RT_34    = STOF(ISTOF + 48)
      A_imag_pos = STOF(ISTOF + 49)
      B_imag_pos = STOF(ISTOF + 50)
      C_imag_pos = STOF(ISTOF + 51)
      RT_35    = STOF(ISTOF + 52)
      RT_36    = STOF(ISTOF + 53)
      RT_37    = STOF(ISTOF + 54)
      RT_38    = STOF(ISTOF + 55)
      RT_39    = STOF(ISTOF + 56)
      RT_40    = STOF(ISTOF + 57)
      RT_41    = STOF(ISTOF + 58)
      RT_42    = STOF(ISTOF + 59)
      RT_43    = STOF(ISTOF + 60)
      A_real_zer = STOF(ISTOF + 61)
      A_imag_zer = STOF(ISTOF + 62)
      RT_44    = STOF(ISTOF + 63)
      RT_45    = STOF(ISTOF + 64)
      C_real_zer = STOF(ISTOF + 65)
      C_imag_zer = STOF(ISTOF + 66)
      B_imag_zer = STOF(ISTOF + 67)
      RT_46    = STOF(ISTOF + 68)
      B_real_zer = STOF(ISTOF + 69)
      RT_47    = STOF(ISTOF + 70)
      RT_48    = STOF(ISTOF + 71)
      RT_51    = STOF(ISTOF + 86)
      RT_54    = STOF(ISTOF + 101)
      RT_57    = STOF(ISTOF + 116)
      RT_60    = STOF(ISTOF + 131)
      mag_v_a  = STOF(ISTOF + 146)
      RT_63    = STOF(ISTOF + 147)
      mag_v_b  = STOF(ISTOF + 162)
      mag_v_c  = STOF(ISTOF + 163)
      RT_66    = STOF(ISTOF + 164)
      RT_67    = STOF(ISTOF + 165)
      iq_a     = STOF(ISTOF + 166)
      mag_i_a  = STOF(ISTOF + 167)
      phase_i_a = STOF(ISTOF + 168)
      RT_68    = STOF(ISTOF + 169)
      RT_69    = STOF(ISTOF + 170)
      iq_b     = STOF(ISTOF + 171)
      mag_i_b  = STOF(ISTOF + 172)
      phase_i_b = STOF(ISTOF + 173)
      phase_v_b = STOF(ISTOF + 174)
      RT_70    = STOF(ISTOF + 175)
      RT_71    = STOF(ISTOF + 176)
      iq_c     = STOF(ISTOF + 177)
      mag_i_c  = STOF(ISTOF + 178)
      phase_i_c = STOF(ISTOF + 179)
      phase_v_c = STOF(ISTOF + 180)
      A_real_neg = STOF(ISTOF + 181)
      A_imag_neg = STOF(ISTOF + 182)
      C_real_neg = STOF(ISTOF + 183)
      C_imag_neg = STOF(ISTOF + 184)
      B_imag_neg = STOF(ISTOF + 185)
      B_real_neg = STOF(ISTOF + 186)

! Array (1:7) quantities...
      DO IT_0 = 1,7
         RT_49(IT_0) = STOF(ISTOF + 71 + IT_0)
         RT_50(IT_0) = STOF(ISTOF + 78 + IT_0)
         RT_52(IT_0) = STOF(ISTOF + 86 + IT_0)
         RT_53(IT_0) = STOF(ISTOF + 93 + IT_0)
         RT_55(IT_0) = STOF(ISTOF + 101 + IT_0)
         RT_56(IT_0) = STOF(ISTOF + 108 + IT_0)
         RT_58(IT_0) = STOF(ISTOF + 116 + IT_0)
         RT_59(IT_0) = STOF(ISTOF + 123 + IT_0)
         RT_61(IT_0) = STOF(ISTOF + 131 + IT_0)
         RT_62(IT_0) = STOF(ISTOF + 138 + IT_0)
         RT_64(IT_0) = STOF(ISTOF + 147 + IT_0)
         RT_65(IT_0) = STOF(ISTOF + 154 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'SymmetricalComponentsCalc_1_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 
      RT_37 = 3.0

! 90:[const] Real Constant 
      RT_20 = 2.0943951

! 100:[const] Real Constant 
      RT_33 = 3.0

! 110:[const] Real Constant 
      RT_18 = 4.1887902

! 120:[const] Real Constant 
      RT_16 = 4.1887902

! 130:[const] Real Constant 
      RT_3 = 3.0

! 140:[const] Real Constant 
      RT_17 = 2.0943951

! 150:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,1098588360)
      CALL FTN180(0,0,7,1,Frequency,Frequency,v_a,IVD1_1,RT_64,RT_65,RT_&
     &63)
!

! 160:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,1554191260)
      CALL FTN180(0,0,7,1,Frequency,Frequency,v_b,IVD1_1,RT_61,RT_62,RT_&
     &60)
!

! 170:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,2094087978)
      CALL FTN180(0,0,7,1,Frequency,Frequency,v_c,IVD1_1,RT_58,RT_59,RT_&
     &57)
!

! 180:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,338121159)
      CALL FTN180(0,0,7,1,Frequency,Frequency,i_a,IVD1_1,RT_55,RT_56,RT_&
     &54)
!

! 190:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,1465750597)
      CALL FTN180(0,0,7,1,Frequency,Frequency,i_b,IVD1_1,RT_52,RT_53,RT_&
     &51)
!

! 200:[fft] On-Line Frequency Scanner 
      IVD1_1=0
      CALL COMPONENT_ID(ICALL_NO,1125832482)
      CALL FTN180(0,0,7,1,Frequency,Frequency,i_c,IVD1_1,RT_49,RT_50,RT_&
     &48)
!

! 210:[datatap] Scalar/Array Tap 
      phase_v_a = RT_65(1)

! 220:[datatap] Scalar/Array Tap 
      phase_v_b = RT_62(1)

! 230:[datatap] Scalar/Array Tap 
      phase_v_c = RT_59(1)

! 240:[datatap] Scalar/Array Tap 
      mag_i_a = RT_55(1)

! 250:[datatap] Scalar/Array Tap 
      phase_i_a = RT_56(1)

! 260:[sumjct] Summing/Differencing Junctions 
      RT_67 = + phase_i_a - phase_v_a

! 270:[trig] Trigonometric Functions 
!  Trig-Func
      RT_66 = SIN(RT_67)
!

! 280:[mult] Multiplier 
      iq_a = RT_66 * mag_i_a

! 290:[datatap] Scalar/Array Tap 
      mag_i_b = RT_52(1)

! 300:[datatap] Scalar/Array Tap 
      phase_i_b = RT_53(1)

! 310:[sumjct] Summing/Differencing Junctions 
      RT_69 = + phase_i_b - phase_v_b

! 320:[trig] Trigonometric Functions 
!  Trig-Func
      RT_68 = SIN(RT_69)
!

! 330:[mult] Multiplier 
      iq_b = RT_68 * mag_i_b

! 340:[datatap] Scalar/Array Tap 
      mag_i_c = RT_49(1)

! 350:[datatap] Scalar/Array Tap 
      phase_i_c = RT_50(1)

! 360:[sumjct] Summing/Differencing Junctions 
      RT_71 = + phase_i_c - phase_v_c

! 370:[trig] Trigonometric Functions 
!  Trig-Func
      RT_70 = SIN(RT_71)
!

! 380:[mult] Multiplier 
      iq_c = RT_70 * mag_i_c

! 390:[trig] Trigonometric Functions 
!  Trig-Func
      RT_43 = COS(phase_v_a)
!

! 400:[gain] Gain Block 
!  Gain
      A_real_zer = iq_a * RT_43

! 410:[trig] Trigonometric Functions 
!  Trig-Func
      RT_42 = SIN(phase_v_a)
!

! 420:[gain] Gain Block 
!  Gain
      A_imag_zer = iq_a * RT_42

! 430:[trig] Trigonometric Functions 
!  Trig-Func
      RT_47 = COS(phase_v_b)
!

! 440:[gain] Gain Block 
!  Gain
      B_real_zer = iq_b * RT_47

! 450:[trig] Trigonometric Functions 
!  Trig-Func
      RT_46 = SIN(phase_v_b)
!

! 460:[gain] Gain Block 
!  Gain
      B_imag_zer = iq_b * RT_46

! 470:[trig] Trigonometric Functions 
!  Trig-Func
      RT_45 = COS(phase_v_c)
!

! 480:[gain] Gain Block 
!  Gain
      C_real_zer = iq_c * RT_45

! 490:[trig] Trigonometric Functions 
!  Trig-Func
      RT_44 = SIN(phase_v_c)
!

! 500:[gain] Gain Block 
!  Gain
      C_imag_zer = iq_c * RT_44

! 510:[trig] Trigonometric Functions 
!  Trig-Func
      RT_26 = COS(phase_v_a)
!

! 520:[gain] Gain Block 
!  Gain
      A_real_pos = iq_a * RT_26

! 530:[trig] Trigonometric Functions 
!  Trig-Func
      RT_27 = SIN(phase_v_a)
!

! 540:[gain] Gain Block 
!  Gain
      A_imag_pos = iq_a * RT_27

! 550:[sumjct] Summing/Differencing Junctions 
      RT_21 = + phase_v_b + RT_20

! 560:[trig] Trigonometric Functions 
!  Trig-Func
      RT_23 = COS(RT_21)
!

! 570:[gain] Gain Block 
!  Gain
      B_real_pos = iq_b * RT_23

! 580:[trig] Trigonometric Functions 
!  Trig-Func
      RT_22 = SIN(RT_21)
!

! 590:[gain] Gain Block 
!  Gain
      B_imag_pos = iq_b * RT_22

! 600:[sumjct] Summing/Differencing Junctions 
      RT_19 = + phase_v_c + RT_18

! 610:[trig] Trigonometric Functions 
!  Trig-Func
      RT_24 = COS(RT_19)
!

! 620:[gain] Gain Block 
!  Gain
      C_real_pos = iq_c * RT_24

! 630:[trig] Trigonometric Functions 
!  Trig-Func
      RT_25 = SIN(RT_19)
!

! 640:[gain] Gain Block 
!  Gain
      C_imag_pos = iq_c * RT_25

! 650:[trig] Trigonometric Functions 
!  Trig-Func
      RT_9 = COS(phase_v_a)
!

! 660:[gain] Gain Block 
!  Gain
      A_real_neg = iq_a * RT_9

! 670:[trig] Trigonometric Functions 
!  Trig-Func
      RT_8 = SIN(phase_v_a)
!

! 680:[gain] Gain Block 
!  Gain
      A_imag_neg = iq_a * RT_8

! 690:[sumjct] Summing/Differencing Junctions 
      RT_14 = + phase_v_b + RT_16

! 700:[trig] Trigonometric Functions 
!  Trig-Func
      RT_13 = COS(RT_14)
!

! 710:[gain] Gain Block 
!  Gain
      B_real_neg = iq_b * RT_13

! 720:[trig] Trigonometric Functions 
!  Trig-Func
      RT_15 = SIN(RT_14)
!

! 730:[gain] Gain Block 
!  Gain
      B_imag_neg = iq_b * RT_15

! 740:[sumjct] Summing/Differencing Junctions 
      RT_11 = + phase_v_c + RT_17

! 750:[trig] Trigonometric Functions 
!  Trig-Func
      RT_12 = COS(RT_11)
!

! 760:[gain] Gain Block 
!  Gain
      C_real_neg = iq_c * RT_12

! 770:[trig] Trigonometric Functions 
!  Trig-Func
      RT_10 = SIN(RT_11)
!

! 780:[gain] Gain Block 
!  Gain
      C_imag_neg = iq_c * RT_10

! 790:[sumjct] Summing/Differencing Junctions 
      RT_41 = + A_real_zer + B_real_zer + C_real_zer

! 800:[square] Square 
      RT_40 = RT_41 * RT_41

! 810:[sumjct] Summing/Differencing Junctions 
      RT_35 = + A_imag_zer + B_imag_zer + C_imag_zer

! 820:[square] Square 
      RT_36 = RT_35 * RT_35

! 830:[sumjct] Summing/Differencing Junctions 
      RT_28 = + A_real_pos + B_real_pos + C_real_pos

! 840:[square] Square 
      RT_29 = RT_28 * RT_28

! 850:[sumjct] Summing/Differencing Junctions 
      RT_34 = + A_imag_pos + B_imag_pos + C_imag_pos

! 860:[square] Square 
      RT_30 = RT_34 * RT_34

! 870:[sumjct] Summing/Differencing Junctions 
      RT_7 = + A_real_neg + B_real_neg + C_real_neg

! 880:[square] Square 
      RT_6 = RT_7 * RT_7

! 890:[sumjct] Summing/Differencing Junctions 
      RT_1 = + A_imag_neg + B_imag_neg + C_imag_neg

! 900:[square] Square 
      RT_2 = RT_1 * RT_1

! 910:[sumjct] Summing/Differencing Junctions 
      RT_5 = + RT_6 + RT_2

! 920:[sumjct] Summing/Differencing Junctions 
      RT_31 = + RT_29 + RT_30

! 930:[sumjct] Summing/Differencing Junctions 
      RT_39 = + RT_40 + RT_36

! 940:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_5 .LT. 0.0) THEN
        RT_4 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,81336497,1,2,"A negative value is &
     &detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,81336497,1,-1,"Input is treated as&
     & 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_4 = SQRT(RT_5)
      ENDIF
      NSTORL = NSTORL + 1

! 950:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_31 .LT. 0.0) THEN
        RT_32 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,1309481577,1,2,"A negative value i&
     &s detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,1309481577,1,-1,"Input is treated &
     &as 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_32 = SQRT(RT_31)
      ENDIF
      NSTORL = NSTORL + 1

! 960:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_39 .LT. 0.0) THEN
        RT_38 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,114485024,1,2,"A negative value is&
     & detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,114485024,1,-1,"Input is treated a&
     &s 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_38 = SQRT(RT_39)
      ENDIF
      NSTORL = NSTORL + 1

! 970:[div] Divider 
      IF (ABS(RT_3) .LT. 1.0E-100) THEN
         IF (RT_3 .LT. 0.0)  THEN
            neg = -1.0E100 * RT_4
         ELSE
            neg =  1.0E100 * RT_4
         ENDIF
      ELSE
         neg = RT_4 / RT_3
      ENDIF

! 980:[div] Divider 
      IF (ABS(RT_33) .LT. 1.0E-100) THEN
         IF (RT_33 .LT. 0.0)  THEN
            pos = -1.0E100 * RT_32
         ELSE
            pos =  1.0E100 * RT_32
         ENDIF
      ELSE
         pos = RT_32 / RT_33
      ENDIF

! 990:[div] Divider 
      IF (ABS(RT_37) .LT. 1.0E-100) THEN
         IF (RT_37 .LT. 0.0)  THEN
            zero = -1.0E100 * RT_38
         ELSE
            zero =  1.0E100 * RT_38
         ENDIF
      ELSE
         zero = RT_38 / RT_37
      ENDIF

! 1000:[datatap] Scalar/Array Tap 
      mag_v_c = RT_58(1)

! 1010:[datatap] Scalar/Array Tap 
      mag_v_b = RT_61(1)

! 1020:[datatap] Scalar/Array Tap 
      mag_v_a = RT_64(1)

! 1040:[pgb] Output Channel 'neg'

      PGB(IPGB+1) = neg

! 1060:[pgb] Output Channel 'pos'

      PGB(IPGB+2) = pos

! 1080:[pgb] Output Channel 'zero'

      PGB(IPGB+3) = zero

! 1090:[pgb] Output Channel 'phase_i_c'

      PGB(IPGB+4) = phase_i_c

! 1100:[pgb] Output Channel 'mag_i_c'

      PGB(IPGB+5) = mag_i_c

! 1110:[pgb] Output Channel 'phase_i_b'

      PGB(IPGB+6) = phase_i_b

! 1120:[pgb] Output Channel 'mag_i_b'

      PGB(IPGB+7) = mag_i_b

! 1130:[pgb] Output Channel 'phase_i_a'

      PGB(IPGB+8) = phase_i_a

! 1140:[pgb] Output Channel 'mag_i_a'

      PGB(IPGB+9) = mag_i_a

! 1150:[pgb] Output Channel 'phase_v_c'

      PGB(IPGB+10) = phase_v_c

! 1160:[pgb] Output Channel 'mag_v_c'

      PGB(IPGB+11) = mag_v_c

! 1170:[pgb] Output Channel 'phase_v_b'

      PGB(IPGB+12) = phase_v_b

! 1180:[pgb] Output Channel 'mag_v_b'

      PGB(IPGB+13) = mag_v_b

! 1190:[pgb] Output Channel 'phase_v_a'

      PGB(IPGB+14) = phase_v_a

! 1200:[pgb] Output Channel 'mag_v_a'

      PGB(IPGB+15) = mag_v_a

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = neg
      STOF(ISTOF + 2) = pos
      STOF(ISTOF + 3) = zero
      STOF(ISTOF + 4) = v_c
      STOF(ISTOF + 5) = v_b
      STOF(ISTOF + 6) = v_a
      STOF(ISTOF + 7) = i_c
      STOF(ISTOF + 8) = i_b
      STOF(ISTOF + 9) = i_a
      STOF(ISTOF + 10) = Frequency
      STOF(ISTOF + 11) = RT_1
      STOF(ISTOF + 12) = RT_2
      STOF(ISTOF + 13) = RT_3
      STOF(ISTOF + 14) = RT_4
      STOF(ISTOF + 15) = RT_5
      STOF(ISTOF + 16) = RT_6
      STOF(ISTOF + 17) = RT_7
      STOF(ISTOF + 18) = RT_8
      STOF(ISTOF + 19) = phase_v_a
      STOF(ISTOF + 20) = RT_9
      STOF(ISTOF + 21) = RT_10
      STOF(ISTOF + 22) = RT_11
      STOF(ISTOF + 23) = RT_12
      STOF(ISTOF + 24) = RT_13
      STOF(ISTOF + 25) = RT_14
      STOF(ISTOF + 26) = RT_15
      STOF(ISTOF + 27) = RT_16
      STOF(ISTOF + 28) = RT_17
      STOF(ISTOF + 29) = RT_18
      STOF(ISTOF + 30) = RT_19
      STOF(ISTOF + 31) = RT_20
      STOF(ISTOF + 32) = RT_21
      STOF(ISTOF + 33) = RT_22
      STOF(ISTOF + 34) = RT_23
      STOF(ISTOF + 35) = RT_24
      STOF(ISTOF + 36) = RT_25
      STOF(ISTOF + 37) = RT_26
      STOF(ISTOF + 38) = RT_27
      STOF(ISTOF + 39) = A_real_pos
      STOF(ISTOF + 40) = B_real_pos
      STOF(ISTOF + 41) = C_real_pos
      STOF(ISTOF + 42) = RT_28
      STOF(ISTOF + 43) = RT_29
      STOF(ISTOF + 44) = RT_30
      STOF(ISTOF + 45) = RT_31
      STOF(ISTOF + 46) = RT_32
      STOF(ISTOF + 47) = RT_33
      STOF(ISTOF + 48) = RT_34
      STOF(ISTOF + 49) = A_imag_pos
      STOF(ISTOF + 50) = B_imag_pos
      STOF(ISTOF + 51) = C_imag_pos
      STOF(ISTOF + 52) = RT_35
      STOF(ISTOF + 53) = RT_36
      STOF(ISTOF + 54) = RT_37
      STOF(ISTOF + 55) = RT_38
      STOF(ISTOF + 56) = RT_39
      STOF(ISTOF + 57) = RT_40
      STOF(ISTOF + 58) = RT_41
      STOF(ISTOF + 59) = RT_42
      STOF(ISTOF + 60) = RT_43
      STOF(ISTOF + 61) = A_real_zer
      STOF(ISTOF + 62) = A_imag_zer
      STOF(ISTOF + 63) = RT_44
      STOF(ISTOF + 64) = RT_45
      STOF(ISTOF + 65) = C_real_zer
      STOF(ISTOF + 66) = C_imag_zer
      STOF(ISTOF + 67) = B_imag_zer
      STOF(ISTOF + 68) = RT_46
      STOF(ISTOF + 69) = B_real_zer
      STOF(ISTOF + 70) = RT_47
      STOF(ISTOF + 71) = RT_48
      STOF(ISTOF + 86) = RT_51
      STOF(ISTOF + 101) = RT_54
      STOF(ISTOF + 116) = RT_57
      STOF(ISTOF + 131) = RT_60
      STOF(ISTOF + 146) = mag_v_a
      STOF(ISTOF + 147) = RT_63
      STOF(ISTOF + 162) = mag_v_b
      STOF(ISTOF + 163) = mag_v_c
      STOF(ISTOF + 164) = RT_66
      STOF(ISTOF + 165) = RT_67
      STOF(ISTOF + 166) = iq_a
      STOF(ISTOF + 167) = mag_i_a
      STOF(ISTOF + 168) = phase_i_a
      STOF(ISTOF + 169) = RT_68
      STOF(ISTOF + 170) = RT_69
      STOF(ISTOF + 171) = iq_b
      STOF(ISTOF + 172) = mag_i_b
      STOF(ISTOF + 173) = phase_i_b
      STOF(ISTOF + 174) = phase_v_b
      STOF(ISTOF + 175) = RT_70
      STOF(ISTOF + 176) = RT_71
      STOF(ISTOF + 177) = iq_c
      STOF(ISTOF + 178) = mag_i_c
      STOF(ISTOF + 179) = phase_i_c
      STOF(ISTOF + 180) = phase_v_c
      STOF(ISTOF + 181) = A_real_neg
      STOF(ISTOF + 182) = A_imag_neg
      STOF(ISTOF + 183) = C_real_neg
      STOF(ISTOF + 184) = C_imag_neg
      STOF(ISTOF + 185) = B_imag_neg
      STOF(ISTOF + 186) = B_real_neg

! Array (1:7) quantities...
      DO IT_0 = 1,7
         STOF(ISTOF + 71 + IT_0) = RT_49(IT_0)
         STOF(ISTOF + 78 + IT_0) = RT_50(IT_0)
         STOF(ISTOF + 86 + IT_0) = RT_52(IT_0)
         STOF(ISTOF + 93 + IT_0) = RT_53(IT_0)
         STOF(ISTOF + 101 + IT_0) = RT_55(IT_0)
         STOF(ISTOF + 108 + IT_0) = RT_56(IT_0)
         STOF(ISTOF + 116 + IT_0) = RT_58(IT_0)
         STOF(ISTOF + 123 + IT_0) = RT_59(IT_0)
         STOF(ISTOF + 131 + IT_0) = RT_61(IT_0)
         STOF(ISTOF + 138 + IT_0) = RT_62(IT_0)
         STOF(ISTOF + 147 + IT_0) = RT_64(IT_0)
         STOF(ISTOF + 154 + IT_0) = RT_65(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !neg      is output
      !pos      is output
      !zero     is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE SymmetricalComponentsCalc_1_1Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      REAL     RT_3, RT_16, RT_17, RT_18, RT_20
      REAL     RT_33, RT_37

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NPGB      = NPGB + 15
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_3     = STOF(ISTOF + 13)
      RT_16    = STOF(ISTOF + 27)
      RT_17    = STOF(ISTOF + 28)
      RT_18    = STOF(ISTOF + 29)
      RT_20    = STOF(ISTOF + 31)
      RT_33    = STOF(ISTOF + 47)
      RT_37    = STOF(ISTOF + 54)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'SymmetricalComponentsCalc_1_1.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 

      RT_37 = 3.0

! 90:[const] Real Constant 

      RT_20 = 2.0943951

! 100:[const] Real Constant 

      RT_33 = 3.0

! 110:[const] Real Constant 

      RT_18 = 4.1887902

! 120:[const] Real Constant 

      RT_16 = 4.1887902

! 130:[const] Real Constant 

      RT_3 = 3.0

! 140:[const] Real Constant 

      RT_17 = 2.0943951

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 13) = RT_3
      STOF(ISTOF + 27) = RT_16
      STOF(ISTOF + 28) = RT_17
      STOF(ISTOF + 29) = RT_18
      STOF(ISTOF + 31) = RT_20
      STOF(ISTOF + 47) = RT_33
      STOF(ISTOF + 54) = RT_37


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE SymmetricalComponentsCalc_1_1Dyn_Begin(Frequency)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Frequency

! Electrical Node Indices

! Control Signals
      REAL     RT_3, RT_16, RT_17, RT_18, RT_20
      REAL     RT_33, RT_37

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 
      RT_37 = 3.0

! 90:[const] Real Constant 
      RT_20 = 2.0943951

! 100:[const] Real Constant 
      RT_33 = 3.0

! 110:[const] Real Constant 
      RT_18 = 4.1887902

! 120:[const] Real Constant 
      RT_16 = 4.1887902

! 130:[const] Real Constant 
      RT_3 = 3.0

! 140:[const] Real Constant 
      RT_17 = 2.0943951

! 150:[fft] On-Line Frequency Scanner 

! 160:[fft] On-Line Frequency Scanner 

! 170:[fft] On-Line Frequency Scanner 

! 180:[fft] On-Line Frequency Scanner 

! 190:[fft] On-Line Frequency Scanner 

! 200:[fft] On-Line Frequency Scanner 

! 210:[datatap] Scalar/Array Tap 

! 220:[datatap] Scalar/Array Tap 

! 230:[datatap] Scalar/Array Tap 

! 240:[datatap] Scalar/Array Tap 

! 250:[datatap] Scalar/Array Tap 

! 260:[sumjct] Summing/Differencing Junctions 

! 270:[trig] Trigonometric Functions 

! 280:[mult] Multiplier 

! 290:[datatap] Scalar/Array Tap 

! 300:[datatap] Scalar/Array Tap 

! 310:[sumjct] Summing/Differencing Junctions 

! 320:[trig] Trigonometric Functions 

! 330:[mult] Multiplier 

! 340:[datatap] Scalar/Array Tap 

! 350:[datatap] Scalar/Array Tap 

! 360:[sumjct] Summing/Differencing Junctions 

! 370:[trig] Trigonometric Functions 

! 380:[mult] Multiplier 

! 390:[trig] Trigonometric Functions 

! 400:[gain] Gain Block 

! 410:[trig] Trigonometric Functions 

! 420:[gain] Gain Block 

! 430:[trig] Trigonometric Functions 

! 440:[gain] Gain Block 

! 450:[trig] Trigonometric Functions 

! 460:[gain] Gain Block 

! 470:[trig] Trigonometric Functions 

! 480:[gain] Gain Block 

! 490:[trig] Trigonometric Functions 

! 500:[gain] Gain Block 

! 510:[trig] Trigonometric Functions 

! 520:[gain] Gain Block 

! 530:[trig] Trigonometric Functions 

! 540:[gain] Gain Block 

! 550:[sumjct] Summing/Differencing Junctions 

! 560:[trig] Trigonometric Functions 

! 570:[gain] Gain Block 

! 580:[trig] Trigonometric Functions 

! 590:[gain] Gain Block 

! 600:[sumjct] Summing/Differencing Junctions 

! 610:[trig] Trigonometric Functions 

! 620:[gain] Gain Block 

! 630:[trig] Trigonometric Functions 

! 640:[gain] Gain Block 

! 650:[trig] Trigonometric Functions 

! 660:[gain] Gain Block 

! 670:[trig] Trigonometric Functions 

! 680:[gain] Gain Block 

! 690:[sumjct] Summing/Differencing Junctions 

! 700:[trig] Trigonometric Functions 

! 710:[gain] Gain Block 

! 720:[trig] Trigonometric Functions 

! 730:[gain] Gain Block 

! 740:[sumjct] Summing/Differencing Junctions 

! 750:[trig] Trigonometric Functions 

! 760:[gain] Gain Block 

! 770:[trig] Trigonometric Functions 

! 780:[gain] Gain Block 

! 790:[sumjct] Summing/Differencing Junctions 

! 800:[square] Square 

! 810:[sumjct] Summing/Differencing Junctions 

! 820:[square] Square 

! 830:[sumjct] Summing/Differencing Junctions 

! 840:[square] Square 

! 850:[sumjct] Summing/Differencing Junctions 

! 860:[square] Square 

! 870:[sumjct] Summing/Differencing Junctions 

! 880:[square] Square 

! 890:[sumjct] Summing/Differencing Junctions 

! 900:[square] Square 

! 910:[sumjct] Summing/Differencing Junctions 

! 920:[sumjct] Summing/Differencing Junctions 

! 930:[sumjct] Summing/Differencing Junctions 

! 940:[sqrt] Square Root 

! 950:[sqrt] Square Root 

! 960:[sqrt] Square Root 

! 970:[div] Divider 

! 980:[div] Divider 

! 990:[div] Divider 

! 1000:[datatap] Scalar/Array Tap 

! 1010:[datatap] Scalar/Array Tap 

! 1020:[datatap] Scalar/Array Tap 

! 1040:[pgb] Output Channel 'neg'

! 1060:[pgb] Output Channel 'pos'

! 1080:[pgb] Output Channel 'zero'

! 1090:[pgb] Output Channel 'phase_i_c'

! 1100:[pgb] Output Channel 'mag_i_c'

! 1110:[pgb] Output Channel 'phase_i_b'

! 1120:[pgb] Output Channel 'mag_i_b'

! 1130:[pgb] Output Channel 'phase_i_a'

! 1140:[pgb] Output Channel 'mag_i_a'

! 1150:[pgb] Output Channel 'phase_v_c'

! 1160:[pgb] Output Channel 'mag_v_c'

! 1170:[pgb] Output Channel 'phase_v_b'

! 1180:[pgb] Output Channel 'mag_v_b'

! 1190:[pgb] Output Channel 'phase_v_a'

! 1200:[pgb] Output Channel 'mag_v_a'

      RETURN
      END

!=======================================================================

      SUBROUTINE SymmetricalComponentsCalc_1_1Out_Begin(Frequency)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: Frequency

! Electrical Node Indices

! Control Signals
      REAL     RT_3, RT_16, RT_17, RT_18, RT_20
      REAL     RT_33, RT_37

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 80:[const] Real Constant 
      RT_37 = 3.0

! 90:[const] Real Constant 
      RT_20 = 2.0943951

! 100:[const] Real Constant 
      RT_33 = 3.0

! 110:[const] Real Constant 
      RT_18 = 4.1887902

! 120:[const] Real Constant 
      RT_16 = 4.1887902

! 130:[const] Real Constant 
      RT_3 = 3.0

! 140:[const] Real Constant 
      RT_17 = 2.0943951

      RETURN
      END

