!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : XY_profile_2
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE XY_profile_2Dyn(Y, X, X1, Y1, X2, Y2, X3, Y3, X4, Y4,  &
     &   X5, Y5, X6, Y6, X7, Y7, X8, Y8, X9, Y9, X10, Y10, Ygain, N)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    SignalTruncator_2_3Dyn  ! 
!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: N
      REAL,    INTENT(IN)  :: X, X1, Y1, X2, Y2
      REAL,    INTENT(IN)  :: X3, Y3, X4, Y4, X5
      REAL,    INTENT(IN)  :: Y5, X6, Y6, X7, Y7
      REAL,    INTENT(IN)  :: X8, Y8, X9, Y9, X10
      REAL,    INTENT(IN)  :: Y10, Ygain
      REAL,    INTENT(OUT) :: Y

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, IT_4, IT_5, IT_6
      INTEGER  IT_7, IT_8, IT_9, IT_10
      REAL     Y10_, Y9_, Y8_, Y7_, Y6_, Y5_, Y4_
      REAL     Y3_, Y2_, Y1_, X10_, X9_, X8_, X7_
      REAL     X6_, X5_, X4_, X3_, X2_, X1_, RT_1
      REAL     RT_2, RT_3, RT_4, RT_5, RT_6, RT_7
      REAL     RT_8, RT_9, RT_10, RT_11, RT_12
      REAL     RT_13, RT_14, RT_15, RT_16, RT_17
      REAL     RT_18, RT_19, RT_20, RT_21, RT_22
      REAL     RT_23, RT_24, RT_25, RT_26, RT_27
      REAL     RT_28, RT_29, RT_30, RT_31, RT_32
      REAL     RT_33, RT_34, RT_35, RT_36, RT_37
      REAL     RT_38, RT_39, RT_40, RT_41, RT_42
      REAL     RT_43, RT_44, RT_45, RT_46, RT_47
      REAL     RT_48, RT_49, RT_50, RT_51, RT_52
      REAL     RT_53, RT_54, RT_55, RT_56, RT_57
      REAL     RT_58, RT_59, RT_60, RT_61, RT_62
      REAL     RT_63, RT_64, RT_65, RT_66, RT_67
      REAL     RT_68, RT_69, RT_70, RT_71, RT_72
      REAL     RT_73, RT_74

! Internal Variables
      REAL     RVD2_1(2)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 11
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 117
      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      Y        = STOF(ISTOF + 1)
      Y10_     = STOF(ISTOF + 24)
      Y9_      = STOF(ISTOF + 25)
      Y8_      = STOF(ISTOF + 26)
      Y7_      = STOF(ISTOF + 27)
      Y6_      = STOF(ISTOF + 28)
      Y5_      = STOF(ISTOF + 29)
      Y4_      = STOF(ISTOF + 30)
      Y3_      = STOF(ISTOF + 31)
      Y2_      = STOF(ISTOF + 32)
      Y1_      = STOF(ISTOF + 33)
      X10_     = STOF(ISTOF + 34)
      X9_      = STOF(ISTOF + 35)
      X8_      = STOF(ISTOF + 36)
      X7_      = STOF(ISTOF + 37)
      X6_      = STOF(ISTOF + 38)
      X5_      = STOF(ISTOF + 39)
      X4_      = STOF(ISTOF + 40)
      X3_      = STOF(ISTOF + 41)
      X2_      = STOF(ISTOF + 42)
      X1_      = STOF(ISTOF + 43)
      RT_1     = STOF(ISTOF + 44)
      IT_1     = STOI(ISTOI + 2)
      RT_2     = STOF(ISTOF + 45)
      RT_3     = STOF(ISTOF + 46)
      IT_2     = STOI(ISTOI + 3)
      RT_4     = STOF(ISTOF + 47)
      RT_5     = STOF(ISTOF + 48)
      RT_6     = STOF(ISTOF + 49)
      RT_7     = STOF(ISTOF + 50)
      RT_8     = STOF(ISTOF + 51)
      RT_9     = STOF(ISTOF + 52)
      RT_10    = STOF(ISTOF + 53)
      RT_11    = STOF(ISTOF + 54)
      RT_12    = STOF(ISTOF + 55)
      RT_13    = STOF(ISTOF + 56)
      RT_14    = STOF(ISTOF + 57)
      RT_15    = STOF(ISTOF + 58)
      RT_16    = STOF(ISTOF + 59)
      RT_17    = STOF(ISTOF + 60)
      RT_18    = STOF(ISTOF + 61)
      IT_3     = STOI(ISTOI + 4)
      RT_19    = STOF(ISTOF + 62)
      IT_4     = STOI(ISTOI + 5)
      RT_20    = STOF(ISTOF + 63)
      RT_21    = STOF(ISTOF + 64)
      RT_22    = STOF(ISTOF + 65)
      RT_23    = STOF(ISTOF + 66)
      RT_24    = STOF(ISTOF + 67)
      RT_25    = STOF(ISTOF + 68)
      RT_26    = STOF(ISTOF + 69)
      RT_27    = STOF(ISTOF + 70)
      RT_28    = STOF(ISTOF + 71)
      RT_29    = STOF(ISTOF + 72)
      RT_30    = STOF(ISTOF + 73)
      RT_31    = STOF(ISTOF + 74)
      RT_32    = STOF(ISTOF + 75)
      RT_33    = STOF(ISTOF + 76)
      RT_34    = STOF(ISTOF + 77)
      IT_5     = STOI(ISTOI + 6)
      RT_35    = STOF(ISTOF + 78)
      IT_6     = STOI(ISTOI + 7)
      RT_36    = STOF(ISTOF + 79)
      RT_37    = STOF(ISTOF + 80)
      RT_38    = STOF(ISTOF + 81)
      RT_39    = STOF(ISTOF + 82)
      RT_40    = STOF(ISTOF + 83)
      RT_41    = STOF(ISTOF + 84)
      RT_42    = STOF(ISTOF + 85)
      RT_43    = STOF(ISTOF + 86)
      RT_44    = STOF(ISTOF + 87)
      RT_45    = STOF(ISTOF + 88)
      RT_46    = STOF(ISTOF + 89)
      RT_47    = STOF(ISTOF + 90)
      RT_48    = STOF(ISTOF + 91)
      RT_49    = STOF(ISTOF + 92)
      RT_50    = STOF(ISTOF + 93)
      IT_7     = STOI(ISTOI + 8)
      RT_51    = STOF(ISTOF + 94)
      IT_8     = STOI(ISTOI + 9)
      RT_52    = STOF(ISTOF + 95)
      RT_53    = STOF(ISTOF + 96)
      RT_54    = STOF(ISTOF + 97)
      RT_55    = STOF(ISTOF + 98)
      RT_56    = STOF(ISTOF + 99)
      RT_57    = STOF(ISTOF + 100)
      RT_58    = STOF(ISTOF + 101)
      RT_59    = STOF(ISTOF + 102)
      RT_60    = STOF(ISTOF + 103)
      RT_61    = STOF(ISTOF + 104)
      RT_62    = STOF(ISTOF + 105)
      RT_63    = STOF(ISTOF + 106)
      RT_64    = STOF(ISTOF + 107)
      RT_65    = STOF(ISTOF + 108)
      RT_66    = STOF(ISTOF + 109)
      IT_9     = STOI(ISTOI + 10)
      RT_67    = STOF(ISTOF + 110)
      IT_10    = STOI(ISTOI + 11)
      RT_68    = STOF(ISTOF + 111)
      RT_69    = STOF(ISTOF + 112)
      RT_70    = STOF(ISTOF + 113)
      RT_71    = STOF(ISTOF + 114)
      RT_72    = STOF(ISTOF + 115)
      RT_73    = STOF(ISTOF + 116)
      RT_74    = STOF(ISTOF + 117)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'XY_profile_2.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 240:[SignalTruncator_2_3]  
      CALL SignalTruncator_2_3Dyn(Y10_, Y9_, Y8_, Y7_, Y6_, Y5_, Y4_, Y3&
     &_, Y2_, Y1_, X10_, X9_, X8_, X7_, X6_, X5_, X4_, X3_, X2_, X1_, RE&
     &AL(N), Y10, Y9, Y8, Y7, Y6, Y5, Y4, Y3, Y2, Y1, X10, X9, X8, X7, X&
     &6, X5, X4, X3, X2, X1)


! 250:[sumjct] Summing/Differencing Junctions 
      RT_70 = + X - X9_

! 260:[sumjct] Summing/Differencing Junctions 
      RT_64 = + X - X8_

! 270:[sumjct] Summing/Differencing Junctions 
      RT_71 = + X10_ - X9_

! 280:[sumjct] Summing/Differencing Junctions 
      RT_55 = + X - X7_

! 290:[sumjct] Summing/Differencing Junctions 
      RT_65 = + X9_ - X8_

! 300:[sumjct] Summing/Differencing Junctions 
      RT_48 = + X - X6_

! 310:[sumjct] Summing/Differencing Junctions 
      RT_56 = + X8_ - X7_

! 320:[sumjct] Summing/Differencing Junctions 
      RT_39 = + X - X5_

! 330:[div] Divider 
      IF (ABS(RT_71) .LT. 1.0E-100) THEN
         IF (RT_71 .LT. 0.0)  THEN
            RT_72 = -1.0E100 * RT_70
         ELSE
            RT_72 =  1.0E100 * RT_70
         ENDIF
      ELSE
         RT_72 = RT_70 / RT_71
      ENDIF

! 340:[sumjct] Summing/Differencing Junctions 
      RT_49 = + X7_ - X6_

! 350:[div] Divider 
      IF (ABS(RT_65) .LT. 1.0E-100) THEN
         IF (RT_65 .LT. 0.0)  THEN
            RT_63 = -1.0E100 * RT_64
         ELSE
            RT_63 =  1.0E100 * RT_64
         ENDIF
      ELSE
         RT_63 = RT_64 / RT_65
      ENDIF

! 360:[sumjct] Summing/Differencing Junctions 
      RT_32 = + X - X4_

! 370:[sumjct] Summing/Differencing Junctions 
      RT_40 = + X6_ - X5_

! 380:[sumjct] Summing/Differencing Junctions 
      RT_23 = + X - X3_

! 390:[div] Divider 
      IF (ABS(RT_56) .LT. 1.0E-100) THEN
         IF (RT_56 .LT. 0.0)  THEN
            RT_57 = -1.0E100 * RT_55
         ELSE
            RT_57 =  1.0E100 * RT_55
         ENDIF
      ELSE
         RT_57 = RT_55 / RT_56
      ENDIF

! 400:[sumjct] Summing/Differencing Junctions 
      RT_33 = + X5_ - X4_

! 410:[sumjct] Summing/Differencing Junctions 
      RT_16 = + X - X2_

! 420:[div] Divider 
      IF (ABS(RT_49) .LT. 1.0E-100) THEN
         IF (RT_49 .LT. 0.0)  THEN
            RT_47 = -1.0E100 * RT_48
         ELSE
            RT_47 =  1.0E100 * RT_48
         ENDIF
      ELSE
         RT_47 = RT_48 / RT_49
      ENDIF

! 430:[sumjct] Summing/Differencing Junctions 
      RT_24 = + X4_ - X3_

! 440:[sumjct] Summing/Differencing Junctions 
      RT_74 = + Y10_ - Y9_

! 450:[div] Divider 
      IF (ABS(RT_40) .LT. 1.0E-100) THEN
         IF (RT_40 .LT. 0.0)  THEN
            RT_41 = -1.0E100 * RT_39
         ELSE
            RT_41 =  1.0E100 * RT_39
         ENDIF
      ELSE
         RT_41 = RT_39 / RT_40
      ENDIF

! 460:[sumjct] Summing/Differencing Junctions 
      RT_7 = + X - X1_

! 470:[sumjct] Summing/Differencing Junctions 
      RT_17 = + X3_ - X2_

! 480:[sumjct] Summing/Differencing Junctions 
      RT_62 = + Y9_ - Y8_

! 490:[div] Divider 
      IF (ABS(RT_33) .LT. 1.0E-100) THEN
         IF (RT_33 .LT. 0.0)  THEN
            RT_31 = -1.0E100 * RT_32
         ELSE
            RT_31 =  1.0E100 * RT_32
         ENDIF
      ELSE
         RT_31 = RT_32 / RT_33
      ENDIF

! 500:[sumjct] Summing/Differencing Junctions 
      RT_59 = + Y8_ - Y7_

! 510:[sumjct] Summing/Differencing Junctions 
      RT_8 = + X2_ - X1_

! 520:[div] Divider 
      IF (ABS(RT_24) .LT. 1.0E-100) THEN
         IF (RT_24 .LT. 0.0)  THEN
            RT_25 = -1.0E100 * RT_23
         ELSE
            RT_25 =  1.0E100 * RT_23
         ENDIF
      ELSE
         RT_25 = RT_23 / RT_24
      ENDIF

! 530:[mult] Multiplier 
      RT_73 = RT_72 * RT_74

! 540:[sumjct] Summing/Differencing Junctions 
      RT_46 = + Y7_ - Y6_

! 550:[div] Divider 
      IF (ABS(RT_17) .LT. 1.0E-100) THEN
         IF (RT_17 .LT. 0.0)  THEN
            RT_15 = -1.0E100 * RT_16
         ELSE
            RT_15 =  1.0E100 * RT_16
         ENDIF
      ELSE
         RT_15 = RT_16 / RT_17
      ENDIF

! 560:[mult] Multiplier 
      RT_60 = RT_63 * RT_62

! 570:[sumjct] Summing/Differencing Junctions 
      RT_43 = + Y6_ - Y5_

! 580:[div] Divider 
      IF (ABS(RT_8) .LT. 1.0E-100) THEN
         IF (RT_8 .LT. 0.0)  THEN
            RT_9 = -1.0E100 * RT_7
         ELSE
            RT_9 =  1.0E100 * RT_7
         ENDIF
      ELSE
         RT_9 = RT_7 / RT_8
      ENDIF

! 590:[mult] Multiplier 
      RT_58 = RT_57 * RT_59

! 600:[sumjct] Summing/Differencing Junctions 
      RT_30 = + Y5_ - Y4_

! 610:[mult] Multiplier 
      RT_44 = RT_47 * RT_46

! 620:[sumjct] Summing/Differencing Junctions 
      RT_27 = + Y4_ - Y3_

! 630:[mult] Multiplier 
      RT_42 = RT_41 * RT_43

! 640:[sumjct] Summing/Differencing Junctions 
      RT_68 = + RT_73 + Y9_

! 650:[sumjct] Summing/Differencing Junctions 
      RT_14 = + Y3_ - Y2_

! 660:[sumjct] Summing/Differencing Junctions 
      RT_61 = + RT_60 + Y8_

! 670:[mult] Multiplier 
      RT_28 = RT_31 * RT_30

! 680:[sumjct] Summing/Differencing Junctions 
      RT_11 = + Y2_ - Y1_

! 690:[mult] Multiplier 
      RT_26 = RT_25 * RT_27

! 700:[sumjct] Summing/Differencing Junctions 
      RT_52 = + RT_58 + Y7_

! 710:[mult] Multiplier 
      RT_12 = RT_15 * RT_14

! 720:[sumjct] Summing/Differencing Junctions 
      RT_45 = + RT_44 + Y6_

! 730:[sumjct] Summing/Differencing Junctions 
      RT_36 = + RT_42 + Y5_

! 740:[mult] Multiplier 
      RT_10 = RT_9 * RT_11

! 750:[sumjct] Summing/Differencing Junctions 
      RT_29 = + RT_28 + Y4_

! 760:[sumjct] Summing/Differencing Junctions 
      RT_20 = + RT_26 + Y3_

! 770:[sumjct] Summing/Differencing Junctions 
      RT_13 = + RT_12 + Y2_

! 780:[sumjct] Summing/Differencing Junctions 
      RT_4 = + RT_10 + Y1_

! 790:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X10_,0.0,0.0,1.0,RVD2_1)
      RT_69 = RVD2_1(1)

! 800:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_10 = NINT(RT_69)

! 810:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X9_,0.0,0.0,1.0,RVD2_1)
      RT_66 = RVD2_1(1)

! 820:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_9 = NINT(RT_66)

! 830:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X8_,0.0,0.0,1.0,RVD2_1)
      RT_54 = RVD2_1(1)

! 840:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_8 = NINT(RT_54)

! 850:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X7_,0.0,0.0,1.0,RVD2_1)
      RT_50 = RVD2_1(1)

! 860:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_7 = NINT(RT_50)

! 870:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X6_,0.0,0.0,1.0,RVD2_1)
      RT_38 = RVD2_1(1)

! 880:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_6 = NINT(RT_38)

! 890:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X5_,0.0,0.0,1.0,RVD2_1)
      RT_34 = RVD2_1(1)

! 900:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_5 = NINT(RT_34)

! 910:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X4_,0.0,0.0,1.0,RVD2_1)
      RT_22 = RVD2_1(1)

! 920:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_4 = NINT(RT_22)

! 930:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X3_,0.0,0.0,1.0,RVD2_1)
      RT_18 = RVD2_1(1)

! 940:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_3 = NINT(RT_18)

! 950:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X2_,0.0,0.0,1.0,RVD2_1)
      RT_6 = RVD2_1(1)

! 960:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_2 = NINT(RT_6)

! 970:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,X,X1_,0.0,0.0,1.0,RVD2_1)
      RT_1 = RVD2_1(1)

! 980:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_1 = NINT(RT_1)

! 990:[select] Two Input Selector 
      IF (IT_10 .EQ. RTCI(NRTCI)) THEN
         RT_67 = RT_68
      ELSE
         RT_67 = Y10_
      ENDIF
      NRTCI = NRTCI + 1
!

! 1000:[select] Two Input Selector 
      IF (IT_9 .EQ. RTCI(NRTCI)) THEN
         RT_53 = RT_61
      ELSE
         RT_53 = RT_67
      ENDIF
      NRTCI = NRTCI + 1
!

! 1010:[select] Two Input Selector 
      IF (IT_8 .EQ. RTCI(NRTCI)) THEN
         RT_51 = RT_52
      ELSE
         RT_51 = RT_53
      ENDIF
      NRTCI = NRTCI + 1
!

! 1020:[select] Two Input Selector 
      IF (IT_7 .EQ. RTCI(NRTCI)) THEN
         RT_37 = RT_45
      ELSE
         RT_37 = RT_51
      ENDIF
      NRTCI = NRTCI + 1
!

! 1030:[select] Two Input Selector 
      IF (IT_6 .EQ. RTCI(NRTCI)) THEN
         RT_35 = RT_36
      ELSE
         RT_35 = RT_37
      ENDIF
      NRTCI = NRTCI + 1
!

! 1040:[select] Two Input Selector 
      IF (IT_5 .EQ. RTCI(NRTCI)) THEN
         RT_21 = RT_29
      ELSE
         RT_21 = RT_35
      ENDIF
      NRTCI = NRTCI + 1
!

! 1050:[select] Two Input Selector 
      IF (IT_4 .EQ. RTCI(NRTCI)) THEN
         RT_19 = RT_20
      ELSE
         RT_19 = RT_21
      ENDIF
      NRTCI = NRTCI + 1
!

! 1060:[select] Two Input Selector 
      IF (IT_3 .EQ. RTCI(NRTCI)) THEN
         RT_5 = RT_13
      ELSE
         RT_5 = RT_19
      ENDIF
      NRTCI = NRTCI + 1
!

! 1070:[select] Two Input Selector 
      IF (IT_2 .EQ. RTCI(NRTCI)) THEN
         RT_2 = RT_4
      ELSE
         RT_2 = RT_5
      ENDIF
      NRTCI = NRTCI + 1
!

! 1080:[select] Two Input Selector 
      IF (IT_1 .EQ. RTCI(NRTCI)) THEN
         RT_3 = Y1_
      ELSE
         RT_3 = RT_2
      ENDIF
      NRTCI = NRTCI + 1
!

! 1090:[mult] Multiplier 
      Y = RT_3 * Ygain

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = Y
      STOF(ISTOF + 2) = X
      STOF(ISTOF + 3) = X1
      STOF(ISTOF + 4) = Y1
      STOF(ISTOF + 5) = X2
      STOF(ISTOF + 6) = Y2
      STOF(ISTOF + 7) = X3
      STOF(ISTOF + 8) = Y3
      STOF(ISTOF + 9) = X4
      STOF(ISTOF + 10) = Y4
      STOF(ISTOF + 11) = X5
      STOF(ISTOF + 12) = Y5
      STOF(ISTOF + 13) = X6
      STOF(ISTOF + 14) = Y6
      STOF(ISTOF + 15) = X7
      STOF(ISTOF + 16) = Y7
      STOF(ISTOF + 17) = X8
      STOF(ISTOF + 18) = Y8
      STOF(ISTOF + 19) = X9
      STOF(ISTOF + 20) = Y9
      STOF(ISTOF + 21) = X10
      STOF(ISTOF + 22) = Y10
      STOF(ISTOF + 23) = Ygain
      STOI(ISTOI + 1) = N
      STOF(ISTOF + 24) = Y10_
      STOF(ISTOF + 25) = Y9_
      STOF(ISTOF + 26) = Y8_
      STOF(ISTOF + 27) = Y7_
      STOF(ISTOF + 28) = Y6_
      STOF(ISTOF + 29) = Y5_
      STOF(ISTOF + 30) = Y4_
      STOF(ISTOF + 31) = Y3_
      STOF(ISTOF + 32) = Y2_
      STOF(ISTOF + 33) = Y1_
      STOF(ISTOF + 34) = X10_
      STOF(ISTOF + 35) = X9_
      STOF(ISTOF + 36) = X8_
      STOF(ISTOF + 37) = X7_
      STOF(ISTOF + 38) = X6_
      STOF(ISTOF + 39) = X5_
      STOF(ISTOF + 40) = X4_
      STOF(ISTOF + 41) = X3_
      STOF(ISTOF + 42) = X2_
      STOF(ISTOF + 43) = X1_
      STOF(ISTOF + 44) = RT_1
      STOI(ISTOI + 2) = IT_1
      STOF(ISTOF + 45) = RT_2
      STOF(ISTOF + 46) = RT_3
      STOI(ISTOI + 3) = IT_2
      STOF(ISTOF + 47) = RT_4
      STOF(ISTOF + 48) = RT_5
      STOF(ISTOF + 49) = RT_6
      STOF(ISTOF + 50) = RT_7
      STOF(ISTOF + 51) = RT_8
      STOF(ISTOF + 52) = RT_9
      STOF(ISTOF + 53) = RT_10
      STOF(ISTOF + 54) = RT_11
      STOF(ISTOF + 55) = RT_12
      STOF(ISTOF + 56) = RT_13
      STOF(ISTOF + 57) = RT_14
      STOF(ISTOF + 58) = RT_15
      STOF(ISTOF + 59) = RT_16
      STOF(ISTOF + 60) = RT_17
      STOF(ISTOF + 61) = RT_18
      STOI(ISTOI + 4) = IT_3
      STOF(ISTOF + 62) = RT_19
      STOI(ISTOI + 5) = IT_4
      STOF(ISTOF + 63) = RT_20
      STOF(ISTOF + 64) = RT_21
      STOF(ISTOF + 65) = RT_22
      STOF(ISTOF + 66) = RT_23
      STOF(ISTOF + 67) = RT_24
      STOF(ISTOF + 68) = RT_25
      STOF(ISTOF + 69) = RT_26
      STOF(ISTOF + 70) = RT_27
      STOF(ISTOF + 71) = RT_28
      STOF(ISTOF + 72) = RT_29
      STOF(ISTOF + 73) = RT_30
      STOF(ISTOF + 74) = RT_31
      STOF(ISTOF + 75) = RT_32
      STOF(ISTOF + 76) = RT_33
      STOF(ISTOF + 77) = RT_34
      STOI(ISTOI + 6) = IT_5
      STOF(ISTOF + 78) = RT_35
      STOI(ISTOI + 7) = IT_6
      STOF(ISTOF + 79) = RT_36
      STOF(ISTOF + 80) = RT_37
      STOF(ISTOF + 81) = RT_38
      STOF(ISTOF + 82) = RT_39
      STOF(ISTOF + 83) = RT_40
      STOF(ISTOF + 84) = RT_41
      STOF(ISTOF + 85) = RT_42
      STOF(ISTOF + 86) = RT_43
      STOF(ISTOF + 87) = RT_44
      STOF(ISTOF + 88) = RT_45
      STOF(ISTOF + 89) = RT_46
      STOF(ISTOF + 90) = RT_47
      STOF(ISTOF + 91) = RT_48
      STOF(ISTOF + 92) = RT_49
      STOF(ISTOF + 93) = RT_50
      STOI(ISTOI + 8) = IT_7
      STOF(ISTOF + 94) = RT_51
      STOI(ISTOI + 9) = IT_8
      STOF(ISTOF + 95) = RT_52
      STOF(ISTOF + 96) = RT_53
      STOF(ISTOF + 97) = RT_54
      STOF(ISTOF + 98) = RT_55
      STOF(ISTOF + 99) = RT_56
      STOF(ISTOF + 100) = RT_57
      STOF(ISTOF + 101) = RT_58
      STOF(ISTOF + 102) = RT_59
      STOF(ISTOF + 103) = RT_60
      STOF(ISTOF + 104) = RT_61
      STOF(ISTOF + 105) = RT_62
      STOF(ISTOF + 106) = RT_63
      STOF(ISTOF + 107) = RT_64
      STOF(ISTOF + 108) = RT_65
      STOF(ISTOF + 109) = RT_66
      STOI(ISTOI + 10) = IT_9
      STOF(ISTOF + 110) = RT_67
      STOI(ISTOI + 11) = IT_10
      STOF(ISTOF + 111) = RT_68
      STOF(ISTOF + 112) = RT_69
      STOF(ISTOF + 113) = RT_70
      STOF(ISTOF + 114) = RT_71
      STOF(ISTOF + 115) = RT_72
      STOF(ISTOF + 116) = RT_73
      STOF(ISTOF + 117) = RT_74


!---------------------------------------
! Transfer to Exports
!---------------------------------------
      !Y        is output

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE XY_profile_2Out()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    SignalTruncator_2_3Out  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC          ! Storage Indices
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------



!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'XY_profile_2.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 240:[SignalTruncator_2_3]  
      CALL SignalTruncator_2_3Out()


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------



!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE XY_profile_2Dyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    SignalTruncator_2_3Dyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 240:[SignalTruncator_2_3]  
      CALL SignalTruncator_2_3Dyn_Begin()


! 250:[sumjct] Summing/Differencing Junctions 

! 260:[sumjct] Summing/Differencing Junctions 

! 270:[sumjct] Summing/Differencing Junctions 

! 280:[sumjct] Summing/Differencing Junctions 

! 290:[sumjct] Summing/Differencing Junctions 

! 300:[sumjct] Summing/Differencing Junctions 

! 310:[sumjct] Summing/Differencing Junctions 

! 320:[sumjct] Summing/Differencing Junctions 

! 330:[div] Divider 

! 340:[sumjct] Summing/Differencing Junctions 

! 350:[div] Divider 

! 360:[sumjct] Summing/Differencing Junctions 

! 370:[sumjct] Summing/Differencing Junctions 

! 380:[sumjct] Summing/Differencing Junctions 

! 390:[div] Divider 

! 400:[sumjct] Summing/Differencing Junctions 

! 410:[sumjct] Summing/Differencing Junctions 

! 420:[div] Divider 

! 430:[sumjct] Summing/Differencing Junctions 

! 440:[sumjct] Summing/Differencing Junctions 

! 450:[div] Divider 

! 460:[sumjct] Summing/Differencing Junctions 

! 470:[sumjct] Summing/Differencing Junctions 

! 480:[sumjct] Summing/Differencing Junctions 

! 490:[div] Divider 

! 500:[sumjct] Summing/Differencing Junctions 

! 510:[sumjct] Summing/Differencing Junctions 

! 520:[div] Divider 

! 530:[mult] Multiplier 

! 540:[sumjct] Summing/Differencing Junctions 

! 550:[div] Divider 

! 560:[mult] Multiplier 

! 570:[sumjct] Summing/Differencing Junctions 

! 580:[div] Divider 

! 590:[mult] Multiplier 

! 600:[sumjct] Summing/Differencing Junctions 

! 610:[mult] Multiplier 

! 620:[sumjct] Summing/Differencing Junctions 

! 630:[mult] Multiplier 

! 640:[sumjct] Summing/Differencing Junctions 

! 650:[sumjct] Summing/Differencing Junctions 

! 660:[sumjct] Summing/Differencing Junctions 

! 670:[mult] Multiplier 

! 680:[sumjct] Summing/Differencing Junctions 

! 690:[mult] Multiplier 

! 700:[sumjct] Summing/Differencing Junctions 

! 710:[mult] Multiplier 

! 720:[sumjct] Summing/Differencing Junctions 

! 730:[sumjct] Summing/Differencing Junctions 

! 740:[mult] Multiplier 

! 750:[sumjct] Summing/Differencing Junctions 

! 760:[sumjct] Summing/Differencing Junctions 

! 770:[sumjct] Summing/Differencing Junctions 

! 780:[sumjct] Summing/Differencing Junctions 

! 790:[compar] Two Input Comparator 

! 800:[unity] Type/Shape conversion block 

! 810:[compar] Two Input Comparator 

! 820:[unity] Type/Shape conversion block 

! 830:[compar] Two Input Comparator 

! 840:[unity] Type/Shape conversion block 

! 850:[compar] Two Input Comparator 

! 860:[unity] Type/Shape conversion block 

! 870:[compar] Two Input Comparator 

! 880:[unity] Type/Shape conversion block 

! 890:[compar] Two Input Comparator 

! 900:[unity] Type/Shape conversion block 

! 910:[compar] Two Input Comparator 

! 920:[unity] Type/Shape conversion block 

! 930:[compar] Two Input Comparator 

! 940:[unity] Type/Shape conversion block 

! 950:[compar] Two Input Comparator 

! 960:[unity] Type/Shape conversion block 

! 970:[compar] Two Input Comparator 

! 980:[unity] Type/Shape conversion block 

! 990:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1000:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1010:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1020:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1030:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1040:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1050:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1060:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1070:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1080:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1090:[mult] Multiplier 

      RETURN
      END

!=======================================================================

      SUBROUTINE XY_profile_2Out_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    SignalTruncator_2_3Out_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISUBS                               ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NNODE     = NNODE + 2
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 240:[SignalTruncator_2_3]  
      CALL SignalTruncator_2_3Out_Begin()


      RETURN
      END

