!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : GridSource
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE GridSourceDyn(enableSecSCR, Vpu_new, X_R_new, Vbase,   &
     &   switchTime, SCL_new, Vpu, Fbase, X_R, SCL, mode, angle_offset, &
     &   F_X1, F_Y1, F_Y2, F_Y3, F_Y4, F_Y5, F_Y6, F_Y7, F_Y8, F_Y9,    &
     &   F_X2, F_X3, FprofileMethod, F_X4, F_X5, F_X6, F_X7, F_X8,      &
     &   F_X9, F_X10, F_Y10, FprofileScal, FprofileOffset, F_N, V_Y1,   &
     &   VprofileMethod, V_Y2, V_Y3, V_Y4, V_Y5, V_Y6, V_Y7, V_Y8,      &
     &   V_Y9, V_Y10, V_X1, V_X2, V_X3, V_X4, V_X5, V_X6, V_X7, V_X8,   &
     &   V_X9, V_X10, VprofileScal, VprofileOffset, V_N, MagDist,       &
     &   Fdist, MagBase, PhDistMag, OscStartTime, PH_Y1,                &
     &   PHprofileMethod, PH_Y2, PH_Y3, PH_Y4, PH_Y5, PH_Y6, PH_Y7,     &
     &   PH_Y8, PH_Y9, PH_Y10, PH_X1, PH_X2, PH_X3, PH_X4, PH_X5,       &
     &   PH_X6, PH_X7, PH_X8, PH_X9, PH_X10, PH_N)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
      REAL    XYFUNC        ! XY-Transfer function
!     SUBR    XY_profileDyn  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: enableSecSCR, mode
      INTEGER, INTENT(IN)  :: FprofileMethod
      INTEGER, INTENT(IN)  :: FprofileScal
      INTEGER, INTENT(IN)  :: FprofileOffset, F_N
      INTEGER, INTENT(IN)  :: VprofileMethod
      INTEGER, INTENT(IN)  :: VprofileScal
      INTEGER, INTENT(IN)  :: VprofileOffset, V_N
      INTEGER, INTENT(IN)  :: MagBase
      INTEGER, INTENT(IN)  :: PHprofileMethod
      INTEGER, INTENT(IN)  :: PH_N
      REAL,    INTENT(IN)  :: Vpu_new, X_R_new
      REAL,    INTENT(IN)  :: Vbase, switchTime
      REAL,    INTENT(IN)  :: SCL_new, Vpu, Fbase
      REAL,    INTENT(IN)  :: X_R, SCL
      REAL,    INTENT(IN)  :: angle_offset, F_X1
      REAL,    INTENT(IN)  :: F_Y1, F_Y2, F_Y3
      REAL,    INTENT(IN)  :: F_Y4, F_Y5, F_Y6
      REAL,    INTENT(IN)  :: F_Y7, F_Y8, F_Y9
      REAL,    INTENT(IN)  :: F_X2, F_X3, F_X4
      REAL,    INTENT(IN)  :: F_X5, F_X6, F_X7
      REAL,    INTENT(IN)  :: F_X8, F_X9, F_X10
      REAL,    INTENT(IN)  :: F_Y10, V_Y1, V_Y2
      REAL,    INTENT(IN)  :: V_Y3, V_Y4, V_Y5
      REAL,    INTENT(IN)  :: V_Y6, V_Y7, V_Y8
      REAL,    INTENT(IN)  :: V_Y9, V_Y10, V_X1
      REAL,    INTENT(IN)  :: V_X2, V_X3, V_X4
      REAL,    INTENT(IN)  :: V_X5, V_X6, V_X7
      REAL,    INTENT(IN)  :: V_X8, V_X9, V_X10
      REAL,    INTENT(IN)  :: MagDist, Fdist
      REAL,    INTENT(IN)  :: PhDistMag
      REAL,    INTENT(IN)  :: OscStartTime, PH_Y1
      REAL,    INTENT(IN)  :: PH_Y2, PH_Y3, PH_Y4
      REAL,    INTENT(IN)  :: PH_Y5, PH_Y6, PH_Y7
      REAL,    INTENT(IN)  :: PH_Y8, PH_Y9
      REAL,    INTENT(IN)  :: PH_Y10, PH_X1
      REAL,    INTENT(IN)  :: PH_X2, PH_X3, PH_X4
      REAL,    INTENT(IN)  :: PH_X5, PH_X6, PH_X7
      REAL,    INTENT(IN)  :: PH_X8, PH_X9
      REAL,    INTENT(IN)  :: PH_X10

! Electrical Node Indices
      INTEGER  NT_1(3), NT_3(3), NT_4(3), NT_5(3)
      INTEGER  NT_6(3)

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, IT_4, IT_5, IT_6
      INTEGER  IT_7, BRK_0, BRK_2, BRK_3, IT_8
      INTEGER  IT_9, IT_10, IT_11, IT_12, BRK_4
      INTEGER  IT_13, IT_14, IT_15, IT_16
      INTEGER  switchSCR, BRK_1, IT_17
      REAL     RT_1, RT_2, RT_3, RT_4, RT_5, RT_6
      REAL     RT_7, RT_8, Hnetwork, RT_9, RT_10
      REAL     RT_11, RT_12, Rnetwork, RT_13
      REAL     RT_14, RT_15, RT_16, RT_17, RT_18
      REAL     RT_19, RT_20, RT_21, Fscal, RT_22
      REAL     RT_23, RT_24, RT_25, RT_26, RT_27
      REAL     RT_28, RT_29, RT_30, RT_31, RT_32
      REAL     RT_33, RT_34, RT_35, RT_36
      REAL     Vpu_for_scaling, RT_37, RT_38
      REAL     Vscal, RT_39, RT_40, RT_41, RT_42
      REAL     RT_43, RT_44, RT_45, RT_46, PhOsc
      REAL     RT_47, Vnom_kV, RT_48, RT_49
      REAL     RT_50, RT_51, RT_52, RT_53, RT_54
      REAL     SOURCE_Phs, RT_55, RT_56, RT_57
      REAL     V_POC_kV, RT_58, ph_offset, RT_59
      REAL     RT_60, RT_61, RT_62, Fbase_FreqT
      REAL     RT_63, RT_64, RT_65, RT_66
      REAL     SOURCE_P_HV, SOURCE_Q_HV
      REAL     SOURCE_V_HV

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD2_1(2), RVD1_1, RVD1_2, RVD1_3
      REAL     RVD1_4, RVD1_5, RVD1_6, RVD1_7

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 36
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 154
      NPGB      = NPGB + 1
      INODE     = NNODE + 2
      NNODE     = NNODE + 29
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 39

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 75)
      RT_2     = STOF(ISTOF + 76)
      RT_3     = STOF(ISTOF + 77)
      RT_4     = STOF(ISTOF + 78)
      RT_5     = STOF(ISTOF + 79)
      RT_6     = STOF(ISTOF + 80)
      IT_1     = STOI(ISTOI + 14)
      IT_2     = STOI(ISTOI + 15)
      IT_3     = STOI(ISTOI + 16)
      IT_4     = STOI(ISTOI + 17)
      IT_5     = STOI(ISTOI + 18)
      IT_6     = STOI(ISTOI + 19)
      IT_7     = STOI(ISTOI + 20)
      BRK_0    = STOI(ISTOI + 21)
      RT_7     = STOF(ISTOF + 81)
      BRK_2    = STOI(ISTOI + 22)
      BRK_3    = STOI(ISTOI + 23)
      RT_8     = STOF(ISTOF + 82)
      Hnetwork = STOF(ISTOF + 83)
      RT_9     = STOF(ISTOF + 84)
      RT_10    = STOF(ISTOF + 85)
      RT_11    = STOF(ISTOF + 86)
      RT_12    = STOF(ISTOF + 87)
      Rnetwork = STOF(ISTOF + 88)
      RT_13    = STOF(ISTOF + 89)
      RT_14    = STOF(ISTOF + 90)
      RT_15    = STOF(ISTOF + 91)
      RT_16    = STOF(ISTOF + 92)
      RT_17    = STOF(ISTOF + 93)
      RT_18    = STOF(ISTOF + 94)
      RT_19    = STOF(ISTOF + 95)
      RT_20    = STOF(ISTOF + 96)
      RT_21    = STOF(ISTOF + 97)
      Fscal    = STOF(ISTOF + 98)
      RT_22    = STOF(ISTOF + 99)
      IT_8     = STOI(ISTOI + 24)
      RT_23    = STOF(ISTOF + 100)
      RT_24    = STOF(ISTOF + 101)
      RT_25    = STOF(ISTOF + 102)
      RT_26    = STOF(ISTOF + 103)
      RT_27    = STOF(ISTOF + 104)
      RT_28    = STOF(ISTOF + 105)
      RT_29    = STOF(ISTOF + 106)
      IT_9     = STOI(ISTOI + 25)
      RT_30    = STOF(ISTOF + 107)
      IT_10    = STOI(ISTOI + 26)
      RT_31    = STOF(ISTOF + 108)
      RT_32    = STOF(ISTOF + 109)
      RT_33    = STOF(ISTOF + 110)
      RT_34    = STOF(ISTOF + 111)
      RT_35    = STOF(ISTOF + 112)
      RT_36    = STOF(ISTOF + 113)
      Vpu_for_scaling = STOF(ISTOF + 114)
      RT_37    = STOF(ISTOF + 115)
      RT_38    = STOF(ISTOF + 116)
      IT_11    = STOI(ISTOI + 27)
      Vscal    = STOF(ISTOF + 117)
      RT_39    = STOF(ISTOF + 118)
      RT_40    = STOF(ISTOF + 119)
      IT_12    = STOI(ISTOI + 28)
      RT_41    = STOF(ISTOF + 120)
      RT_42    = STOF(ISTOF + 121)
      RT_43    = STOF(ISTOF + 122)
      RT_44    = STOF(ISTOF + 123)
      RT_45    = STOF(ISTOF + 124)
      RT_46    = STOF(ISTOF + 125)
      PhOsc    = STOF(ISTOF + 126)
      RT_47    = STOF(ISTOF + 127)
      Vnom_kV  = STOF(ISTOF + 128)
      RT_48    = STOF(ISTOF + 129)
      BRK_4    = STOI(ISTOI + 29)
      RT_49    = STOF(ISTOF + 130)
      RT_50    = STOF(ISTOF + 131)
      RT_51    = STOF(ISTOF + 132)
      RT_52    = STOF(ISTOF + 133)
      RT_53    = STOF(ISTOF + 134)
      RT_54    = STOF(ISTOF + 135)
      SOURCE_Phs = STOF(ISTOF + 136)
      RT_55    = STOF(ISTOF + 137)
      RT_56    = STOF(ISTOF + 138)
      IT_13    = STOI(ISTOI + 30)
      RT_57    = STOF(ISTOF + 139)
      IT_14    = STOI(ISTOI + 31)
      V_POC_kV = STOF(ISTOF + 140)
      RT_58    = STOF(ISTOF + 141)
      ph_offset = STOF(ISTOF + 142)
      IT_15    = STOI(ISTOI + 32)
      RT_59    = STOF(ISTOF + 143)
      RT_60    = STOF(ISTOF + 144)
      RT_61    = STOF(ISTOF + 145)
      IT_16    = STOI(ISTOI + 33)
      switchSCR = STOI(ISTOI + 34)
      RT_62    = STOF(ISTOF + 146)
      BRK_1    = STOI(ISTOI + 35)
      Fbase_FreqT = STOF(ISTOF + 147)
      RT_63    = STOF(ISTOF + 148)
      RT_64    = STOF(ISTOF + 149)
      RT_65    = STOF(ISTOF + 150)
      RT_66    = STOF(ISTOF + 151)
      IT_17    = STOI(ISTOI + 36)
      SOURCE_P_HV = STOF(ISTOF + 152)
      SOURCE_Q_HV = STOF(ISTOF + 153)
      SOURCE_V_HV = STOF(ISTOF + 154)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_1(IT_0) = NODE(INODE + 3 + IT_0)
         NT_3(IT_0) = NODE(INODE + 9 + IT_0)
         NT_4(IT_0) = NODE(INODE + 12 + IT_0)
         NT_5(IT_0) = NODE(INODE + 15 + IT_0)
         NT_6(IT_0) = NODE(INODE + 18 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'GridSource.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[gain] Gain Block 
!  Gain
      Vnom_kV = 1.0 * Vbase

! 50:[consti] Integer Constant 
      IT_1 = 1

! 70:[square] Square 
      RT_16 = Vbase * Vbase

! 150:[time-sig] Output of Simulation Time 
      RT_57 = TIME

! 170:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_57,switchTime,1.0,0.0,0.0,RVD2_1)
      RT_56 = RVD2_1(1)

! 180:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_13 = NINT(RT_56)

! 240:[const] Real Constant 
      RT_58 = 0.0

! 250:[const] Real Constant '2*pi'
      RT_8 = 6.2831853

! 270:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_14 = NINT(REAL(enableSecSCR))

! 380:[const] Real Constant 
      RT_24 = 0.0

! 400:[const] Real Constant 
      RT_21 = 1.0

! 470:[time-sig] Output of Simulation Time 
      RT_2 = TIME

! 490:[time-sig] Output of Simulation Time 
      RT_50 = TIME

! 510:[const] Real Constant 
      RT_22 = 1.0

! 550:[time-sig] Output of Simulation Time 
      RT_4 = TIME

! 560:[const] Real Constant 
      RT_39 = 0.0

! 600:[const] Real Constant 
      RT_37 = 1.0

! 630:[time-sig] Output of Simulation Time 
      RT_18 = TIME

! 700:[const] Real Constant 
      RT_34 = 1.0

! 720:[const] Real Constant 
      RT_31 = 0.0

! 770:[const] Real Constant 
      RT_32 = 0.0

! 850:[const] Real Constant 
      RT_59 = 0.0

! 880:[const] Real Constant 
      RT_55 = 0.0

! 970:[time-sig] Output of Simulation Time 
      RT_60 = TIME

! 990:[const] Real Constant 
      RT_41 = 1.0

! 1060:[const] Real Constant 
      RT_45 = 0.0

! 1080:[const] Real Constant 
      RT_63 = 10.0

! 1100:[time-sig] Output of Simulation Time 
      RT_65 = TIME

! 1130:[time-sig] Output of Simulation Time 
      RT_6 = TIME

! 1160:[time-sig] Output of Simulation Time 
      RT_52 = TIME

! 1180:[xy_transfer_function] X-Y transfer function 'PHprofile'
      CALL COMPONENT_ID(ICALL_NO,1827520263)
! File name: testProfiles/PHprofile.txt
      RT_53 = XYFUNC(0,RT_52,1,0.0,0.0,1.0,1.0,0)

! 1210:[mux] 6 Channel Multiplexer 
      IT_2 = 0
      IT_3 = 0
      IT_4 = 0
      IT_5 = 0
      IT_6 = 0
      IT_7 = 0
      IF (mode .EQ. RTCI(NRTCI))   IT_2 = IT_1
      IF (mode .EQ. RTCI(NRTCI+1)) IT_3 = IT_1
      IF (mode .EQ. RTCI(NRTCI+2)) IT_4 = IT_1
      IF (mode .EQ. RTCI(NRTCI+3)) IT_5 = IT_1
      IF (mode .EQ. RTCI(NRTCI+4)) IT_6 = IT_1
      IF (mode .EQ. RTCI(NRTCI+5)) IT_7 = IT_1
      NRTCI = NRTCI + 6

! 1220:[inv] Interpolated Logic Inverter 
      IF (IT_4 .NE. 0) THEN
         BRK_2 = 0
      ELSE
         BRK_2 = 1
      ENDIF

! 1230:[inv] Interpolated Logic Inverter 
      IF (IT_5 .NE. 0) THEN
         BRK_3 = 0
      ELSE
         BRK_3 = 1
      ENDIF

! 1240:[inv] Interpolated Logic Inverter 
      IF (IT_6 .NE. 0) THEN
         BRK_4 = 0
      ELSE
         BRK_4 = 1
      ENDIF

! 1250:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_13 .NE. 0) .AND. (IT_14 .NE. 0) ) THEN
        switchSCR = 1
      ELSE
        switchSCR = 0
      ENDIF

! 1260:[select] Two Input Selector 
      IF (switchSCR .EQ. RTCI(NRTCI)) THEN
         ph_offset = angle_offset
      ELSE
         ph_offset = RT_58
      ENDIF
      NRTCI = NRTCI + 1
!

! 1270:[select] Two Input Selector 
      IF (switchSCR .EQ. RTCI(NRTCI)) THEN
         Vpu_for_scaling = Vpu_new
      ELSE
         Vpu_for_scaling = Vpu
      ENDIF
      NRTCI = NRTCI + 1
!

! 1280:[select] Two Input Selector 
      IF (FprofileOffset .EQ. RTCI(NRTCI)) THEN
         RT_25 = Fbase
      ELSE
         RT_25 = RT_24
      ENDIF
      NRTCI = NRTCI + 1
!

! 1290:[select] Two Input Selector 
      IF (FprofileScal .EQ. RTCI(NRTCI)) THEN
         Fscal = Fbase
      ELSE
         Fscal = RT_21
      ENDIF
      NRTCI = NRTCI + 1
!

! 1300:[XY_profile]  
      CALL XY_profileDyn(RT_1, RT_2, F_X1, F_Y1, F_X2, F_Y2, F_X3, F_Y3,&
     & F_X4, F_Y4, F_X5, F_Y5, F_X6, F_Y6, F_X7, F_Y7, F_X8, F_Y8, F_X9,&
     & F_Y9, F_X10, F_Y10, Fscal, F_N)


! 1310:[xy_transfer_function] X-Y transfer function 'Fprofile'
      CALL COMPONENT_ID(ICALL_NO,270230556)
! File name: testProfiles/Fprofile.txt
      RT_49 = XYFUNC(0,RT_50,0,0.0,0.0,1.0,Fscal,0)

! 1320:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(VprofileScal),RT_39,1.0,0.0,0.0,RVD2_1)
      RT_40 = RVD2_1(1)

! 1330:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_8 = NINT(RT_40)

! 1340:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(VprofileScal),RT_37,1.0,0.0,0.0,RVD2_1)
      RT_38 = RVD2_1(1)

! 1350:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_11 = NINT(RT_38)

! 1360:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(VprofileOffset),RT_34,1.0,0.0,0.0,RVD2_&
     &1)
      RT_35 = RVD2_1(1)

! 1370:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_9 = NINT(RT_35)

! 1380:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(VprofileOffset),RT_32,1.0,0.0,0.0,RVD2_&
     &1)
      RT_33 = RVD2_1(1)

! 1390:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_10 = NINT(RT_33)

! 1400:[modulator] Amplitude/Frequency/Phase Modulator 
! AM/FM/PM MODULATOR
      PhOsc = PhDistMag * SIN(STORF(NSTORF) + RT_55*PI_BY180)
      STORF(NSTORF) = STORF(NSTORF) + TWO_PI*Fdist*DELT
      IF (STORF(NSTORF) .GT.  TWO_PI)  STORF(NSTORF) = STORF(NSTORF) - T&
     &WO_PI
      IF (STORF(NSTORF) .LT. -TWO_PI)  STORF(NSTORF) = STORF(NSTORF) + T&
     &WO_PI
      NSTORF = NSTORF+1
!

! 1410:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_60,OscStartTime,1.0,0.0,0.0,RVD2_1)
      RT_61 = RVD2_1(1)

! 1420:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_16 = NINT(RT_61)

! 1430:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(MagBase),RT_45,1.0,0.0,0.0,RVD2_1)
      RT_46 = RVD2_1(1)

! 1440:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_12 = NINT(RT_46)

! 1450:[sumjct] Summing/Differencing Junctions 
      RT_64 = + OscStartTime + RT_63

! 1460:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_64,RT_65,1.0,0.0,0.0,RVD2_1)
      RT_66 = RVD2_1(1)

! 1470:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_17 = NINT(RT_66)

! 1480:[XY_profile]  
      CALL XY_profileDyn(RT_5, RT_6, PH_X1, PH_Y1, PH_X2, PH_Y2, PH_X3, &
     &PH_Y3, PH_X4, PH_Y4, PH_X5, PH_Y5, PH_X6, PH_Y6, PH_X7, PH_Y7, PH_&
     &X8, PH_Y8, PH_X9, PH_Y9, PH_X10, PH_Y10, 1.0, PH_N)


! 1490:[select] Two Input Selector 
      IF (PHprofileMethod .EQ. RTCI(NRTCI)) THEN
         RT_54 = RT_5
      ELSE
         RT_54 = RT_53
      ENDIF
      NRTCI = NRTCI + 1
!

! 1500:[inv] Interpolated Logic Inverter 
      IF (IT_3 .NE. 0) THEN
         BRK_1 = 0
      ELSE
         BRK_1 = 1
      ENDIF

! 1510:[select] Two Input Selector 
      IF (switchSCR .EQ. RTCI(NRTCI)) THEN
         RT_15 = X_R_new
      ELSE
         RT_15 = X_R
      ENDIF
      NRTCI = NRTCI + 1
!

! 1520:[trig] Trigonometric Functions 
!  Trig-Func
      RT_14 = ATAN(RT_15)
!

! 1530:[select] Two Input Selector 
      IF (switchSCR .EQ. RTCI(NRTCI)) THEN
         RT_7 = Vpu_new
      ELSE
         RT_7 = Vpu
      ENDIF
      NRTCI = NRTCI + 1
!

! 1540:[trig] Trigonometric Functions 
!  Trig-Func
      RT_13 = COS(RT_14)
!

! 1550:[trig] Trigonometric Functions 
!  Trig-Func
      RT_11 = SIN(RT_14)
!

! 1560:[select] Two Input Selector 
      IF (switchSCR .EQ. RTCI(NRTCI)) THEN
         RT_17 = SCL_new
      ELSE
         RT_17 = SCL
      ENDIF
      NRTCI = NRTCI + 1
!

! 1570:[select] Two Input Selector 
      IF (FprofileMethod .EQ. RTCI(NRTCI)) THEN
         RT_26 = RT_1
      ELSE
         RT_26 = RT_49
      ENDIF
      NRTCI = NRTCI + 1
!

! 1580:[sumjct] Summing/Differencing Junctions 
      Fbase_FreqT = + RT_26 + RT_25

! 1590:[select] Two Input Selector 
      IF (IT_8 .EQ. RTCI(NRTCI)) THEN
         RT_23 = Vbase
      ELSE
         RT_23 = RT_22
      ENDIF
      NRTCI = NRTCI + 1
!

! 1600:[mult] Multiplier 
      RT_36 = RT_23 * Vpu_for_scaling

! 1610:[select] Two Input Selector 
      IF (IT_11 .EQ. RTCI(NRTCI)) THEN
         Vscal = RT_36
      ELSE
         Vscal = RT_23
      ENDIF
      NRTCI = NRTCI + 1
!

! 1620:[XY_profile]  
      CALL XY_profileDyn(RT_3, RT_4, V_X1, V_Y1, V_X2, V_Y2, V_X3, V_Y3,&
     & V_X4, V_Y4, V_X5, V_Y5, V_X6, V_Y6, V_X7, V_Y7, V_X8, V_Y8, V_X9,&
     & V_Y9, V_X10, V_Y10, Vscal, V_N)


! 1630:[modulator] Amplitude/Frequency/Phase Modulator 
! AM/FM/PM MODULATOR
      RT_44 = MagDist * SIN(STORF(NSTORF) + PhOsc*PI_BY180)
      STORF(NSTORF) = STORF(NSTORF) + TWO_PI*Fdist*DELT
      IF (STORF(NSTORF) .GT.  TWO_PI)  STORF(NSTORF) = STORF(NSTORF) - T&
     &WO_PI
      IF (STORF(NSTORF) .LT. -TWO_PI)  STORF(NSTORF) = STORF(NSTORF) + T&
     &WO_PI
      NSTORF = NSTORF+1
!

! 1640:[select] Two Input Selector 
      IF (IT_12 .EQ. RTCI(NRTCI)) THEN
         RT_42 = Vpu
      ELSE
         RT_42 = RT_41
      ENDIF
      NRTCI = NRTCI + 1
!

! 1650:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_16 .NE. 0) .AND. (IT_17 .NE. 0) ) THEN
        IT_15 = 1
      ELSE
        IT_15 = 0
      ENDIF

! 1660:[mult] Multiplier 
      V_POC_kV = Vnom_kV * RT_7

! 1670:[div] Divider 
      IF (ABS(RT_17) .LT. 1.0E-100) THEN
         IF (RT_17 .LT. 0.0)  THEN
            RT_12 = -1.0E100 * RT_16
         ELSE
            RT_12 =  1.0E100 * RT_16
         ENDIF
      ELSE
         RT_12 = RT_16 / RT_17
      ENDIF

! 1680:[mult] Multiplier 
      RT_43 = RT_44 * RT_42

! 1690:[mult] Multiplier 
      RT_47 = RT_43 * Vnom_kV

! 1700:[select] Two Input Selector 
      IF (IT_15 .EQ. RTCI(NRTCI)) THEN
         RT_19 = RT_59
      ELSE
         RT_19 = RT_47
      ENDIF
      NRTCI = NRTCI + 1
!

! 1710:[select] Two Input Selector 
      IF (IT_9 .EQ. RTCI(NRTCI)) THEN
         RT_30 = V_POC_kV
      ELSE
         RT_30 = Vnom_kV
      ENDIF
      NRTCI = NRTCI + 1
!

! 1720:[select] Two Input Selector 
      IF (BRK_1 .EQ. RTCI(NRTCI)) THEN
         RT_62 = Fbase
      ELSE
         RT_62 = Fbase_FreqT
      ENDIF
      NRTCI = NRTCI + 1
!

! 1730:[mult] Multiplier 
      RT_9 = RT_11 * RT_12

! 1740:[sumjct] Summing/Differencing Junctions 
      RT_48 = + ph_offset + RT_54

! 1750:[sumjct] Summing/Differencing Junctions 
      RT_20 = + RT_19 + V_POC_kV

! 1760:[select] Two Input Selector 
      IF (IT_10 .EQ. RTCI(NRTCI)) THEN
         RT_28 = RT_30
      ELSE
         RT_28 = RT_31
      ENDIF
      NRTCI = NRTCI + 1
!

! 1770:[xy_transfer_function] X-Y transfer function 'Vprofile'
      CALL COMPONENT_ID(ICALL_NO,976319064)
! File name: testProfiles/Vprofile.txt
      RT_51 = XYFUNC(0,RT_18,0,0.0,0.0,1.0,Vscal,0)

! 1780:[select] Two Input Selector 
      IF (VprofileMethod .EQ. RTCI(NRTCI)) THEN
         RT_27 = RT_3
      ELSE
         RT_27 = RT_51
      ENDIF
      NRTCI = NRTCI + 1
!

! 1790:[sumjct] Summing/Differencing Junctions 
      RT_29 = + RT_27 + RT_28

! 1800:[mult] Multiplier 
      RT_10 = RT_62 * RT_8

! 1810:[div] Divider 
      IF (ABS(RT_10) .LT. 1.0E-100) THEN
         IF (RT_10 .LT. 0.0)  THEN
            Hnetwork = -1.0E100 * RT_9
         ELSE
            Hnetwork =  1.0E100 * RT_9
         ENDIF
      ELSE
         Hnetwork = RT_9 / RT_10
      ENDIF

! 1820:[mult] Multiplier 
      Rnetwork = RT_13 * RT_12

! 1830:[inv] Interpolated Logic Inverter 
      IF (IT_2 .NE. 0) THEN
         BRK_0 = 0
      ELSE
         BRK_0 = 1
      ENDIF

! 1840:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = V_POC_kV
      RVD1_2 = Fbase
      RVD1_3 = RT_48 *PI_BY180
      CALL ESYS651_EXE(SS(1), (IBRCH(1)+13), (IBRCH(1)+14), (IBRCH(1)+15&
     &),0,0,0, SS(1), NT_6(1),NT_6(2),NT_6(3), 0, RVD1_2, RVD1_1, 0.0, 1&
     &.0, 1.0, 1.0,RVD1_3, 1.0,0.02,0.05, 1.0,0.02,0.05, RVD1_4, RVD1_5,&
     & RVD1_6, RVD1_7)

! 1850:[breaker3] 3 Phase Breaker 'BRK_4'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+16),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_4)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+17),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_4)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+18),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_4)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+16),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+17),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+18),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,476039064,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,476039064,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,476039064,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+16),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+17),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+18),SS(1)))

! 1870:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = RT_20
      RVD1_2 = Fbase
      RVD1_3 = ph_offset *PI_BY180
      CALL ESYS651_EXE(SS(1), (IBRCH(1)+25), (IBRCH(1)+26), (IBRCH(1)+27&
     &),0,0,0, SS(1), NT_5(1),NT_5(2),NT_5(3), 0, RVD1_2, RVD1_1, 0.0, 1&
     &.0, 1.0, 1.0,RVD1_3, 1.0,0.02,0.05, 1.0,0.02,0.05, RVD1_4, RVD1_5,&
     & RVD1_6, RVD1_7)

! 1880:[breaker3] 3 Phase Breaker 'BRK_3'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+10),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_3)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+11),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_3)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+12),0.005,1000000.0,RTCF(NRTC&
     &F),0,NINT(1.0-REAL(BRK_3)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+10),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+11),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+12),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,117638274,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,117638274,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,117638274,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+10),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+11),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+12),SS(1)))

! 1890:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = RT_29
      RVD1_2 = Fbase
      RVD1_3 = ph_offset *PI_BY180
      CALL ESYS651_EXE(SS(1), (IBRCH(1)+22), (IBRCH(1)+23), (IBRCH(1)+24&
     &),0,0,0, SS(1), NT_4(1),NT_4(2),NT_4(3), 0, RVD1_2, RVD1_1, 0.0, 1&
     &.0, 1.0, 1.0,RVD1_3, 1.0,0.02,0.05, 1.0,0.02,0.05, RVD1_4, RVD1_5,&
     & RVD1_6, RVD1_7)

! 1900:[breaker3] 3 Phase Breaker 'BRK_2'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+7),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_2)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+8),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_2)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+9),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_2)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+7),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+8),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+9),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1523642552,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1523642552,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1523642552,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+7),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+8),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+9),SS(1)))

! 1910:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = V_POC_kV
      RVD1_2 = Fbase_FreqT
      RVD1_3 = ph_offset *PI_BY180
      CALL ESYS651_EXE(SS(1), (IBRCH(1)+28), (IBRCH(1)+29), (IBRCH(1)+30&
     &),0,0,0, SS(1), NT_1(1),NT_1(2),NT_1(3), 0, RVD1_2, RVD1_1, 0.0, 1&
     &.0, 1.0, 1.0,RVD1_3, 1.0,0.02,0.05, 1.0,0.02,0.05, RVD1_4, RVD1_5,&
     & RVD1_6, RVD1_7)

! 1920:[breaker3] 3 Phase Breaker 'BRK_1'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+1),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_1)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+2),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_1)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+3),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_1)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+1),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1541799691,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1541799691,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1541799691,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+1),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))

! 1930:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1142158678)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+37), 0, Hnetwork, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+38), 0, Hnetwork, 0.0)
      CALL E_VARRLC1_EXE(1 ,SS(1) ,  (IBRCH(1)+39), 0, Hnetwork, 0.0)

! 1940:[varrlc] Variable R, L or C  
      CALL COMPONENT_ID(ICALL_NO,1030324682)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+34), 0, Rnetwork, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+35), 0, Rnetwork, 0.0)
      CALL E_VARRLC1_EXE(0 ,SS(1) ,  (IBRCH(1)+36), 0, Rnetwork, 0.0)

! 1950:[source3] Three Phase Voltage Source Model 1 'Source1'
!  3-Phase source: Source1
      RVD1_1 = V_POC_kV
      RVD1_2 = Fbase
      RVD1_3 = ph_offset *PI_BY180
      CALL ESYS651_EXE(SS(1), (IBRCH(1)+31), (IBRCH(1)+32), (IBRCH(1)+33&
     &),0,0,0, SS(1), NT_3(1),NT_3(2),NT_3(3), 0, RVD1_2, RVD1_1, 0.0, 1&
     &.0, 1.0, 1.0,RVD1_3, 1.0,0.02,0.05, 1.0,0.02,0.05, RVD1_4, RVD1_5,&
     & RVD1_6, RVD1_7)

! 1960:[breaker3] 3 Phase Breaker 'BRK_0'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+4),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_0)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+5),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_0)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+6),0.005,1000000.0,RTCF(NRTCF&
     &),0,NINT(1.0-REAL(BRK_0)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+5),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+6),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,314261440,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,314261440,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,314261440,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+5),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+6),SS(1)))

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 1) = enableSecSCR
      STOF(ISTOF + 1) = Vpu_new
      STOF(ISTOF + 2) = X_R_new
      STOF(ISTOF + 3) = Vbase
      STOF(ISTOF + 4) = switchTime
      STOF(ISTOF + 5) = SCL_new
      STOF(ISTOF + 6) = Vpu
      STOF(ISTOF + 7) = Fbase
      STOF(ISTOF + 8) = X_R
      STOF(ISTOF + 9) = SCL
      STOI(ISTOI + 2) = mode
      STOF(ISTOF + 10) = angle_offset
      STOF(ISTOF + 11) = F_X1
      STOF(ISTOF + 12) = F_Y1
      STOF(ISTOF + 13) = F_Y2
      STOF(ISTOF + 14) = F_Y3
      STOF(ISTOF + 15) = F_Y4
      STOF(ISTOF + 16) = F_Y5
      STOF(ISTOF + 17) = F_Y6
      STOF(ISTOF + 18) = F_Y7
      STOF(ISTOF + 19) = F_Y8
      STOF(ISTOF + 20) = F_Y9
      STOF(ISTOF + 21) = F_X2
      STOF(ISTOF + 22) = F_X3
      STOI(ISTOI + 3) = FprofileMethod
      STOF(ISTOF + 23) = F_X4
      STOF(ISTOF + 24) = F_X5
      STOF(ISTOF + 25) = F_X6
      STOF(ISTOF + 26) = F_X7
      STOF(ISTOF + 27) = F_X8
      STOF(ISTOF + 28) = F_X9
      STOF(ISTOF + 29) = F_X10
      STOF(ISTOF + 30) = F_Y10
      STOI(ISTOI + 4) = FprofileScal
      STOI(ISTOI + 5) = FprofileOffset
      STOI(ISTOI + 6) = F_N
      STOF(ISTOF + 31) = V_Y1
      STOI(ISTOI + 7) = VprofileMethod
      STOF(ISTOF + 32) = V_Y2
      STOF(ISTOF + 33) = V_Y3
      STOF(ISTOF + 34) = V_Y4
      STOF(ISTOF + 35) = V_Y5
      STOF(ISTOF + 36) = V_Y6
      STOF(ISTOF + 37) = V_Y7
      STOF(ISTOF + 38) = V_Y8
      STOF(ISTOF + 39) = V_Y9
      STOF(ISTOF + 40) = V_Y10
      STOF(ISTOF + 41) = V_X1
      STOF(ISTOF + 42) = V_X2
      STOF(ISTOF + 43) = V_X3
      STOF(ISTOF + 44) = V_X4
      STOF(ISTOF + 45) = V_X5
      STOF(ISTOF + 46) = V_X6
      STOF(ISTOF + 47) = V_X7
      STOF(ISTOF + 48) = V_X8
      STOF(ISTOF + 49) = V_X9
      STOF(ISTOF + 50) = V_X10
      STOI(ISTOI + 8) = VprofileScal
      STOI(ISTOI + 9) = VprofileOffset
      STOI(ISTOI + 10) = V_N
      STOF(ISTOF + 51) = MagDist
      STOF(ISTOF + 52) = Fdist
      STOI(ISTOI + 11) = MagBase
      STOF(ISTOF + 53) = PhDistMag
      STOF(ISTOF + 54) = OscStartTime
      STOF(ISTOF + 55) = PH_Y1
      STOI(ISTOI + 12) = PHprofileMethod
      STOF(ISTOF + 56) = PH_Y2
      STOF(ISTOF + 57) = PH_Y3
      STOF(ISTOF + 58) = PH_Y4
      STOF(ISTOF + 59) = PH_Y5
      STOF(ISTOF + 60) = PH_Y6
      STOF(ISTOF + 61) = PH_Y7
      STOF(ISTOF + 62) = PH_Y8
      STOF(ISTOF + 63) = PH_Y9
      STOF(ISTOF + 64) = PH_Y10
      STOF(ISTOF + 65) = PH_X1
      STOF(ISTOF + 66) = PH_X2
      STOF(ISTOF + 67) = PH_X3
      STOF(ISTOF + 68) = PH_X4
      STOF(ISTOF + 69) = PH_X5
      STOF(ISTOF + 70) = PH_X6
      STOF(ISTOF + 71) = PH_X7
      STOF(ISTOF + 72) = PH_X8
      STOF(ISTOF + 73) = PH_X9
      STOF(ISTOF + 74) = PH_X10
      STOI(ISTOI + 13) = PH_N
      STOF(ISTOF + 75) = RT_1
      STOF(ISTOF + 76) = RT_2
      STOF(ISTOF + 77) = RT_3
      STOF(ISTOF + 78) = RT_4
      STOF(ISTOF + 79) = RT_5
      STOF(ISTOF + 80) = RT_6
      STOI(ISTOI + 14) = IT_1
      STOI(ISTOI + 15) = IT_2
      STOI(ISTOI + 16) = IT_3
      STOI(ISTOI + 17) = IT_4
      STOI(ISTOI + 18) = IT_5
      STOI(ISTOI + 19) = IT_6
      STOI(ISTOI + 20) = IT_7
      STOI(ISTOI + 21) = BRK_0
      STOF(ISTOF + 81) = RT_7
      STOI(ISTOI + 22) = BRK_2
      STOI(ISTOI + 23) = BRK_3
      STOF(ISTOF + 82) = RT_8
      STOF(ISTOF + 83) = Hnetwork
      STOF(ISTOF + 84) = RT_9
      STOF(ISTOF + 85) = RT_10
      STOF(ISTOF + 86) = RT_11
      STOF(ISTOF + 87) = RT_12
      STOF(ISTOF + 88) = Rnetwork
      STOF(ISTOF + 89) = RT_13
      STOF(ISTOF + 90) = RT_14
      STOF(ISTOF + 91) = RT_15
      STOF(ISTOF + 92) = RT_16
      STOF(ISTOF + 93) = RT_17
      STOF(ISTOF + 94) = RT_18
      STOF(ISTOF + 95) = RT_19
      STOF(ISTOF + 96) = RT_20
      STOF(ISTOF + 97) = RT_21
      STOF(ISTOF + 98) = Fscal
      STOF(ISTOF + 99) = RT_22
      STOI(ISTOI + 24) = IT_8
      STOF(ISTOF + 100) = RT_23
      STOF(ISTOF + 101) = RT_24
      STOF(ISTOF + 102) = RT_25
      STOF(ISTOF + 103) = RT_26
      STOF(ISTOF + 104) = RT_27
      STOF(ISTOF + 105) = RT_28
      STOF(ISTOF + 106) = RT_29
      STOI(ISTOI + 25) = IT_9
      STOF(ISTOF + 107) = RT_30
      STOI(ISTOI + 26) = IT_10
      STOF(ISTOF + 108) = RT_31
      STOF(ISTOF + 109) = RT_32
      STOF(ISTOF + 110) = RT_33
      STOF(ISTOF + 111) = RT_34
      STOF(ISTOF + 112) = RT_35
      STOF(ISTOF + 113) = RT_36
      STOF(ISTOF + 114) = Vpu_for_scaling
      STOF(ISTOF + 115) = RT_37
      STOF(ISTOF + 116) = RT_38
      STOI(ISTOI + 27) = IT_11
      STOF(ISTOF + 117) = Vscal
      STOF(ISTOF + 118) = RT_39
      STOF(ISTOF + 119) = RT_40
      STOI(ISTOI + 28) = IT_12
      STOF(ISTOF + 120) = RT_41
      STOF(ISTOF + 121) = RT_42
      STOF(ISTOF + 122) = RT_43
      STOF(ISTOF + 123) = RT_44
      STOF(ISTOF + 124) = RT_45
      STOF(ISTOF + 125) = RT_46
      STOF(ISTOF + 126) = PhOsc
      STOF(ISTOF + 127) = RT_47
      STOF(ISTOF + 128) = Vnom_kV
      STOF(ISTOF + 129) = RT_48
      STOI(ISTOI + 29) = BRK_4
      STOF(ISTOF + 130) = RT_49
      STOF(ISTOF + 131) = RT_50
      STOF(ISTOF + 132) = RT_51
      STOF(ISTOF + 133) = RT_52
      STOF(ISTOF + 134) = RT_53
      STOF(ISTOF + 135) = RT_54
      STOF(ISTOF + 136) = SOURCE_Phs
      STOF(ISTOF + 137) = RT_55
      STOF(ISTOF + 138) = RT_56
      STOI(ISTOI + 30) = IT_13
      STOF(ISTOF + 139) = RT_57
      STOI(ISTOI + 31) = IT_14
      STOF(ISTOF + 140) = V_POC_kV
      STOF(ISTOF + 141) = RT_58
      STOF(ISTOF + 142) = ph_offset
      STOI(ISTOI + 32) = IT_15
      STOF(ISTOF + 143) = RT_59
      STOF(ISTOF + 144) = RT_60
      STOF(ISTOF + 145) = RT_61
      STOI(ISTOI + 33) = IT_16
      STOI(ISTOI + 34) = switchSCR
      STOF(ISTOF + 146) = RT_62
      STOI(ISTOI + 35) = BRK_1
      STOF(ISTOF + 147) = Fbase_FreqT
      STOF(ISTOF + 148) = RT_63
      STOF(ISTOF + 149) = RT_64
      STOF(ISTOF + 150) = RT_65
      STOF(ISTOF + 151) = RT_66
      STOI(ISTOI + 36) = IT_17
      STOF(ISTOF + 152) = SOURCE_P_HV
      STOF(ISTOF + 153) = SOURCE_Q_HV
      STOF(ISTOF + 154) = SOURCE_V_HV


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE GridSourceOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
      REAL    EMTDC_VVDC    ! 
!     SUBR    MPHASE3PS     ! Phase Measurement in a 3p signal
!     SUBR    XY_profileOut  ! 
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  NT_7(3)

! Control Signals
      INTEGER  IT_1
      REAL     RT_8, RT_21, RT_22, RT_24, RT_31
      REAL     RT_32, RT_34, RT_37, RT_39, RT_41
      REAL     RT_45, SOURCE_Phs, RT_55, RT_58
      REAL     RT_59, RT_63, SOURCE_P_HV
      REAL     SOURCE_Q_HV, SOURCE_V_HV

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 1
      INODE     = NNODE + 2
      NNODE     = NNODE + 29
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 39

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      IT_1     = STOI(ISTOI + 14)
      RT_8     = STOF(ISTOF + 82)
      RT_21    = STOF(ISTOF + 97)
      RT_22    = STOF(ISTOF + 99)
      RT_24    = STOF(ISTOF + 101)
      RT_31    = STOF(ISTOF + 108)
      RT_32    = STOF(ISTOF + 109)
      RT_34    = STOF(ISTOF + 111)
      RT_37    = STOF(ISTOF + 115)
      RT_39    = STOF(ISTOF + 118)
      RT_41    = STOF(ISTOF + 120)
      RT_45    = STOF(ISTOF + 124)
      SOURCE_Phs = STOF(ISTOF + 136)
      RT_55    = STOF(ISTOF + 137)
      RT_58    = STOF(ISTOF + 141)
      RT_59    = STOF(ISTOF + 143)
      RT_63    = STOF(ISTOF + 148)
      SOURCE_P_HV = STOF(ISTOF + 152)
      SOURCE_Q_HV = STOF(ISTOF + 153)
      SOURCE_V_HV = STOF(ISTOF + 154)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_7(IT_0) = NODE(INODE + 21 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'GridSource.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 50:[consti] Integer Constant 

      IT_1 = 1

! 240:[const] Real Constant 

      RT_58 = 0.0

! 250:[const] Real Constant '2*pi'

      RT_8 = 6.2831853

! 380:[const] Real Constant 

      RT_24 = 0.0

! 400:[const] Real Constant 

      RT_21 = 1.0

! 510:[const] Real Constant 

      RT_22 = 1.0

! 560:[const] Real Constant 

      RT_39 = 0.0

! 600:[const] Real Constant 

      RT_37 = 1.0

! 700:[const] Real Constant 

      RT_34 = 1.0

! 720:[const] Real Constant 

      RT_31 = 0.0

! 770:[const] Real Constant 

      RT_32 = 0.0

! 850:[const] Real Constant 

      RT_59 = 0.0

! 880:[const] Real Constant 

      RT_55 = 0.0

! 990:[const] Real Constant 

      RT_41 = 1.0

! 1060:[const] Real Constant 

      RT_45 = 0.0

! 1080:[const] Real Constant 

      RT_63 = 10.0

! 1190:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+19), (IBRCH(1)+20),&
     & (IBRCH(1)+21),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,970770654,RVD1_1,"Pd")
      SOURCE_P_HV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+19), (IBRCH(1)+20),&
     & (IBRCH(1)+21),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,970770654,RVD1_1,"Qd")
      SOURCE_Q_HV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_7(1),NT_7(2),NT_7(3),RTCF(IVD1_1+3),1.&
     &0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,970770654,RVD1_1,"Vd")
      SOURCE_V_HV = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(1), NT_7(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_7(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_7(3), 0)
      CALL MPHASE3PS(1, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      SOURCE_Phs = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,970770654,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,970770654,1,"hide2")
      ENDIF

! 1300:[XY_profile]  
      CALL XY_profileOut()


! 1480:[XY_profile]  
      CALL XY_profileOut()


! 1620:[XY_profile]  
      CALL XY_profileOut()


! 1850:[breaker3] 3 Phase Breaker 'BRK_4'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+16), (IBRCH(1)+17), (IBRCH(1)+18),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1860:[pgb] Output Channel 'phAngSource'

      PGB(IPGB+1) = SOURCE_Phs

! 1880:[breaker3] 3 Phase Breaker 'BRK_3'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+10), (IBRCH(1)+11), (IBRCH(1)+12),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1900:[breaker3] 3 Phase Breaker 'BRK_2'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (IBRCH(1)+9),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1920:[breaker3] 3 Phase Breaker 'BRK_1'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (IBRCH(1)+3),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1960:[breaker3] 3 Phase Breaker 'BRK_0'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (IBRCH(1)+6),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 14) = IT_1
      STOF(ISTOF + 82) = RT_8
      STOF(ISTOF + 97) = RT_21
      STOF(ISTOF + 99) = RT_22
      STOF(ISTOF + 101) = RT_24
      STOF(ISTOF + 108) = RT_31
      STOF(ISTOF + 109) = RT_32
      STOF(ISTOF + 111) = RT_34
      STOF(ISTOF + 115) = RT_37
      STOF(ISTOF + 118) = RT_39
      STOF(ISTOF + 120) = RT_41
      STOF(ISTOF + 124) = RT_45
      STOF(ISTOF + 136) = SOURCE_Phs
      STOF(ISTOF + 137) = RT_55
      STOF(ISTOF + 141) = RT_58
      STOF(ISTOF + 143) = RT_59
      STOF(ISTOF + 148) = RT_63
      STOF(ISTOF + 152) = SOURCE_P_HV
      STOF(ISTOF + 153) = SOURCE_Q_HV
      STOF(ISTOF + 154) = SOURCE_V_HV


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE GridSourceDyn_Begin(enableSecSCR, Vpu_new, X_R_new,    &
     &   switchTime, SCL_new, Vpu, mode, angle_offset, F_X1, F_Y1,      &
     &   F_Y2, F_Y3, F_Y4, F_Y5, F_Y6, F_Y7, F_Y8, F_Y9, F_X2, F_X3,    &
     &   FprofileMethod, F_X4, F_X5, F_X6, F_X7, F_X8, F_X9, F_X10,     &
     &   F_Y10, FprofileScal, FprofileOffset, F_N, V_Y1,                &
     &   VprofileMethod, V_Y2, V_Y3, V_Y4, V_Y5, V_Y6, V_Y7, V_Y8,      &
     &   V_Y9, V_Y10, V_X1, V_X2, V_X3, V_X4, V_X5, V_X6, V_X7, V_X8,   &
     &   V_X9, V_X10, VprofileScal, VprofileOffset, V_N, MagDist,       &
     &   Fdist, MagBase, PhDistMag, OscStartTime, PH_Y1,                &
     &   PHprofileMethod, PH_Y2, PH_Y3, PH_Y4, PH_Y5, PH_Y6, PH_Y7,     &
     &   PH_Y8, PH_Y9, PH_Y10, PH_X1, PH_X2, PH_X3, PH_X4, PH_X5,       &
     &   PH_X6, PH_X7, PH_X8, PH_X9, PH_X10, PH_N)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    XY_profileDyn_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: enableSecSCR, mode
      INTEGER, INTENT(IN)  :: FprofileMethod
      INTEGER, INTENT(IN)  :: FprofileScal
      INTEGER, INTENT(IN)  :: FprofileOffset, F_N
      INTEGER, INTENT(IN)  :: VprofileMethod
      INTEGER, INTENT(IN)  :: VprofileScal
      INTEGER, INTENT(IN)  :: VprofileOffset, V_N
      INTEGER, INTENT(IN)  :: MagBase
      INTEGER, INTENT(IN)  :: PHprofileMethod
      INTEGER, INTENT(IN)  :: PH_N
      REAL,    INTENT(IN)  :: Vpu_new, X_R_new
      REAL,    INTENT(IN)  :: switchTime, SCL_new
      REAL,    INTENT(IN)  :: Vpu, angle_offset
      REAL,    INTENT(IN)  :: F_X1, F_Y1, F_Y2
      REAL,    INTENT(IN)  :: F_Y3, F_Y4, F_Y5
      REAL,    INTENT(IN)  :: F_Y6, F_Y7, F_Y8
      REAL,    INTENT(IN)  :: F_Y9, F_X2, F_X3
      REAL,    INTENT(IN)  :: F_X4, F_X5, F_X6
      REAL,    INTENT(IN)  :: F_X7, F_X8, F_X9
      REAL,    INTENT(IN)  :: F_X10, F_Y10, V_Y1
      REAL,    INTENT(IN)  :: V_Y2, V_Y3, V_Y4
      REAL,    INTENT(IN)  :: V_Y5, V_Y6, V_Y7
      REAL,    INTENT(IN)  :: V_Y8, V_Y9, V_Y10
      REAL,    INTENT(IN)  :: V_X1, V_X2, V_X3
      REAL,    INTENT(IN)  :: V_X4, V_X5, V_X6
      REAL,    INTENT(IN)  :: V_X7, V_X8, V_X9
      REAL,    INTENT(IN)  :: V_X10, MagDist
      REAL,    INTENT(IN)  :: Fdist, PhDistMag
      REAL,    INTENT(IN)  :: OscStartTime, PH_Y1
      REAL,    INTENT(IN)  :: PH_Y2, PH_Y3, PH_Y4
      REAL,    INTENT(IN)  :: PH_Y5, PH_Y6, PH_Y7
      REAL,    INTENT(IN)  :: PH_Y8, PH_Y9
      REAL,    INTENT(IN)  :: PH_Y10, PH_X1
      REAL,    INTENT(IN)  :: PH_X2, PH_X3, PH_X4
      REAL,    INTENT(IN)  :: PH_X5, PH_X6, PH_X7
      REAL,    INTENT(IN)  :: PH_X8, PH_X9
      REAL,    INTENT(IN)  :: PH_X10

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1
      REAL     RT_8, RT_21, RT_22, RT_24, RT_31
      REAL     RT_32, RT_34, RT_37, RT_39, RT_41
      REAL     RT_45, RT_55, RT_58, RT_59, RT_63

! Internal Variables
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 29
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 39

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[gain] Gain Block 

! 50:[consti] Integer Constant 
      IT_1 = 1

! 70:[square] Square 

! 150:[time-sig] Output of Simulation Time 

! 170:[compar] Two Input Comparator 

! 180:[unity] Type/Shape conversion block 

! 240:[const] Real Constant 
      RT_58 = 0.0

! 250:[const] Real Constant '2*pi'
      RT_8 = 6.2831853

! 270:[unity] Type/Shape conversion block 

! 380:[const] Real Constant 
      RT_24 = 0.0

! 400:[const] Real Constant 
      RT_21 = 1.0

! 470:[time-sig] Output of Simulation Time 

! 490:[time-sig] Output of Simulation Time 

! 510:[const] Real Constant 
      RT_22 = 1.0

! 550:[time-sig] Output of Simulation Time 

! 560:[const] Real Constant 
      RT_39 = 0.0

! 600:[const] Real Constant 
      RT_37 = 1.0

! 630:[time-sig] Output of Simulation Time 

! 700:[const] Real Constant 
      RT_34 = 1.0

! 720:[const] Real Constant 
      RT_31 = 0.0

! 770:[const] Real Constant 
      RT_32 = 0.0

! 850:[const] Real Constant 
      RT_59 = 0.0

! 880:[const] Real Constant 
      RT_55 = 0.0

! 970:[time-sig] Output of Simulation Time 

! 990:[const] Real Constant 
      RT_41 = 1.0

! 1060:[const] Real Constant 
      RT_45 = 0.0

! 1080:[const] Real Constant 
      RT_63 = 10.0

! 1100:[time-sig] Output of Simulation Time 

! 1130:[time-sig] Output of Simulation Time 

! 1160:[time-sig] Output of Simulation Time 

! 1180:[xy_transfer_function] X-Y transfer function 'PHprofile'

! 1210:[mux] 6 Channel Multiplexer 
      RTCI(NRTCI)   = 0
      RTCI(NRTCI+1) = 1
      RTCI(NRTCI+2) = 2
      RTCI(NRTCI+3) = 3
      RTCI(NRTCI+4) = 4
      RTCI(NRTCI+5) = 5
      NRTCI = NRTCI + 6

! 1220:[inv] Interpolated Logic Inverter 

! 1230:[inv] Interpolated Logic Inverter 

! 1240:[inv] Interpolated Logic Inverter 

! 1260:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1270:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1280:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1290:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1300:[XY_profile]  
      CALL XY_profileDyn_Begin()


! 1310:[xy_transfer_function] X-Y transfer function 'Fprofile'

! 1320:[compar] Two Input Comparator 

! 1330:[unity] Type/Shape conversion block 

! 1340:[compar] Two Input Comparator 

! 1350:[unity] Type/Shape conversion block 

! 1360:[compar] Two Input Comparator 

! 1370:[unity] Type/Shape conversion block 

! 1380:[compar] Two Input Comparator 

! 1390:[unity] Type/Shape conversion block 

! 1400:[modulator] Amplitude/Frequency/Phase Modulator 

! 1410:[compar] Two Input Comparator 

! 1420:[unity] Type/Shape conversion block 

! 1430:[compar] Two Input Comparator 

! 1440:[unity] Type/Shape conversion block 

! 1450:[sumjct] Summing/Differencing Junctions 

! 1460:[compar] Two Input Comparator 

! 1470:[unity] Type/Shape conversion block 

! 1480:[XY_profile]  
      CALL XY_profileDyn_Begin()


! 1490:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1500:[inv] Interpolated Logic Inverter 

! 1510:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1520:[trig] Trigonometric Functions 

! 1530:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1540:[trig] Trigonometric Functions 

! 1550:[trig] Trigonometric Functions 

! 1560:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1570:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1580:[sumjct] Summing/Differencing Junctions 

! 1590:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1600:[mult] Multiplier 

! 1610:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1620:[XY_profile]  
      CALL XY_profileDyn_Begin()


! 1630:[modulator] Amplitude/Frequency/Phase Modulator 

! 1640:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1660:[mult] Multiplier 

! 1670:[div] Divider 

! 1680:[mult] Multiplier 

! 1690:[mult] Multiplier 

! 1700:[select] Two Input Selector 
      RTCI(NRTCI) = 0
      NRTCI = NRTCI + 1

! 1710:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1720:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1730:[mult] Multiplier 

! 1740:[sumjct] Summing/Differencing Junctions 

! 1750:[sumjct] Summing/Differencing Junctions 

! 1760:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1770:[xy_transfer_function] X-Y transfer function 'Vprofile'

! 1780:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 1790:[sumjct] Summing/Differencing Junctions 

! 1800:[mult] Multiplier 

! 1810:[div] Divider 

! 1820:[mult] Multiplier 

! 1830:[inv] Interpolated Logic Inverter 

! 1840:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,991360484)
      RVD1_1 = 1.0
      RVD1_2 = 0.1
      CALL ESYS651_CFG(3,1,1,0,0,SS(1), (IBRCH(1)+13), (IBRCH(1)+14), (I&
     &BRCH(1)+15),0,0,0, 60.0,60.0,0.0,230.0,0.0,0.0,10000.0,230.0, 230.&
     &0, 0.001, 0.0, 2.0, 1.0,1.0,0.1, 1.0,80.0,1.0,0.1)

! 1850:[breaker3] 3 Phase Breaker 'BRK_4'
      CALL COMPONENT_ID(ICALL_NO,476039064)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1870:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,1561051492)
      RVD1_1 = 1.0
      RVD1_2 = 0.1
      CALL ESYS651_CFG(3,1,1,0,0,SS(1), (IBRCH(1)+25), (IBRCH(1)+26), (I&
     &BRCH(1)+27),0,0,0, 60.0,60.0,0.0,230.0,0.0,0.0,100000.0,230.0, 230&
     &.0, 0.001, 0.0, 2.0, 1.0,1.0,0.1, 1.0,80.0,1.0,0.1)

! 1880:[breaker3] 3 Phase Breaker 'BRK_3'
      CALL COMPONENT_ID(ICALL_NO,117638274)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1890:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,869391068)
      RVD1_1 = 1.0
      RVD1_2 = 0.1
      CALL ESYS651_CFG(3,1,1,0,0,SS(1), (IBRCH(1)+22), (IBRCH(1)+23), (I&
     &BRCH(1)+24),0,0,0, 60.0,60.0,0.0,230.0,0.0,0.0,10000.0,230.0, 230.&
     &0, 0.001, 0.0, 2.0, 1.0,1.0,0.1, 1.0,80.0,1.0,0.1)

! 1900:[breaker3] 3 Phase Breaker 'BRK_2'
      CALL COMPONENT_ID(ICALL_NO,1523642552)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1910:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,141470936)
      RVD1_1 = 1.0
      RVD1_2 = 0.1
      CALL ESYS651_CFG(3,1,1,0,0,SS(1), (IBRCH(1)+28), (IBRCH(1)+29), (I&
     &BRCH(1)+30),0,0,0, 60.0,60.0,0.0,230.0,0.0,0.0,10000.0,230.0, 230.&
     &0, 0.001, 0.0, 2.0, 1.0,1.0,0.1, 1.0,80.0,1.0,0.1)

! 1920:[breaker3] 3 Phase Breaker 'BRK_1'
      CALL COMPONENT_ID(ICALL_NO,1541799691)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1930:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+37), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+38), 0)
      CALL E_VARRLC1_CFG(1 ,SS(1) ,  (IBRCH(1)+39), 0)

! 1940:[varrlc] Variable R, L or C  
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+34), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+35), 0)
      CALL E_VARRLC1_CFG(0 ,SS(1) ,  (IBRCH(1)+36), 0)

! 1950:[source3] Three Phase Voltage Source Model 1 'Source1'
      CALL COMPONENT_ID(ICALL_NO,1768243747)
      RVD1_1 = 1.0
      RVD1_2 = 0.1
      CALL ESYS651_CFG(3,1,1,0,0,SS(1), (IBRCH(1)+31), (IBRCH(1)+32), (I&
     &BRCH(1)+33),0,0,0, 60.0,60.0,0.0,230.0,0.0,0.0,10000.0,230.0, 230.&
     &0, 0.001, 0.0, 2.0, 1.0,1.0,0.1, 1.0,80.0,1.0,0.1)

! 1960:[breaker3] 3 Phase Breaker 'BRK_0'
      CALL COMPONENT_ID(ICALL_NO,314261440)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

      RETURN
      END

!=======================================================================

      SUBROUTINE GridSourceOut_Begin(enableSecSCR, Vpu_new, X_R_new,    &
     &   switchTime, SCL_new, Vpu, mode, angle_offset, F_X1, F_Y1,      &
     &   F_Y2, F_Y3, F_Y4, F_Y5, F_Y6, F_Y7, F_Y8, F_Y9, F_X2, F_X3,    &
     &   FprofileMethod, F_X4, F_X5, F_X6, F_X7, F_X8, F_X9, F_X10,     &
     &   F_Y10, FprofileScal, FprofileOffset, F_N, V_Y1,                &
     &   VprofileMethod, V_Y2, V_Y3, V_Y4, V_Y5, V_Y6, V_Y7, V_Y8,      &
     &   V_Y9, V_Y10, V_X1, V_X2, V_X3, V_X4, V_X5, V_X6, V_X7, V_X8,   &
     &   V_X9, V_X10, VprofileScal, VprofileOffset, V_N, MagDist,       &
     &   Fdist, MagBase, PhDistMag, OscStartTime, PH_Y1,                &
     &   PHprofileMethod, PH_Y2, PH_Y3, PH_Y4, PH_Y5, PH_Y6, PH_Y7,     &
     &   PH_Y8, PH_Y9, PH_Y10, PH_X1, PH_X2, PH_X3, PH_X4, PH_X5,       &
     &   PH_X6, PH_X7, PH_X8, PH_X9, PH_X10, PH_N)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    XY_profileOut_Begin  ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: enableSecSCR, mode
      INTEGER, INTENT(IN)  :: FprofileMethod
      INTEGER, INTENT(IN)  :: FprofileScal
      INTEGER, INTENT(IN)  :: FprofileOffset, F_N
      INTEGER, INTENT(IN)  :: VprofileMethod
      INTEGER, INTENT(IN)  :: VprofileScal
      INTEGER, INTENT(IN)  :: VprofileOffset, V_N
      INTEGER, INTENT(IN)  :: MagBase
      INTEGER, INTENT(IN)  :: PHprofileMethod
      INTEGER, INTENT(IN)  :: PH_N
      REAL,    INTENT(IN)  :: Vpu_new, X_R_new
      REAL,    INTENT(IN)  :: switchTime, SCL_new
      REAL,    INTENT(IN)  :: Vpu, angle_offset
      REAL,    INTENT(IN)  :: F_X1, F_Y1, F_Y2
      REAL,    INTENT(IN)  :: F_Y3, F_Y4, F_Y5
      REAL,    INTENT(IN)  :: F_Y6, F_Y7, F_Y8
      REAL,    INTENT(IN)  :: F_Y9, F_X2, F_X3
      REAL,    INTENT(IN)  :: F_X4, F_X5, F_X6
      REAL,    INTENT(IN)  :: F_X7, F_X8, F_X9
      REAL,    INTENT(IN)  :: F_X10, F_Y10, V_Y1
      REAL,    INTENT(IN)  :: V_Y2, V_Y3, V_Y4
      REAL,    INTENT(IN)  :: V_Y5, V_Y6, V_Y7
      REAL,    INTENT(IN)  :: V_Y8, V_Y9, V_Y10
      REAL,    INTENT(IN)  :: V_X1, V_X2, V_X3
      REAL,    INTENT(IN)  :: V_X4, V_X5, V_X6
      REAL,    INTENT(IN)  :: V_X7, V_X8, V_X9
      REAL,    INTENT(IN)  :: V_X10, MagDist
      REAL,    INTENT(IN)  :: Fdist, PhDistMag
      REAL,    INTENT(IN)  :: OscStartTime, PH_Y1
      REAL,    INTENT(IN)  :: PH_Y2, PH_Y3, PH_Y4
      REAL,    INTENT(IN)  :: PH_Y5, PH_Y6, PH_Y7
      REAL,    INTENT(IN)  :: PH_Y8, PH_Y9
      REAL,    INTENT(IN)  :: PH_Y10, PH_X1
      REAL,    INTENT(IN)  :: PH_X2, PH_X3, PH_X4
      REAL,    INTENT(IN)  :: PH_X5, PH_X6, PH_X7
      REAL,    INTENT(IN)  :: PH_X8, PH_X9
      REAL,    INTENT(IN)  :: PH_X10

! Electrical Node Indices
      INTEGER  NT_7(3)

! Control Signals
      INTEGER  IT_1
      REAL     RT_8, RT_21, RT_22, RT_24, RT_31
      REAL     RT_32, RT_34, RT_37, RT_39, RT_41
      REAL     RT_45, RT_55, RT_58, RT_59, RT_63

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 29
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 39

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


! Array (1:3) quantities...
      DO IT_0 = 1,3
         NT_7(IT_0) = NODE(INODE + 21 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 50:[consti] Integer Constant 
      IT_1 = 1

! 240:[const] Real Constant 
      RT_58 = 0.0

! 250:[const] Real Constant '2*pi'
      RT_8 = 6.2831853

! 380:[const] Real Constant 
      RT_24 = 0.0

! 400:[const] Real Constant 
      RT_21 = 1.0

! 510:[const] Real Constant 
      RT_22 = 1.0

! 560:[const] Real Constant 
      RT_39 = 0.0

! 600:[const] Real Constant 
      RT_37 = 1.0

! 700:[const] Real Constant 
      RT_34 = 1.0

! 720:[const] Real Constant 
      RT_31 = 0.0

! 770:[const] Real Constant 
      RT_32 = 0.0

! 850:[const] Real Constant 
      RT_59 = 0.0

! 880:[const] Real Constant 
      RT_55 = 0.0

! 990:[const] Real Constant 
      RT_41 = 1.0

! 1060:[const] Real Constant 
      RT_45 = 0.0

! 1080:[const] Real Constant 
      RT_63 = 10.0

! 1190:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(220.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(220.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.004
      RTCF(IVD1_1+3) = 50.0

! 1300:[XY_profile]  
      CALL XY_profileOut_Begin()


! 1480:[XY_profile]  
      CALL XY_profileOut_Begin()


! 1620:[XY_profile]  
      CALL XY_profileOut_Begin()


! 1860:[pgb] Output Channel 'phAngSource'

      RETURN
      END

