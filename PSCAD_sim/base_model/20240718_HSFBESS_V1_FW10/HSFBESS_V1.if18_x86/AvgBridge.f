!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : AvgBridge
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE AvgBridgeDyn(EnaPWM, DuCy)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      REAL,    INTENT(IN)  :: EnaPWM, DuCy(3)

! Electrical Node Indices

! Control Signals
      LOGICAL  LT_1
      INTEGER  EnaPWM_
      REAL     RT_1, Vdcl, RT_2, RT_3, RT_4, Va
      REAL     RT_5, RT_6, RT_7, RT_8, Ic, RT_9
      REAL     RT_10, Ib, RT_11, RT_12, Ia, RT_13
      REAL     idc, Vb, Vc

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, IT_0           ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOL     = NSTOL
      NSTOL     = NSTOL + 1
      ISTOI     = NSTOI
      NSTOI     = NSTOI + 1
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 25
      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 17

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 5)
      Vdcl     = STOF(ISTOF + 6)
      RT_2     = STOF(ISTOF + 7)
      RT_3     = STOF(ISTOF + 8)
      RT_4     = STOF(ISTOF + 9)
      Va       = STOF(ISTOF + 10)
      LT_1     = STOL(ISTOL + 1)
      EnaPWM_  = STOI(ISTOI + 1)
      RT_5     = STOF(ISTOF + 11)
      RT_6     = STOF(ISTOF + 12)
      RT_7     = STOF(ISTOF + 13)
      RT_8     = STOF(ISTOF + 14)
      Ic       = STOF(ISTOF + 15)
      RT_9     = STOF(ISTOF + 16)
      RT_10    = STOF(ISTOF + 17)
      Ib       = STOF(ISTOF + 18)
      RT_11    = STOF(ISTOF + 19)
      RT_12    = STOF(ISTOF + 20)
      Ia       = STOF(ISTOF + 21)
      RT_13    = STOF(ISTOF + 22)
      idc      = STOF(ISTOF + 23)
      Vb       = STOF(ISTOF + 24)
      Vc       = STOF(ISTOF + 25)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'AvgBridge.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 60:[unity] Type/Shape conversion block 
! real -> logical
      LT_1 = E_RtoB(EnaPWM)

! 70:[inv] Interpolated Logic Inverter 
      IF (E_BtoI(LT_1) .NE. 0) THEN
         EnaPWM_ = 0
      ELSE
         EnaPWM_ = 1
      ENDIF

! 90:[datatap] Scalar/Array Tap 
      RT_4 = DuCy(1)

! 100:[datatap] Scalar/Array Tap 
      RT_3 = DuCy(2)

! 110:[datatap] Scalar/Array Tap 
      RT_2 = DuCy(3)

! 130:[datatap] Scalar/Array Tap 
      RT_13 = DuCy(1)

! 140:[const] Real Constant 
      RT_5 = 2.0

! 150:[datatap] Scalar/Array Tap 
      RT_11 = DuCy(2)

! 160:[datatap] Scalar/Array Tap 
      RT_9 = DuCy(3)

! 170:[mult] Multiplier 
      RT_12 = Ia * RT_13

! 180:[mult] Multiplier 
      RT_10 = Ib * RT_11

! 190:[mult] Multiplier 
      RT_8 = Ic * RT_9

! 200:[sumjct] Summing/Differencing Junctions 
      RT_7 = + RT_12 + RT_10

! 210:[sumjct] Summing/Differencing Junctions 
      RT_6 = + RT_7 + RT_8

! 220:[div] Divider 
      IF (ABS(RT_5) .LT. 1.0E-100) THEN
         IF (RT_5 .LT. 0.0)  THEN
            idc = -1.0E100 * RT_6
         ELSE
            idc =  1.0E100 * RT_6
         ENDIF
      ELSE
         idc = RT_6 / RT_5
      ENDIF

! 230:[mult] Multiplier 
      Vc = RT_2 * RT_1

! 240:[mult] Multiplier 
      Vb = RT_3 * RT_1

! 250:[mult] Multiplier 
      Va = RT_4 * RT_1

! 260:[source_1] Single Phase Voltage Source Model 2 'Source1'
! Externally controlled DC source: Type: R
      RVD1_1 = Vc
      RVD1_2 = 0.0
      RVD1_3 = RTCF(NRTCF)
      RVD1_4 = RTCF(NRTCF+1)
      NRTCF  = NRTCF + 2
      CALL EMTDC_1PVSRC(SS(1), (IBRCH(1)+15),RVD1_4,0,RVD1_1,RVD1_2,RVD1&
     &_3)

! 270:[breaker3] 3 Phase Breaker 'EnaPWM_'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+4),1.0e-08,1000000.0,RTCF(NRT&
     &CF),1,NINT(1.0-REAL(EnaPWM_)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+5),1.0e-08,1000000.0,RTCF(NRT&
     &CF),1,NINT(1.0-REAL(EnaPWM_)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+6),1.0e-08,1000000.0,RTCF(NRT&
     &CF),1,NINT(1.0-REAL(EnaPWM_)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+5),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+6),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,645087414,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,645087414,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,645087414,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+5),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+6),SS(1)))

! 280:[source_1] Single Phase Voltage Source Model 2 'Source1'
! Externally controlled DC source: Type: R
      RVD1_1 = Vb
      RVD1_2 = 0.0
      RVD1_3 = RTCF(NRTCF)
      RVD1_4 = RTCF(NRTCF+1)
      NRTCF  = NRTCF + 2
      CALL EMTDC_1PVSRC(SS(1), (IBRCH(1)+16),RVD1_4,0,RVD1_1,RVD1_2,RVD1&
     &_3)

! 290:[src_ccin_1] Current Source 'Source 1'
      CCBR( (IBRCH(1)+14),SS(1)) = idc
      IF (TIMEZERO) CCBRD( (IBRCH(1)+14),SS(1)) = idc

! 300:[source_1] Single Phase Voltage Source Model 2 'Source1'
! Externally controlled DC source: Type: R
      RVD1_1 = Va
      RVD1_2 = 0.0
      RVD1_3 = RTCF(NRTCF)
      RVD1_4 = RTCF(NRTCF+1)
      NRTCF  = NRTCF + 2
      CALL EMTDC_1PVSRC(SS(1), (IBRCH(1)+7),RVD1_4,0,RVD1_1,RVD1_2,RVD1_&
     &3)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,888909249)
      CALL PESWITCH1_EXE(SS(1), (IBRCH(1)+13), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,301220559)
      CALL PESWITCH1_EXE(SS(1), (IBRCH(1)+12), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,1122263449)
      CALL PESWITCH1_EXE(SS(1), (IBRCH(1)+11), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,300972338)
      CALL PESWITCH1_EXE(SS(1), (IBRCH(1)+10), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,1918801362)
      CALL PESWITCH1_EXE(SS(1), (IBRCH(1)+9), 1, 0.0)

! 1:[peswitch] Power electronic switch 
! Power Electronic Switch Model: Diode
      CALL COMPONENT_ID(ICALL_NO,194409316)
      CALL PESWITCH1_EXE(SS(1), (IBRCH(1)+8), 1, 0.0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = EnaPWM
      STOF(ISTOF + 5) = RT_1
      STOF(ISTOF + 6) = Vdcl
      STOF(ISTOF + 7) = RT_2
      STOF(ISTOF + 8) = RT_3
      STOF(ISTOF + 9) = RT_4
      STOF(ISTOF + 10) = Va
      STOL(ISTOL + 1) = LT_1
      STOI(ISTOI + 1) = EnaPWM_
      STOF(ISTOF + 11) = RT_5
      STOF(ISTOF + 12) = RT_6
      STOF(ISTOF + 13) = RT_7
      STOF(ISTOF + 14) = RT_8
      STOF(ISTOF + 15) = Ic
      STOF(ISTOF + 16) = RT_9
      STOF(ISTOF + 17) = RT_10
      STOF(ISTOF + 18) = Ib
      STOF(ISTOF + 19) = RT_11
      STOF(ISTOF + 20) = RT_12
      STOF(ISTOF + 21) = Ia
      STOF(ISTOF + 22) = RT_13
      STOF(ISTOF + 23) = idc
      STOF(ISTOF + 24) = Vb
      STOF(ISTOF + 25) = Vc

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 1 + IT_0) = DuCy(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE AvgBridgeOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    EMTDC_VVDC    ! 
      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  DcPos, DcNeg

! Control Signals
      REAL     RT_1, Vdcl, RT_5, Ic, Ib, Ia

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 17

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 5)
      Vdcl     = STOF(ISTOF + 6)
      RT_5     = STOF(ISTOF + 11)
      Ic       = STOF(ISTOF + 15)
      Ib       = STOF(ISTOF + 18)
      Ia       = STOF(ISTOF + 21)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      DcPos = NODE(INODE + 1)
      DcNeg = NODE(INODE + 2)

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'AvgBridge.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[voltmeter] Voltmeter (Line - Line) 'Vdcl'
      Vdcl = EMTDC_VVDC(SS(1), DcPos, DcNeg)

! 20:[ammeter] Current Meter 'Ia'
      Ia = ( CBR((IBRCH(1)+3), SS(1)))

! 30:[ammeter] Current Meter 'Ib'
      Ib = ( CBR((IBRCH(1)+2), SS(1)))

! 40:[ammeter] Current Meter 'Ic'
      Ic = ( CBR((IBRCH(1)+1), SS(1)))

! 120:[gain] Gain Block 
!  Gain
      RT_1 = 0.5 * Vdcl

! 140:[const] Real Constant 

      RT_5 = 2.0

! 270:[breaker3] 3 Phase Breaker 'EnaPWM_'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (IBRCH(1)+6),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 5) = RT_1
      STOF(ISTOF + 6) = Vdcl
      STOF(ISTOF + 11) = RT_5
      STOF(ISTOF + 15) = Ic
      STOF(ISTOF + 18) = Ib
      STOF(ISTOF + 21) = Ia


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE AvgBridgeDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      REAL     RT_5

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 17

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 60:[unity] Type/Shape conversion block 

! 70:[inv] Interpolated Logic Inverter 

! 90:[datatap] Scalar/Array Tap 

! 100:[datatap] Scalar/Array Tap 

! 110:[datatap] Scalar/Array Tap 

! 130:[datatap] Scalar/Array Tap 

! 140:[const] Real Constant 
      RT_5 = 2.0

! 150:[datatap] Scalar/Array Tap 

! 160:[datatap] Scalar/Array Tap 

! 170:[mult] Multiplier 

! 180:[mult] Multiplier 

! 190:[mult] Multiplier 

! 200:[sumjct] Summing/Differencing Junctions 

! 210:[sumjct] Summing/Differencing Junctions 

! 220:[div] Divider 

! 230:[mult] Multiplier 

! 240:[mult] Multiplier 

! 250:[mult] Multiplier 

! 260:[source_1] Single Phase Voltage Source Model 2 'Source1'
      CALL E_BRANCH_CFG( (IBRCH(1)+15),SS(1),1,0,0,0.001,0.0,0.0)
      RTCF(NRTCF) = 0.0
      RTCF(NRTCF+1) = 0.05
      NRTCF = NRTCF + 2

! 270:[breaker3] 3 Phase Breaker 'EnaPWM_'
      CALL COMPONENT_ID(ICALL_NO,645087414)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 280:[source_1] Single Phase Voltage Source Model 2 'Source1'
      CALL E_BRANCH_CFG( (IBRCH(1)+16),SS(1),1,0,0,0.001,0.0,0.0)
      RTCF(NRTCF) = 0.0
      RTCF(NRTCF+1) = 0.05
      NRTCF = NRTCF + 2

! 290:[src_ccin_1] Current Source 'Source 1'
      CALL CURRENT_SOURCE2_CFG( (IBRCH(1)+14),SS(1))

! 300:[source_1] Single Phase Voltage Source Model 2 'Source1'
      CALL E_BRANCH_CFG( (IBRCH(1)+7),SS(1),1,0,0,0.001,0.0,0.0)
      RTCF(NRTCF) = 0.0
      RTCF(NRTCF+1) = 0.05
      NRTCF = NRTCF + 2

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.01, 1000000.0, 100000.0, 100000.0, 0.0, &
     &0.0)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.01, 1000000.0, 100000.0, 100000.0, 0.0, &
     &0.0)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.01, 1000000.0, 100000.0, 100000.0, 0.0, &
     &0.0)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.01, 1000000.0, 100000.0, 100000.0, 0.0, &
     &0.0)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.01, 1000000.0, 100000.0, 100000.0, 0.0, &
     &0.0)

! 1:[peswitch] Power electronic switch 
      CALL PESWITCH1_CFG(0, 0,0.01, 1000000.0, 100000.0, 100000.0, 0.0, &
     &0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE AvgBridgeOut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  DcPos, DcNeg

! Control Signals
      REAL     RT_5

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 17

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      DcPos = NODE(INODE + 1)
      DcNeg = NODE(INODE + 2)

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 120:[gain] Gain Block 

! 140:[const] Real Constant 
      RT_5 = 2.0

      RETURN
      END

