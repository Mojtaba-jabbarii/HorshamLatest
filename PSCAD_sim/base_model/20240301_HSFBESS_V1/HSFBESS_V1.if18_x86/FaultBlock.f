!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : FaultBlock
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE FaultBlockDyn(Time15, Duration15, Type15, Impedance15, &
     &   Time14, Duration14, Type14, Impedance14, Time13, Duration13,   &
     &   Type13, Impedance13, Time12, Duration12, Type12, Impedance12,  &
     &   Time11, Duration11, Type11, Impedance11, Time10, Duration10,   &
     &   Type10, Impedance10, Time9, Duration9, Type9, Impedance9,      &
     &   Time8, Duration8, Type8, Impedance8, Time7, Duration7, Type7,  &
     &   Impedance7, Time6, Duration6, Type6, Impedance6, Time5,        &
     &   Duration5, Type5, Impedance5, Time4, Duration4, Type4,         &
     &   Impedance4, Time3, Duration3, Type3, Impedance3, Time2,        &
     &   Duration2, Type2, Impedance2, X_R15, X_R14, X_R13, X_R12,      &
     &   X_R11, X_R10, X_R9, X_R8, X_R7, X_R6, X_R5, X_R4, X_R3, X_R2,  &
     &   status, N_faults, Time1, Duration1, Type1, Impedance1, X_R1,   &
     &   Fbase, Capacity1, Capacity2, Capacity3, Capacity4, Capacity5,  &
     &   Capacity6, Capacity7, Capacity8, Capacity9, Capacity10,        &
     &   Capacity11, Capacity12, Capacity13, Capacity14, Capacity15)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    SANDH2        ! Sample and Hold
!     SUBR    E_VARIMPBRANCH  ! Variable RLC Series Branch

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Type15, Type14
      INTEGER, INTENT(IN)  :: Type13, Type12
      INTEGER, INTENT(IN)  :: Type11, Type10
      INTEGER, INTENT(IN)  :: Type9, Type8, Type7
      INTEGER, INTENT(IN)  :: Type6, Type5, Type4
      INTEGER, INTENT(IN)  :: Type3, Type2
      INTEGER, INTENT(IN)  :: status, N_faults
      INTEGER, INTENT(IN)  :: Type1
      REAL,    INTENT(IN)  :: Time15, Duration15
      REAL,    INTENT(IN)  :: Impedance15, Time14
      REAL,    INTENT(IN)  :: Duration14
      REAL,    INTENT(IN)  :: Impedance14, Time13
      REAL,    INTENT(IN)  :: Duration13
      REAL,    INTENT(IN)  :: Impedance13, Time12
      REAL,    INTENT(IN)  :: Duration12
      REAL,    INTENT(IN)  :: Impedance12, Time11
      REAL,    INTENT(IN)  :: Duration11
      REAL,    INTENT(IN)  :: Impedance11, Time10
      REAL,    INTENT(IN)  :: Duration10
      REAL,    INTENT(IN)  :: Impedance10, Time9
      REAL,    INTENT(IN)  :: Duration9
      REAL,    INTENT(IN)  :: Impedance9, Time8
      REAL,    INTENT(IN)  :: Duration8
      REAL,    INTENT(IN)  :: Impedance8, Time7
      REAL,    INTENT(IN)  :: Duration7
      REAL,    INTENT(IN)  :: Impedance7, Time6
      REAL,    INTENT(IN)  :: Duration6
      REAL,    INTENT(IN)  :: Impedance6, Time5
      REAL,    INTENT(IN)  :: Duration5
      REAL,    INTENT(IN)  :: Impedance5, Time4
      REAL,    INTENT(IN)  :: Duration4
      REAL,    INTENT(IN)  :: Impedance4, Time3
      REAL,    INTENT(IN)  :: Duration3
      REAL,    INTENT(IN)  :: Impedance3, Time2
      REAL,    INTENT(IN)  :: Duration2
      REAL,    INTENT(IN)  :: Impedance2, X_R15
      REAL,    INTENT(IN)  :: X_R14, X_R13, X_R12
      REAL,    INTENT(IN)  :: X_R11, X_R10, X_R9
      REAL,    INTENT(IN)  :: X_R8, X_R7, X_R6
      REAL,    INTENT(IN)  :: X_R5, X_R4, X_R3
      REAL,    INTENT(IN)  :: X_R2, Time1
      REAL,    INTENT(IN)  :: Duration1
      REAL,    INTENT(IN)  :: Impedance1, X_R1
      REAL,    INTENT(IN)  :: Fbase, Capacity1
      REAL,    INTENT(IN)  :: Capacity2
      REAL,    INTENT(IN)  :: Capacity3
      REAL,    INTENT(IN)  :: Capacity4
      REAL,    INTENT(IN)  :: Capacity5
      REAL,    INTENT(IN)  :: Capacity6
      REAL,    INTENT(IN)  :: Capacity7
      REAL,    INTENT(IN)  :: Capacity8
      REAL,    INTENT(IN)  :: Capacity9
      REAL,    INTENT(IN)  :: Capacity10
      REAL,    INTENT(IN)  :: Capacity11
      REAL,    INTENT(IN)  :: Capacity12
      REAL,    INTENT(IN)  :: Capacity13
      REAL,    INTENT(IN)  :: Capacity14
      REAL,    INTENT(IN)  :: Capacity15

! Electrical Node Indices

! Control Signals
      INTEGER  IT_1, IT_2, IT_3, IT_4, IT_5, IT_6
      INTEGER  IT_7, IT_8, IT_9, IT_10, IT_11
      INTEGER  IT_12, IT_13, IT_14, IT_15, IT_16
      INTEGER  IT_17, IT_18, IT_19, IT_20, IT_21
      INTEGER  IT_22, IT_23, IT_24, IT_25, IT_26
      INTEGER  IT_27, IT_28, IT_29, IT_30, IT_31
      INTEGER  IT_32, IT_33, IT_34, IT_35, IT_36
      INTEGER  IT_37, IT_38, IT_39, IT_40, IT_41
      INTEGER  IT_42, IT_43, IT_44, IT_45, IT_46
      INTEGER  IT_47, IT_48, IT_49, IT_50, IT_51
      INTEGER  IT_52, IT_53, IT_54, threePHG(9)
      INTEGER  IT_55, IT_56, IT_57, IT_58, IT_59
      INTEGER  IT_60, IT_61, IT_62, IT_63, IT_64
      INTEGER  IT_65, IT_66, IT_67, IT_68
      INTEGER  twoPHG(9), onePHG_out(9)
      INTEGER  twoPHG_out(9), IT_69, onePHG(9)
      INTEGER  L_L_out(9), IT_70, IT_71, IT_72
      INTEGER  IT_73, IT_74, L_L(9), IT_75, IT_76
      INTEGER  IT_77, IT_78, IT_79, IT_80, IT_81
      INTEGER  IT_82, IT_83, IT_84, IT_85, IT_86
      INTEGER  IT_87, IT_88, IT_89, IT_90, IT_91
      INTEGER  IT_92, IT_93, IT_94, IT_95, IT_96
      INTEGER  IT_97, IT_98, IT_99, IT_100
      INTEGER  IT_101, IT_102, IT_103, IT_104
      INTEGER  IT_105, IT_106, IT_107, IT_108
      INTEGER  IT_109, IT_110, IT_111, IT_112
      INTEGER  IT_113, IT_114, IT_115, IT_116
      INTEGER  IT_117, IT_118, IT_119, IT_120
      INTEGER  tov_brk(9), no_fault(9)
      INTEGER  TOV_out(9), IT_121, IT_122, IT_123
      INTEGER  IT_124, IT_125, IT_126, IT_127
      INTEGER  IT_128, IT_129, IT_130, IT_131
      INTEGER  IT_132, IT_133, BRK1_2, BRK2_3
      INTEGER  BRK1_3, BRK1, BRK2, BRK3
      INTEGER  breakerStatus(9), BRK1C, BRK2C
      INTEGER  BRK3C
      REAL     RT_1, RT_2, RT_3, F1_data(6), RT_4
      REAL     RT_5, RT_6, F2_data(6), RT_7, RT_8
      REAL     RT_9, RT_10, RT_11, RT_12
      REAL     F4_data(6), RT_13, RT_14, RT_15
      REAL     RT_16, RT_17, RT_18, F6_data(6)
      REAL     RT_19, RT_20, RT_21, F2_out(6)
      REAL     F3_data(6), F3_out(6), F4_out(6)
      REAL     F5_data(6), F5_out(6), F6_out(6)
      REAL     F7_data(6), F7_out(6), RT_22
      REAL     RT_23, RT_24, RT_25, RT_26
      REAL     F9_data(6), F10_data(6)
      REAL     F10_out(6), RT_27, RT_28, RT_29
      REAL     F11_data(6), F11_out(6), RT_30
      REAL     RT_31, RT_32, RT_33, RT_34, RT_35
      REAL     F12_data(6), F12_out(6)
      REAL     F13_data(6), F13_out(6), RT_36
      REAL     RT_37, RT_38, RT_39, RT_40, RT_41
      REAL     F14_data(6), F14_out(6), RT_42
      REAL     RT_43, RT_44, RT_45, RT_46, RT_47
      REAL     RT_48, RT_49, RT_50, F15_data(6)
      REAL     F15_out(6), RT_51, RT_52, RT_53
      REAL     RT_54, RT_55, RT_56, RT_57, RT_58
      REAL     RT_59, RT_60, RT_61, RT_62, RT_63
      REAL     RT_64, RT_65, RT_66, RT_67, L
      REAL     RT_68, RT_69, RT_70, RT_71, RT_72
      REAL     Fimpedance, FX_R, RT_73, RT_74
      REAL     RT_75, RT_76, RT_77, RT_78, RT_79
      REAL     RT_80, RT_81, RT_82, RT_83, RT_84
      REAL     RT_85, RT_86, RT_87, RT_88, RT_89
      REAL     RT_90, RT_91, F8_data(6)
      REAL     F9_out(6), F8_out(6), RT_92, RT_93
      REAL     RT_94, RT_95, RT_96, RT_97, RT_98
      REAL     RT_99, RT_100, RT_101, RT_102
      REAL     RT_103, RT_104, RT_105, RT_106
      REAL     RT_107, RT_108, RT_109, RT_110
      REAL     RT_111, RT_112, RT_113, RT_114
      REAL     RT_115, RT_116, RT_117, RT_118
      REAL     RT_119, RT_120, RT_121, RT_122
      REAL     RT_123, RT_124, RT_125, RT_126
      REAL     RT_127, RT_128, RT_129, RT_130
      REAL     RT_131, RT_132, RT_133
      REAL     F_data_active(6), Fnone(6)
      REAL     F_data(6), RT_134, RT_135, RT_136
      REAL     RT_137, RT_138, RT_139, RT_140
      REAL     Fype, RT_141, capacitance, RT_142
      REAL     C_pre, RT_143, R_pre, R, RT_144
      REAL     X_pre, X, RT_145, RT_146, RT_147
      REAL     RT_148, RT_149, RT_150, RT_151
      REAL     RT_152, RT_153, RT_154, C, Ftime
      REAL     Fduration

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1, IVD1_2
      REAL     RVD2_1(2)

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOI, ISTOF, IT_0                  ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOI     = NSTOI
      NSTOI     = NSTOI + 258
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 435
      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 18

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_1     = STOF(ISTOF + 77)
      IT_1     = STOI(ISTOI + 18)
      IT_2     = STOI(ISTOI + 19)
      IT_3     = STOI(ISTOI + 20)
      IT_4     = STOI(ISTOI + 21)
      RT_2     = STOF(ISTOF + 78)
      RT_3     = STOF(ISTOF + 79)
      RT_4     = STOF(ISTOF + 86)
      RT_5     = STOF(ISTOF + 87)
      RT_6     = STOF(ISTOF + 88)
      RT_7     = STOF(ISTOF + 95)
      RT_8     = STOF(ISTOF + 96)
      RT_9     = STOF(ISTOF + 97)
      RT_10    = STOF(ISTOF + 98)
      RT_11    = STOF(ISTOF + 99)
      RT_12    = STOF(ISTOF + 100)
      RT_13    = STOF(ISTOF + 107)
      RT_14    = STOF(ISTOF + 108)
      RT_15    = STOF(ISTOF + 109)
      RT_16    = STOF(ISTOF + 110)
      RT_17    = STOF(ISTOF + 111)
      RT_18    = STOF(ISTOF + 112)
      RT_19    = STOF(ISTOF + 119)
      RT_20    = STOF(ISTOF + 120)
      RT_21    = STOF(ISTOF + 121)
      IT_5     = STOI(ISTOI + 22)
      IT_6     = STOI(ISTOI + 23)
      IT_7     = STOI(ISTOI + 24)
      IT_8     = STOI(ISTOI + 25)
      IT_9     = STOI(ISTOI + 26)
      IT_10    = STOI(ISTOI + 27)
      RT_22    = STOF(ISTOF + 176)
      RT_23    = STOF(ISTOF + 177)
      RT_24    = STOF(ISTOF + 178)
      RT_25    = STOF(ISTOF + 179)
      RT_26    = STOF(ISTOF + 180)
      IT_11    = STOI(ISTOI + 28)
      IT_12    = STOI(ISTOI + 29)
      RT_27    = STOF(ISTOF + 199)
      RT_28    = STOF(ISTOF + 200)
      RT_29    = STOF(ISTOF + 201)
      IT_13    = STOI(ISTOI + 30)
      RT_30    = STOF(ISTOF + 214)
      RT_31    = STOF(ISTOF + 215)
      RT_32    = STOF(ISTOF + 216)
      RT_33    = STOF(ISTOF + 217)
      RT_34    = STOF(ISTOF + 218)
      RT_35    = STOF(ISTOF + 219)
      IT_14    = STOI(ISTOI + 31)
      IT_15    = STOI(ISTOI + 32)
      RT_36    = STOF(ISTOF + 244)
      RT_37    = STOF(ISTOF + 245)
      RT_38    = STOF(ISTOF + 246)
      RT_39    = STOF(ISTOF + 247)
      RT_40    = STOF(ISTOF + 248)
      RT_41    = STOF(ISTOF + 249)
      IT_16    = STOI(ISTOI + 33)
      RT_42    = STOF(ISTOF + 262)
      RT_43    = STOF(ISTOF + 263)
      RT_44    = STOF(ISTOF + 264)
      RT_45    = STOF(ISTOF + 265)
      RT_46    = STOF(ISTOF + 266)
      RT_47    = STOF(ISTOF + 267)
      RT_48    = STOF(ISTOF + 268)
      RT_49    = STOF(ISTOF + 269)
      RT_50    = STOF(ISTOF + 270)
      IT_17    = STOI(ISTOI + 34)
      IT_18    = STOI(ISTOI + 35)
      IT_19    = STOI(ISTOI + 36)
      IT_20    = STOI(ISTOI + 37)
      IT_21    = STOI(ISTOI + 38)
      IT_22    = STOI(ISTOI + 39)
      IT_23    = STOI(ISTOI + 40)
      IT_24    = STOI(ISTOI + 41)
      IT_25    = STOI(ISTOI + 42)
      IT_26    = STOI(ISTOI + 43)
      IT_27    = STOI(ISTOI + 44)
      IT_28    = STOI(ISTOI + 45)
      IT_29    = STOI(ISTOI + 46)
      IT_30    = STOI(ISTOI + 47)
      IT_31    = STOI(ISTOI + 48)
      IT_32    = STOI(ISTOI + 49)
      IT_33    = STOI(ISTOI + 50)
      IT_34    = STOI(ISTOI + 51)
      IT_35    = STOI(ISTOI + 52)
      IT_36    = STOI(ISTOI + 53)
      IT_37    = STOI(ISTOI + 54)
      IT_38    = STOI(ISTOI + 55)
      IT_39    = STOI(ISTOI + 56)
      IT_40    = STOI(ISTOI + 57)
      IT_41    = STOI(ISTOI + 58)
      IT_42    = STOI(ISTOI + 59)
      IT_43    = STOI(ISTOI + 60)
      IT_44    = STOI(ISTOI + 61)
      IT_45    = STOI(ISTOI + 62)
      IT_46    = STOI(ISTOI + 63)
      IT_47    = STOI(ISTOI + 64)
      IT_48    = STOI(ISTOI + 65)
      IT_49    = STOI(ISTOI + 66)
      IT_50    = STOI(ISTOI + 67)
      IT_51    = STOI(ISTOI + 68)
      IT_52    = STOI(ISTOI + 69)
      IT_53    = STOI(ISTOI + 70)
      IT_54    = STOI(ISTOI + 71)
      RT_51    = STOF(ISTOF + 283)
      IT_55    = STOI(ISTOI + 81)
      IT_56    = STOI(ISTOI + 82)
      IT_57    = STOI(ISTOI + 83)
      IT_58    = STOI(ISTOI + 84)
      IT_59    = STOI(ISTOI + 85)
      IT_60    = STOI(ISTOI + 86)
      IT_61    = STOI(ISTOI + 87)
      IT_62    = STOI(ISTOI + 88)
      IT_63    = STOI(ISTOI + 89)
      IT_64    = STOI(ISTOI + 90)
      IT_65    = STOI(ISTOI + 91)
      RT_52    = STOF(ISTOF + 284)
      RT_53    = STOF(ISTOF + 285)
      RT_54    = STOF(ISTOF + 286)
      RT_55    = STOF(ISTOF + 287)
      RT_56    = STOF(ISTOF + 288)
      RT_57    = STOF(ISTOF + 289)
      RT_58    = STOF(ISTOF + 290)
      IT_66    = STOI(ISTOI + 92)
      IT_67    = STOI(ISTOI + 93)
      IT_68    = STOI(ISTOI + 94)
      IT_69    = STOI(ISTOI + 122)
      RT_59    = STOF(ISTOF + 291)
      IT_70    = STOI(ISTOI + 141)
      IT_71    = STOI(ISTOI + 142)
      RT_60    = STOF(ISTOF + 292)
      RT_61    = STOF(ISTOF + 293)
      RT_62    = STOF(ISTOF + 294)
      RT_63    = STOF(ISTOF + 295)
      RT_64    = STOF(ISTOF + 296)
      RT_65    = STOF(ISTOF + 297)
      RT_66    = STOF(ISTOF + 298)
      IT_72    = STOI(ISTOI + 143)
      IT_73    = STOI(ISTOI + 144)
      IT_74    = STOI(ISTOI + 145)
      RT_67    = STOF(ISTOF + 299)
      L        = STOF(ISTOF + 300)
      RT_68    = STOF(ISTOF + 301)
      RT_69    = STOF(ISTOF + 302)
      RT_70    = STOF(ISTOF + 303)
      RT_71    = STOF(ISTOF + 304)
      RT_72    = STOF(ISTOF + 305)
      Fimpedance = STOF(ISTOF + 306)
      FX_R     = STOF(ISTOF + 307)
      RT_73    = STOF(ISTOF + 308)
      RT_74    = STOF(ISTOF + 309)
      RT_75    = STOF(ISTOF + 310)
      RT_76    = STOF(ISTOF + 311)
      RT_77    = STOF(ISTOF + 312)
      RT_78    = STOF(ISTOF + 313)
      RT_79    = STOF(ISTOF + 314)
      RT_80    = STOF(ISTOF + 315)
      RT_81    = STOF(ISTOF + 316)
      RT_82    = STOF(ISTOF + 317)
      RT_83    = STOF(ISTOF + 318)
      RT_84    = STOF(ISTOF + 319)
      RT_85    = STOF(ISTOF + 320)
      RT_86    = STOF(ISTOF + 321)
      RT_87    = STOF(ISTOF + 322)
      IT_75    = STOI(ISTOI + 155)
      IT_76    = STOI(ISTOI + 156)
      IT_77    = STOI(ISTOI + 157)
      IT_78    = STOI(ISTOI + 158)
      IT_79    = STOI(ISTOI + 159)
      IT_80    = STOI(ISTOI + 160)
      IT_81    = STOI(ISTOI + 161)
      IT_82    = STOI(ISTOI + 162)
      IT_83    = STOI(ISTOI + 163)
      IT_84    = STOI(ISTOI + 164)
      IT_85    = STOI(ISTOI + 165)
      IT_86    = STOI(ISTOI + 166)
      IT_87    = STOI(ISTOI + 167)
      IT_88    = STOI(ISTOI + 168)
      IT_89    = STOI(ISTOI + 169)
      IT_90    = STOI(ISTOI + 170)
      IT_91    = STOI(ISTOI + 171)
      IT_92    = STOI(ISTOI + 172)
      IT_93    = STOI(ISTOI + 173)
      IT_94    = STOI(ISTOI + 174)
      IT_95    = STOI(ISTOI + 175)
      IT_96    = STOI(ISTOI + 176)
      IT_97    = STOI(ISTOI + 177)
      IT_98    = STOI(ISTOI + 178)
      IT_99    = STOI(ISTOI + 179)
      IT_100   = STOI(ISTOI + 180)
      IT_101   = STOI(ISTOI + 181)
      IT_102   = STOI(ISTOI + 182)
      IT_103   = STOI(ISTOI + 183)
      IT_104   = STOI(ISTOI + 184)
      IT_105   = STOI(ISTOI + 185)
      IT_106   = STOI(ISTOI + 186)
      IT_107   = STOI(ISTOI + 187)
      IT_108   = STOI(ISTOI + 188)
      IT_109   = STOI(ISTOI + 189)
      IT_110   = STOI(ISTOI + 190)
      IT_111   = STOI(ISTOI + 191)
      IT_112   = STOI(ISTOI + 192)
      IT_113   = STOI(ISTOI + 193)
      IT_114   = STOI(ISTOI + 194)
      IT_115   = STOI(ISTOI + 195)
      IT_116   = STOI(ISTOI + 196)
      IT_117   = STOI(ISTOI + 197)
      RT_88    = STOF(ISTOF + 323)
      RT_89    = STOF(ISTOF + 324)
      RT_90    = STOF(ISTOF + 325)
      RT_91    = STOF(ISTOF + 326)
      RT_92    = STOF(ISTOF + 345)
      RT_93    = STOF(ISTOF + 346)
      RT_94    = STOF(ISTOF + 347)
      RT_95    = STOF(ISTOF + 348)
      RT_96    = STOF(ISTOF + 349)
      RT_97    = STOF(ISTOF + 350)
      RT_98    = STOF(ISTOF + 351)
      RT_99    = STOF(ISTOF + 352)
      RT_100   = STOF(ISTOF + 353)
      RT_101   = STOF(ISTOF + 354)
      RT_102   = STOF(ISTOF + 355)
      RT_103   = STOF(ISTOF + 356)
      RT_104   = STOF(ISTOF + 357)
      RT_105   = STOF(ISTOF + 358)
      RT_106   = STOF(ISTOF + 359)
      RT_107   = STOF(ISTOF + 360)
      RT_108   = STOF(ISTOF + 361)
      RT_109   = STOF(ISTOF + 362)
      RT_110   = STOF(ISTOF + 363)
      RT_111   = STOF(ISTOF + 364)
      RT_112   = STOF(ISTOF + 365)
      RT_113   = STOF(ISTOF + 366)
      RT_114   = STOF(ISTOF + 367)
      RT_115   = STOF(ISTOF + 368)
      RT_116   = STOF(ISTOF + 369)
      RT_117   = STOF(ISTOF + 370)
      RT_118   = STOF(ISTOF + 371)
      RT_119   = STOF(ISTOF + 372)
      RT_120   = STOF(ISTOF + 373)
      RT_121   = STOF(ISTOF + 374)
      RT_122   = STOF(ISTOF + 375)
      RT_123   = STOF(ISTOF + 376)
      RT_124   = STOF(ISTOF + 377)
      RT_125   = STOF(ISTOF + 378)
      RT_126   = STOF(ISTOF + 379)
      RT_127   = STOF(ISTOF + 380)
      RT_128   = STOF(ISTOF + 381)
      RT_129   = STOF(ISTOF + 382)
      RT_130   = STOF(ISTOF + 383)
      RT_131   = STOF(ISTOF + 384)
      RT_132   = STOF(ISTOF + 385)
      RT_133   = STOF(ISTOF + 386)
      RT_134   = STOF(ISTOF + 405)
      IT_118   = STOI(ISTOI + 198)
      RT_135   = STOF(ISTOF + 406)
      IT_119   = STOI(ISTOI + 199)
      IT_120   = STOI(ISTOI + 200)
      RT_136   = STOF(ISTOF + 407)
      RT_137   = STOF(ISTOF + 408)
      RT_138   = STOF(ISTOF + 409)
      RT_139   = STOF(ISTOF + 410)
      RT_140   = STOF(ISTOF + 411)
      Fype     = STOF(ISTOF + 412)
      RT_141   = STOF(ISTOF + 413)
      IT_121   = STOI(ISTOI + 228)
      IT_122   = STOI(ISTOI + 229)
      IT_123   = STOI(ISTOI + 230)
      capacitance = STOF(ISTOF + 414)
      RT_142   = STOF(ISTOF + 415)
      C_pre    = STOF(ISTOF + 416)
      IT_124   = STOI(ISTOI + 231)
      IT_125   = STOI(ISTOI + 232)
      IT_126   = STOI(ISTOI + 233)
      IT_127   = STOI(ISTOI + 234)
      IT_128   = STOI(ISTOI + 235)
      IT_129   = STOI(ISTOI + 236)
      IT_130   = STOI(ISTOI + 237)
      IT_131   = STOI(ISTOI + 238)
      IT_132   = STOI(ISTOI + 239)
      RT_143   = STOF(ISTOF + 417)
      R_pre    = STOF(ISTOF + 418)
      R        = STOF(ISTOF + 419)
      RT_144   = STOF(ISTOF + 420)
      X_pre    = STOF(ISTOF + 421)
      X        = STOF(ISTOF + 422)
      RT_145   = STOF(ISTOF + 423)
      RT_146   = STOF(ISTOF + 424)
      RT_147   = STOF(ISTOF + 425)
      RT_148   = STOF(ISTOF + 426)
      RT_149   = STOF(ISTOF + 427)
      RT_150   = STOF(ISTOF + 428)
      IT_133   = STOI(ISTOI + 240)
      RT_151   = STOF(ISTOF + 429)
      RT_152   = STOF(ISTOF + 430)
      RT_153   = STOF(ISTOF + 431)
      RT_154   = STOF(ISTOF + 432)
      C        = STOF(ISTOF + 433)
      BRK1_2   = STOI(ISTOI + 241)
      BRK2_3   = STOI(ISTOI + 242)
      BRK1_3   = STOI(ISTOI + 243)
      BRK1     = STOI(ISTOI + 244)
      BRK2     = STOI(ISTOI + 245)
      BRK3     = STOI(ISTOI + 246)
      BRK1C    = STOI(ISTOI + 256)
      BRK2C    = STOI(ISTOI + 257)
      BRK3C    = STOI(ISTOI + 258)
      Ftime    = STOF(ISTOF + 434)
      Fduration = STOF(ISTOF + 435)

! Array (1:6) quantities...
      DO IT_0 = 1,6
         F1_data(IT_0) = STOF(ISTOF + 79 + IT_0)
         F2_data(IT_0) = STOF(ISTOF + 88 + IT_0)
         F4_data(IT_0) = STOF(ISTOF + 100 + IT_0)
         F6_data(IT_0) = STOF(ISTOF + 112 + IT_0)
         F2_out(IT_0) = STOF(ISTOF + 121 + IT_0)
         F3_data(IT_0) = STOF(ISTOF + 127 + IT_0)
         F3_out(IT_0) = STOF(ISTOF + 133 + IT_0)
         F4_out(IT_0) = STOF(ISTOF + 139 + IT_0)
         F5_data(IT_0) = STOF(ISTOF + 145 + IT_0)
         F5_out(IT_0) = STOF(ISTOF + 151 + IT_0)
         F6_out(IT_0) = STOF(ISTOF + 157 + IT_0)
         F7_data(IT_0) = STOF(ISTOF + 163 + IT_0)
         F7_out(IT_0) = STOF(ISTOF + 169 + IT_0)
         F9_data(IT_0) = STOF(ISTOF + 180 + IT_0)
         F10_data(IT_0) = STOF(ISTOF + 186 + IT_0)
         F10_out(IT_0) = STOF(ISTOF + 192 + IT_0)
         F11_data(IT_0) = STOF(ISTOF + 201 + IT_0)
         F11_out(IT_0) = STOF(ISTOF + 207 + IT_0)
         F12_data(IT_0) = STOF(ISTOF + 219 + IT_0)
         F12_out(IT_0) = STOF(ISTOF + 225 + IT_0)
         F13_data(IT_0) = STOF(ISTOF + 231 + IT_0)
         F13_out(IT_0) = STOF(ISTOF + 237 + IT_0)
         F14_data(IT_0) = STOF(ISTOF + 249 + IT_0)
         F14_out(IT_0) = STOF(ISTOF + 255 + IT_0)
         F15_data(IT_0) = STOF(ISTOF + 270 + IT_0)
         F15_out(IT_0) = STOF(ISTOF + 276 + IT_0)
         F8_data(IT_0) = STOF(ISTOF + 326 + IT_0)
         F9_out(IT_0) = STOF(ISTOF + 332 + IT_0)
         F8_out(IT_0) = STOF(ISTOF + 338 + IT_0)
         F_data_active(IT_0) = STOF(ISTOF + 386 + IT_0)
         Fnone(IT_0) = STOF(ISTOF + 392 + IT_0)
         F_data(IT_0) = STOF(ISTOF + 398 + IT_0)
      END DO

! Array (1:9) quantities...
      DO IT_0 = 1,9
         threePHG(IT_0) = STOI(ISTOI + 71 + IT_0)
         twoPHG(IT_0) = STOI(ISTOI + 94 + IT_0)
         onePHG_out(IT_0) = STOI(ISTOI + 103 + IT_0)
         twoPHG_out(IT_0) = STOI(ISTOI + 112 + IT_0)
         onePHG(IT_0) = STOI(ISTOI + 122 + IT_0)
         L_L_out(IT_0) = STOI(ISTOI + 131 + IT_0)
         L_L(IT_0) = STOI(ISTOI + 145 + IT_0)
         tov_brk(IT_0) = STOI(ISTOI + 200 + IT_0)
         no_fault(IT_0) = STOI(ISTOI + 209 + IT_0)
         TOV_out(IT_0) = STOI(ISTOI + 218 + IT_0)
         breakerStatus(IT_0) = STOI(ISTOI + 246 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'FaultBlock.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[const] Real Constant 
      RT_86 = 8.5

! 30:[time-sig] Output of Simulation Time 
      RT_25 = TIME

! 50:[time-sig] Output of Simulation Time 
      RT_23 = TIME

! 70:[const] Real Constant 
      RT_73 = 0.5

! 80:[time-sig] Output of Simulation Time 
      RT_1 = TIME

! 100:[sumjct] Summing/Differencing Junctions 
      RT_22 = + Time9 + Duration9

! 130:[time-sig] Output of Simulation Time 
      RT_2 = TIME

! 180:[sumjct] Summing/Differencing Junctions 
      RT_3 = + Time1 + Duration1

! 220:[const] Real Constant 
      RT_85 = 9.5

! 230:[time-sig] Output of Simulation Time 
      RT_27 = TIME

! 250:[time-sig] Output of Simulation Time 
      RT_28 = TIME

! 270:[consti] Integer Constant 
      IT_35 = 0

! 280:[consti] Integer Constant 
      IT_34 = 0

! 290:[consti] Integer Constant 
      IT_33 = 0

! 300:[consti] Integer Constant 
      IT_32 = 1

! 310:[consti] Integer Constant 
      IT_31 = 1

! 320:[const] Real Constant 
      RT_51 = -0.5

! 330:[consti] Integer Constant 
      IT_30 = 1

! 340:[const] Real Constant 
      RT_74 = 1.5

! 350:[consti] Integer Constant 
      IT_42 = 1

! 360:[consti] Integer Constant 
      IT_43 = 1

! 380:[time-sig] Output of Simulation Time 
      RT_6 = TIME

! 400:[consti] Integer Constant 
      IT_44 = 1

! 410:[sumjct] Summing/Differencing Junctions 
      RT_29 = + Time10 + Duration10

! 440:[const] Real Constant 
      RT_52 = 0.5

! 450:[time-sig] Output of Simulation Time 
      RT_5 = TIME

! 500:[sumjct] Summing/Differencing Junctions 
      RT_4 = + Time2 + Duration2

! 540:[consti] Integer Constant 
      IT_18 = 0

! 550:[const] Real Constant 
      RT_84 = 10.5

! 560:[consti] Integer Constant 
      IT_19 = 0

! 570:[consti] Integer Constant 
      IT_20 = 1

! 580:[time-sig] Output of Simulation Time 
      RT_30 = TIME

! 590:[consti] Integer Constant 
      IT_21 = 1

! 600:[consti] Integer Constant 
      IT_22 = 1

! 610:[consti] Integer Constant 
      IT_23 = 1

! 620:[consti] Integer Constant 
      IT_51 = 1

! 630:[consti] Integer Constant 
      IT_52 = 1

! 640:[consti] Integer Constant 
      IT_53 = 1

! 650:[const] Real Constant 
      RT_56 = 0.5

! 670:[time-sig] Output of Simulation Time 
      RT_31 = TIME

! 690:[const] Real Constant 
      RT_55 = 1.5

! 700:[const] Real Constant 
      RT_75 = 2.5

! 710:[time-sig] Output of Simulation Time 
      RT_7 = TIME

! 730:[sumjct] Summing/Differencing Junctions 
      RT_32 = + Time11 + Duration11

! 760:[time-sig] Output of Simulation Time 
      RT_8 = TIME

! 810:[sumjct] Summing/Differencing Junctions 
      RT_9 = + Time3 + Duration3

! 840:[consti] Integer Constant 
      IT_41 = 0

! 850:[consti] Integer Constant 
      IT_40 = 1

! 860:[consti] Integer Constant 
      IT_39 = 1

! 870:[consti] Integer Constant 
      IT_38 = 1

! 890:[consti] Integer Constant 
      IT_37 = 1

! 900:[consti] Integer Constant 
      IT_36 = 1

! 910:[const] Real Constant 
      RT_59 = 1.5

! 920:[consti] Integer Constant 
      IT_45 = 1

! 930:[consti] Integer Constant 
      IT_46 = 1

! 940:[consti] Integer Constant 
      IT_47 = 1

! 950:[const] Real Constant 
      RT_83 = 11.5

! 960:[time-sig] Output of Simulation Time 
      RT_35 = TIME

! 970:[const] Real Constant 
      RT_60 = 2.5

! 990:[time-sig] Output of Simulation Time 
      RT_34 = TIME

! 1010:[const] Real Constant 
      RT_76 = 3.5

! 1020:[time-sig] Output of Simulation Time 
      RT_12 = TIME

! 1040:[sumjct] Summing/Differencing Junctions 
      RT_33 = + Time12 + Duration12

! 1070:[time-sig] Output of Simulation Time 
      RT_11 = TIME

! 1120:[sumjct] Summing/Differencing Junctions 
      RT_10 = + Time4 + Duration4

! 1130:[consti] Integer Constant 
      IT_29 = 1

! 1140:[consti] Integer Constant 
      IT_28 = 1

! 1150:[consti] Integer Constant 
      IT_27 = 1

! 1160:[consti] Integer Constant 
      IT_26 = 0

! 1180:[consti] Integer Constant 
      IT_25 = 1

! 1190:[const] Real Constant 
      RT_64 = 2.5

! 1200:[consti] Integer Constant 
      IT_24 = 1

! 1210:[consti] Integer Constant 
      IT_48 = 1

! 1220:[consti] Integer Constant 
      IT_49 = 1

! 1230:[consti] Integer Constant 
      IT_50 = 1

! 1250:[const] Real Constant 
      RT_63 = 3.5

! 1270:[const] Real Constant 
      RT_82 = 12.5

! 1280:[time-sig] Output of Simulation Time 
      RT_36 = TIME

! 1300:[time-sig] Output of Simulation Time 
      RT_37 = TIME

! 1320:[const] Real Constant 
      RT_77 = 4.5

! 1330:[time-sig] Output of Simulation Time 
      RT_13 = TIME

! 1350:[sumjct] Summing/Differencing Junctions 
      RT_38 = + Time13 + Duration13

! 1370:[consti] Integer Constant 
      IT_132 = 1

! 1380:[consti] Integer Constant 
      IT_131 = 1

! 1390:[consti] Integer Constant 
      IT_130 = 1

! 1400:[consti] Integer Constant 
      IT_129 = 1

! 1420:[consti] Integer Constant 
      IT_128 = 1

! 1430:[consti] Integer Constant 
      IT_127 = 1

! 1440:[const] Real Constant 
      RT_136 = 3.5

! 1450:[time-sig] Output of Simulation Time 
      RT_14 = TIME

! 1460:[consti] Integer Constant 
      IT_124 = 0

! 1470:[consti] Integer Constant 
      IT_125 = 0

! 1490:[consti] Integer Constant 
      IT_126 = 0

! 1520:[const] Real Constant 
      RT_137 = 4.5

! 1540:[sumjct] Summing/Differencing Junctions 
      RT_15 = + Time5 + Duration5

! 1580:[const] Real Constant 
      RT_81 = 13.5

! 1590:[time-sig] Output of Simulation Time 
      RT_41 = TIME

! 1610:[time-sig] Output of Simulation Time 
      RT_40 = TIME

! 1620:[consti] Integer Constant 
      IT_55 = 1

! 1630:[consti] Integer Constant 
      IT_56 = 1

! 1640:[consti] Integer Constant 
      IT_57 = 1

! 1650:[consti] Integer Constant 
      IT_58 = 1

! 1660:[consti] Integer Constant 
      IT_59 = 1

! 1670:[consti] Integer Constant 
      IT_60 = 1

! 1680:[consti] Integer Constant 
      IT_61 = 1

! 1690:[consti] Integer Constant 
      IT_62 = 1

! 1710:[consti] Integer Constant 
      IT_63 = 1

! 1720:[const] Real Constant 
      RT_78 = 5.5

! 1730:[time-sig] Output of Simulation Time 
      RT_18 = TIME

! 1750:[sumjct] Summing/Differencing Junctions 
      RT_39 = + Time14 + Duration14

! 1780:[time-sig] Output of Simulation Time 
      RT_17 = TIME

! 1830:[sumjct] Summing/Differencing Junctions 
      RT_16 = + Time6 + Duration6

! 1870:[const] Real Constant 
      RT_80 = 14.5

! 1880:[time-sig] Output of Simulation Time 
      RT_50 = TIME

! 1900:[time-sig] Output of Simulation Time 
      RT_49 = TIME

! 1920:[const] Real Constant 
      RT_79 = 6.5

! 1930:[time-sig] Output of Simulation Time 
      RT_19 = TIME

! 1950:[sumjct] Summing/Differencing Junctions 
      RT_48 = + Time15 + Duration15

! 1980:[time-sig] Output of Simulation Time 
      RT_20 = TIME

! 2030:[sumjct] Summing/Differencing Junctions 
      RT_21 = + Time7 + Duration7

! 2050:[const] Real Constant 
      RT_71 = 1.0

! 2070:[const] Real Constant 
      RT_143 = 0.01

! 2090:[const] Real Constant 
      RT_45 = 0.0

! 2100:[const] Real Constant 
      RT_46 = 0.0

! 2110:[const] Real Constant 
      RT_42 = 100.0

! 2120:[const] Real Constant 
      RT_88 = 7.5

! 2130:[time-sig] Output of Simulation Time 
      RT_91 = TIME

! 2140:[const] Real Constant 
      RT_43 = 9999999.0

! 2150:[const] Real Constant 
      RT_44 = 1.0

! 2170:[time-sig] Output of Simulation Time 
      RT_90 = TIME

! 2180:[const] Real Constant 
      RT_144 = 0.01

! 2190:[const] Real Constant 
      RT_47 = 0.0

! 2220:[sumjct] Summing/Differencing Junctions 
      RT_89 = + Time8 + Duration8

! 2270:[emtconst] Commonly Used Constants (pi...) 
      RT_67 = TWO_PI

! 2280:[const] Real Constant 
      RT_139 = 3.5

! 2290:[const] Real Constant 
      RT_138 = 4.5

! 2300:[const] Real Constant 
      RT_142 = 1.0

! 2310:[const] Real Constant 
      RT_151 = 0.05

! 2320:[time-sig] Output of Simulation Time 
      RT_149 = TIME

! 2330:[time-sig] Output of Simulation Time 
      RT_145 = TIME

! 2340:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_86,1.0,0.0,0.0,RVD2_1)
      RT_87 = RVD2_1(1)

! 2350:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_110 = NINT(RT_87)

! 2360:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_25,Time9,1.0,0.0,0.0,RVD2_1)
      RT_26 = RVD2_1(1)

! 2370:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_73,1.0,0.0,0.0,RVD2_1)
      RT_93 = RVD2_1(1)

! 2380:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_109 = NINT(RT_26)

! 2390:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_23,RT_22,0.0,0.0,1.0,RVD2_1)
      RT_24 = RVD2_1(1)

! 2400:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_4 = NINT(RT_93)

! 2410:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_108 = NINT(RT_24)

! 2420:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_1,Time1,1.0,0.0,0.0,RVD2_1)
      RT_94 = RVD2_1(1)

! 2430:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_3 = NINT(RT_94)

! 2440:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_2,RT_3,0.0,0.0,1.0,RVD2_1)
      RT_92 = RVD2_1(1)

! 2450:[datamerge] Merges data signals into an array 
      F9_data(1) = Time9
      F9_data(2) = Duration9
      F9_data(3) = REAL(Type9)
      F9_data(4) = Impedance9
      F9_data(5) = X_R9
      F9_data(6) = Capacity9

! 2460:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_2 = NINT(RT_92)

! 2470:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_85,1.0,0.0,0.0,RVD2_1)
      RT_132 = RVD2_1(1)

! 2480:[datamerge] Merges data signals into an array 
      F1_data(1) = Time1
      F1_data(2) = Duration1
      F1_data(3) = REAL(Type1)
      F1_data(4) = Impedance1
      F1_data(5) = X_R1
      F1_data(6) = Capacity1

! 2490:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_107 = NINT(RT_132)

! 2500:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_27,Time10,1.0,0.0,0.0,RVD2_1)
      RT_133 = RVD2_1(1)

! 2510:[datamerge] Merges data signals into an array 
      threePHG(1) = IT_35
      threePHG(2) = IT_34
      threePHG(3) = IT_33
      threePHG(4) = IT_32
      threePHG(5) = IT_31
      threePHG(6) = IT_30
      threePHG(7) = IT_42
      threePHG(8) = IT_43
      threePHG(9) = IT_44

! 2520:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_74,1.0,0.0,0.0,RVD2_1)
      RT_96 = RVD2_1(1)

! 2530:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_106 = NINT(RT_133)

! 2540:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_28,RT_29,0.0,0.0,1.0,RVD2_1)
      RT_131 = RVD2_1(1)

! 2550:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_77 = NINT(RT_96)

! 2560:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_105 = NINT(RT_131)

! 2570:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_6,Time2,1.0,0.0,0.0,RVD2_1)
      RT_97 = RVD2_1(1)

! 2580:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_76 = NINT(RT_97)

! 2590:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_5,RT_4,0.0,0.0,1.0,RVD2_1)
      RT_95 = RVD2_1(1)

! 2600:[datamerge] Merges data signals into an array 
      F10_data(1) = Time10
      F10_data(2) = Duration10
      F10_data(3) = REAL(Type10)
      F10_data(4) = Impedance10
      F10_data(5) = X_R10
      F10_data(6) = Capacity10

! 2610:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_75 = NINT(RT_95)

! 2620:[datamerge] Merges data signals into an array 
      twoPHG(1) = IT_18
      twoPHG(2) = IT_19
      twoPHG(3) = IT_20
      twoPHG(4) = IT_21
      twoPHG(5) = IT_22
      twoPHG(6) = IT_23
      twoPHG(7) = IT_51
      twoPHG(8) = IT_52
      twoPHG(9) = IT_53

! 2630:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_84,1.0,0.0,0.0,RVD2_1)
      RT_129 = RVD2_1(1)

! 2640:[datamerge] Merges data signals into an array 
      F2_data(1) = Time2
      F2_data(2) = Duration2
      F2_data(3) = REAL(Type2)
      F2_data(4) = Impedance2
      F2_data(5) = X_R2
      F2_data(6) = Capacity2

! 2650:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_113 = NINT(RT_129)

! 2660:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_30,Time11,1.0,0.0,0.0,RVD2_1)
      RT_130 = RVD2_1(1)

! 2670:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_75,1.0,0.0,0.0,RVD2_1)
      RT_99 = RVD2_1(1)

! 2680:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_112 = NINT(RT_130)

! 2690:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_31,RT_32,0.0,0.0,1.0,RVD2_1)
      RT_128 = RVD2_1(1)

! 2700:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_80 = NINT(RT_99)

! 2710:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_111 = NINT(RT_128)

! 2720:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_7,Time3,1.0,0.0,0.0,RVD2_1)
      RT_100 = RVD2_1(1)

! 2730:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_79 = NINT(RT_100)

! 2740:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_8,RT_9,0.0,0.0,1.0,RVD2_1)
      RT_98 = RVD2_1(1)

! 2750:[datamerge] Merges data signals into an array 
      F11_data(1) = Time11
      F11_data(2) = Duration11
      F11_data(3) = REAL(Type11)
      F11_data(4) = Impedance11
      F11_data(5) = X_R11
      F11_data(6) = Capacity11

! 2760:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_78 = NINT(RT_98)

! 2770:[datamerge] Merges data signals into an array 
      onePHG(1) = IT_41
      onePHG(2) = IT_40
      onePHG(3) = IT_39
      onePHG(4) = IT_38
      onePHG(5) = IT_37
      onePHG(6) = IT_36
      onePHG(7) = IT_45
      onePHG(8) = IT_46
      onePHG(9) = IT_47

! 2780:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_83,1.0,0.0,0.0,RVD2_1)
      RT_126 = RVD2_1(1)

! 2790:[datamerge] Merges data signals into an array 
      F3_data(1) = Time3
      F3_data(2) = Duration3
      F3_data(3) = REAL(Type3)
      F3_data(4) = Impedance3
      F3_data(5) = X_R3
      F3_data(6) = Capacity3

! 2800:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_104 = NINT(RT_126)

! 2810:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_35,Time12,1.0,0.0,0.0,RVD2_1)
      RT_127 = RVD2_1(1)

! 2820:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_76,1.0,0.0,0.0,RVD2_1)
      RT_102 = RVD2_1(1)

! 2830:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_103 = NINT(RT_127)

! 2840:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_34,RT_33,0.0,0.0,1.0,RVD2_1)
      RT_125 = RVD2_1(1)

! 2850:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_83 = NINT(RT_102)

! 2860:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_102 = NINT(RT_125)

! 2870:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_12,Time4,1.0,0.0,0.0,RVD2_1)
      RT_103 = RVD2_1(1)

! 2880:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_82 = NINT(RT_103)

! 2890:[datamerge] Merges data signals into an array 
      L_L(1) = IT_29
      L_L(2) = IT_28
      L_L(3) = IT_27
      L_L(4) = IT_26
      L_L(5) = IT_25
      L_L(6) = IT_24
      L_L(7) = IT_48
      L_L(8) = IT_49
      L_L(9) = IT_50

! 2900:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_11,RT_10,0.0,0.0,1.0,RVD2_1)
      RT_101 = RVD2_1(1)

! 2910:[datamerge] Merges data signals into an array 
      F12_data(1) = Time12
      F12_data(2) = Duration12
      F12_data(3) = REAL(Type12)
      F12_data(4) = Impedance12
      F12_data(5) = X_R12
      F12_data(6) = Capacity12

! 2920:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_81 = NINT(RT_101)

! 2930:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_82,1.0,0.0,0.0,RVD2_1)
      RT_123 = RVD2_1(1)

! 2940:[datamerge] Merges data signals into an array 
      F4_data(1) = Time4
      F4_data(2) = Duration4
      F4_data(3) = REAL(Type4)
      F4_data(4) = Impedance4
      F4_data(5) = X_R4
      F4_data(6) = Capacity4

! 2950:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_101 = NINT(RT_123)

! 2960:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_36,Time13,1.0,0.0,0.0,RVD2_1)
      RT_124 = RVD2_1(1)

! 2970:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_77,1.0,0.0,0.0,RVD2_1)
      RT_105 = RVD2_1(1)

! 2980:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_100 = NINT(RT_124)

! 2990:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_37,RT_38,0.0,0.0,1.0,RVD2_1)
      RT_122 = RVD2_1(1)

! 3000:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_86 = NINT(RT_105)

! 3010:[datamerge] Merges data signals into an array 
      tov_brk(1) = IT_132
      tov_brk(2) = IT_131
      tov_brk(3) = IT_130
      tov_brk(4) = IT_129
      tov_brk(5) = IT_128
      tov_brk(6) = IT_127
      tov_brk(7) = IT_124
      tov_brk(8) = IT_125
      tov_brk(9) = IT_126

! 3020:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_99 = NINT(RT_122)

! 3030:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_13,Time5,1.0,0.0,0.0,RVD2_1)
      RT_106 = RVD2_1(1)

! 3040:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_85 = NINT(RT_106)

! 3050:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_14,RT_15,0.0,0.0,1.0,RVD2_1)
      RT_104 = RVD2_1(1)

! 3060:[datamerge] Merges data signals into an array 
      F13_data(1) = Time13
      F13_data(2) = Duration13
      F13_data(3) = REAL(Type13)
      F13_data(4) = Impedance13
      F13_data(5) = X_R13
      F13_data(6) = Capacity13

! 3070:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_84 = NINT(RT_104)

! 3080:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_81,1.0,0.0,0.0,RVD2_1)
      RT_120 = RVD2_1(1)

! 3090:[datamerge] Merges data signals into an array 
      F5_data(1) = Time5
      F5_data(2) = Duration5
      F5_data(3) = REAL(Type5)
      F5_data(4) = Impedance5
      F5_data(5) = X_R5
      F5_data(6) = Capacity5

! 3100:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_98 = NINT(RT_120)

! 3110:[datamerge] Merges data signals into an array 
      no_fault(1) = IT_55
      no_fault(2) = IT_56
      no_fault(3) = IT_57
      no_fault(4) = IT_58
      no_fault(5) = IT_59
      no_fault(6) = IT_60
      no_fault(7) = IT_61
      no_fault(8) = IT_62
      no_fault(9) = IT_63

! 3120:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_41,Time14,1.0,0.0,0.0,RVD2_1)
      RT_121 = RVD2_1(1)

! 3130:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_78,1.0,0.0,0.0,RVD2_1)
      RT_108 = RVD2_1(1)

! 3140:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_97 = NINT(RT_121)

! 3150:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_40,RT_39,0.0,0.0,1.0,RVD2_1)
      RT_119 = RVD2_1(1)

! 3160:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_89 = NINT(RT_108)

! 3170:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_96 = NINT(RT_119)

! 3180:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_18,Time6,1.0,0.0,0.0,RVD2_1)
      RT_109 = RVD2_1(1)

! 3190:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_88 = NINT(RT_109)

! 3200:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_17,RT_16,0.0,0.0,1.0,RVD2_1)
      RT_107 = RVD2_1(1)

! 3210:[datamerge] Merges data signals into an array 
      F14_data(1) = Time14
      F14_data(2) = Duration14
      F14_data(3) = REAL(Type14)
      F14_data(4) = Impedance14
      F14_data(5) = X_R14
      F14_data(6) = Capacity14

! 3220:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_87 = NINT(RT_107)

! 3230:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_80,1.0,0.0,0.0,RVD2_1)
      RT_117 = RVD2_1(1)

! 3240:[datamerge] Merges data signals into an array 
      F6_data(1) = Time6
      F6_data(2) = Duration6
      F6_data(3) = REAL(Type6)
      F6_data(4) = Impedance6
      F6_data(5) = X_R6
      F6_data(6) = Capacity6

! 3250:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_95 = NINT(RT_117)

! 3260:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_50,Time15,1.0,0.0,0.0,RVD2_1)
      RT_118 = RVD2_1(1)

! 3270:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_79,1.0,0.0,0.0,RVD2_1)
      RT_111 = RVD2_1(1)

! 3280:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_94 = NINT(RT_118)

! 3290:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_92 = NINT(RT_111)

! 3300:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_49,RT_48,0.0,0.0,1.0,RVD2_1)
      RT_116 = RVD2_1(1)

! 3310:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_93 = NINT(RT_116)

! 3320:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_19,Time7,1.0,0.0,0.0,RVD2_1)
      RT_112 = RVD2_1(1)

! 3330:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_91 = NINT(RT_112)

! 3340:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_20,RT_21,0.0,0.0,1.0,RVD2_1)
      RT_110 = RVD2_1(1)

! 3350:[datamerge] Merges data signals into an array 
      F15_data(1) = Time15
      F15_data(2) = Duration15
      F15_data(3) = REAL(Type15)
      F15_data(4) = Impedance15
      F15_data(5) = X_R15
      F15_data(6) = Capacity15

! 3360:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_90 = NINT(RT_110)

! 3370:[datamerge] Merges data signals into an array 
      F7_data(1) = Time7
      F7_data(2) = Duration7
      F7_data(3) = REAL(Type7)
      F7_data(4) = Impedance7
      F7_data(5) = X_R7
      F7_data(6) = Capacity7

! 3380:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,REAL(N_faults),RT_88,1.0,0.0,0.0,RVD2_1)
      RT_114 = RVD2_1(1)

! 3390:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_117 = NINT(RT_114)

! 3400:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_91,Time8,1.0,0.0,0.0,RVD2_1)
      RT_115 = RVD2_1(1)

! 3410:[datamerge] Merges data signals into an array 
      Fnone(1) = RT_45
      Fnone(2) = RT_46
      Fnone(3) = RT_42
      Fnone(4) = RT_43
      Fnone(5) = RT_44
      Fnone(6) = RT_47

! 3420:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_116 = NINT(RT_115)

! 3430:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_90,RT_89,0.0,0.0,1.0,RVD2_1)
      RT_113 = RVD2_1(1)

! 3440:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_115 = NINT(RT_113)

! 3450:[datamerge] Merges data signals into an array 
      F8_data(1) = Time8
      F8_data(2) = Duration8
      F8_data(3) = REAL(Type8)
      F8_data(4) = Impedance8
      F8_data(5) = X_R8
      F8_data(6) = Capacity8

! 3460:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_110 .NE. 0) .AND. (IT_109 .NE. 0) .AND. (IT_108 .NE. 0) )&
     & THEN
        IT_11 = 1
      ELSE
        IT_11 = 0
      ENDIF

! 3470:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_4 .NE. 0) .AND. (IT_3 .NE. 0) .AND. (IT_2 .NE. 0) ) THEN
        IT_1 = 1
      ELSE
        IT_1 = 0
      ENDIF

! 3480:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_107 .NE. 0) .AND. (IT_106 .NE. 0) .AND. (IT_105 .NE. 0) )&
     & THEN
        IT_12 = 1
      ELSE
        IT_12 = 0
      ENDIF

! 3490:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_77 .NE. 0) .AND. (IT_76 .NE. 0) .AND. (IT_75 .NE. 0) ) TH&
     &EN
        IT_5 = 1
      ELSE
        IT_5 = 0
      ENDIF

! 3500:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_113 .NE. 0) .AND. (IT_112 .NE. 0) .AND. (IT_111 .NE. 0) )&
     & THEN
        IT_13 = 1
      ELSE
        IT_13 = 0
      ENDIF

! 3510:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_80 .NE. 0) .AND. (IT_79 .NE. 0) .AND. (IT_78 .NE. 0) ) TH&
     &EN
        IT_6 = 1
      ELSE
        IT_6 = 0
      ENDIF

! 3520:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_104 .NE. 0) .AND. (IT_103 .NE. 0) .AND. (IT_102 .NE. 0) )&
     & THEN
        IT_14 = 1
      ELSE
        IT_14 = 0
      ENDIF

! 3530:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_83 .NE. 0) .AND. (IT_82 .NE. 0) .AND. (IT_81 .NE. 0) ) TH&
     &EN
        IT_7 = 1
      ELSE
        IT_7 = 0
      ENDIF

! 3540:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_101 .NE. 0) .AND. (IT_100 .NE. 0) .AND. (IT_99 .NE. 0) ) &
     &THEN
        IT_15 = 1
      ELSE
        IT_15 = 0
      ENDIF

! 3550:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_86 .NE. 0) .AND. (IT_85 .NE. 0) .AND. (IT_84 .NE. 0) ) TH&
     &EN
        IT_8 = 1
      ELSE
        IT_8 = 0
      ENDIF

! 3560:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_98 .NE. 0) .AND. (IT_97 .NE. 0) .AND. (IT_96 .NE. 0) ) TH&
     &EN
        IT_16 = 1
      ELSE
        IT_16 = 0
      ENDIF

! 3570:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_89 .NE. 0) .AND. (IT_88 .NE. 0) .AND. (IT_87 .NE. 0) ) TH&
     &EN
        IT_9 = 1
      ELSE
        IT_9 = 0
      ENDIF

! 3580:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_95 .NE. 0) .AND. (IT_94 .NE. 0) .AND. (IT_93 .NE. 0) ) TH&
     &EN
        IT_17 = 1
      ELSE
        IT_17 = 0
      ENDIF

! 3590:[select] Two Input Selector 
      IF (IT_17 .EQ. RTCI(NRTCI)) THEN
         F15_out = F15_data
      ELSE
         F15_out = Fnone
      ENDIF
      NRTCI = NRTCI + 1
!

! 3600:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_92 .NE. 0) .AND. (IT_91 .NE. 0) .AND. (IT_90 .NE. 0) ) TH&
     &EN
        IT_10 = 1
      ELSE
        IT_10 = 0
      ENDIF

! 3610:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_117 .NE. 0) .AND. (IT_116 .NE. 0) .AND. (IT_115 .NE. 0) )&
     & THEN
        IT_114 = 1
      ELSE
        IT_114 = 0
      ENDIF

! 3620:[select] Two Input Selector 
      IF (IT_16 .EQ. RTCI(NRTCI)) THEN
         F14_out = F14_data
      ELSE
         F14_out = F15_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3630:[select] Two Input Selector 
      IF (IT_15 .EQ. RTCI(NRTCI)) THEN
         F13_out = F13_data
      ELSE
         F13_out = F14_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3640:[select] Two Input Selector 
      IF (IT_14 .EQ. RTCI(NRTCI)) THEN
         F12_out = F12_data
      ELSE
         F12_out = F13_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3650:[select] Two Input Selector 
      IF (IT_13 .EQ. RTCI(NRTCI)) THEN
         F11_out = F11_data
      ELSE
         F11_out = F12_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3660:[select] Two Input Selector 
      IF (IT_12 .EQ. RTCI(NRTCI)) THEN
         F10_out = F10_data
      ELSE
         F10_out = F11_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3670:[select] Two Input Selector 
      IF (IT_11 .EQ. RTCI(NRTCI)) THEN
         F9_out = F9_data
      ELSE
         F9_out = F10_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3680:[select] Two Input Selector 
      IF (IT_114 .EQ. RTCI(NRTCI)) THEN
         F8_out = F8_data
      ELSE
         F8_out = F9_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3690:[select] Two Input Selector 
      IF (IT_10 .EQ. RTCI(NRTCI)) THEN
         F7_out = F7_data
      ELSE
         F7_out = F8_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3700:[select] Two Input Selector 
      IF (IT_9 .EQ. RTCI(NRTCI)) THEN
         F6_out = F6_data
      ELSE
         F6_out = F7_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3710:[select] Two Input Selector 
      IF (IT_8 .EQ. RTCI(NRTCI)) THEN
         F5_out = F5_data
      ELSE
         F5_out = F6_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3720:[select] Two Input Selector 
      IF (IT_7 .EQ. RTCI(NRTCI)) THEN
         F4_out = F4_data
      ELSE
         F4_out = F5_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3730:[select] Two Input Selector 
      IF (IT_6 .EQ. RTCI(NRTCI)) THEN
         F3_out = F3_data
      ELSE
         F3_out = F4_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3740:[select] Two Input Selector 
      IF (IT_5 .EQ. RTCI(NRTCI)) THEN
         F2_out = F2_data
      ELSE
         F2_out = F3_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3750:[select] Two Input Selector 
      IF (IT_1 .EQ. RTCI(NRTCI)) THEN
         F_data_active = F1_data
      ELSE
         F_data_active = F2_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 3760:[select] Two Input Selector 
      IF (status .EQ. RTCI(NRTCI)) THEN
         F_data = F_data_active
      ELSE
         F_data = Fnone
      ENDIF
      NRTCI = NRTCI + 1
!

! 3770:[datatap] Scalar/Array Tap 
      Fype = F_data(3)

! 3780:[datatap] Scalar/Array Tap 
      FX_R = F_data(5)

! 3790:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_138,0.0,0.0,1.0,RVD2_1)
      RT_141 = RVD2_1(1)

! 3800:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_139,1.0,0.0,0.0,RVD2_1)
      RT_140 = RVD2_1(1)

! 3810:[square] Square 
      RT_72 = FX_R * FX_R

! 3820:[sumjct] Summing/Differencing Junctions 
      RT_70 = + RT_71 + RT_72

! 3830:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_137,0.0,0.0,1.0,RVD2_1)
      RT_134 = RVD2_1(1)

! 3840:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_136,1.0,0.0,0.0,RVD2_1)
      RT_135 = RVD2_1(1)

! 3850:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_63,0.0,0.0,1.0,RVD2_1)
      RT_66 = RVD2_1(1)

! 3860:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_64,1.0,0.0,0.0,RVD2_1)
      RT_65 = RVD2_1(1)

! 3870:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_60,0.0,0.0,1.0,RVD2_1)
      RT_61 = RVD2_1(1)

! 3880:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_59,1.0,0.0,0.0,RVD2_1)
      RT_62 = RVD2_1(1)

! 3890:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_55,0.0,0.0,1.0,RVD2_1)
      RT_58 = RVD2_1(1)

! 3900:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_56,1.0,0.0,0.0,RVD2_1)
      RT_57 = RVD2_1(1)

! 3910:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_52,0.0,0.0,1.0,RVD2_1)
      RT_53 = RVD2_1(1)

! 3920:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,Fype,RT_51,1.0,0.0,0.0,RVD2_1)
      RT_54 = RVD2_1(1)

! 3930:[datatap] Scalar/Array Tap 
      Ftime = F_data(1)

! 3940:[datatap] Scalar/Array Tap 
      Fimpedance = F_data(4)

! 3950:[tdelay] Delay Function 
      CALL DELAY2_EXE(Ftime,RT_153)

! 3960:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_123 = NINT(RT_141)

! 3970:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_122 = NINT(RT_140)

! 3980:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_70 .LT. 0.0) THEN
        RT_69 = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,2071270126,1,2,"A negative value i&
     &s detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,2071270126,1,-1,"Input is treated &
     &as 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         RT_69 = SQRT(RT_70)
      ENDIF
      NSTORL = NSTORL + 1

! 3990:[div] Divider 
      IF (ABS(RT_69) .LT. 1.0E-100) THEN
         IF (RT_69 .LT. 0.0)  THEN
            R_pre = -1.0E100 * Fimpedance
         ELSE
            R_pre =  1.0E100 * Fimpedance
         ENDIF
      ELSE
         R_pre = Fimpedance / RT_69
      ENDIF

! 4000:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_118 = NINT(RT_134)

! 4010:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_119 = NINT(RT_135)

! 4020:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_74 = NINT(RT_66)

! 4030:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_73 = NINT(RT_65)

! 4040:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_71 = NINT(RT_61)

! 4050:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_70 = NINT(RT_62)

! 4060:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_68 = NINT(RT_58)

! 4070:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_67 = NINT(RT_57)

! 4080:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_65 = NINT(RT_53)

! 4090:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_64 = NINT(RT_54)

! 4100:[datatap] Scalar/Array Tap 
      Fduration = F_data(2)

! 4110:[tdelay] Delay Function 
      CALL DELAY2_EXE(Fduration,RT_154)

! 4120:[sumjct] Summing/Differencing Junctions 
      RT_152 = + RT_153 + RT_154

! 4130:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_122 .NE. 0) .AND. (IT_123 .NE. 0) ) THEN
        IT_121 = 1
      ELSE
        IT_121 = 0
      ENDIF

! 4140:[mult] Multiplier 
      X_pre = R_pre * FX_R

! 4150:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_119 .NE. 0) .AND. (IT_118 .NE. 0) ) THEN
        IT_120 = 1
      ELSE
        IT_120 = 0
      ENDIF

! 4160:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_73 .NE. 0) .AND. (IT_74 .NE. 0) ) THEN
        IT_72 = 1
      ELSE
        IT_72 = 0
      ENDIF

! 4170:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_70 .NE. 0) .AND. (IT_71 .NE. 0) ) THEN
        IT_69 = 1
      ELSE
        IT_69 = 0
      ENDIF

! 4180:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_67 .NE. 0) .AND. (IT_68 .NE. 0) ) THEN
        IT_66 = 1
      ELSE
        IT_66 = 0
      ENDIF

! 4190:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_64 .NE. 0) .AND. (IT_65 .NE. 0) ) THEN
        IT_54 = 1
      ELSE
        IT_54 = 0
      ENDIF

! 4200:[datatap] Scalar/Array Tap 
      capacitance = F_data(6)

! 4210:[sumjct] Summing/Differencing Junctions 
      RT_148 = + RT_152 + RT_151

! 4220:[select] Two Input Selector 
      IF (IT_121 .EQ. RTCI(NRTCI)) THEN
         C_pre = capacitance
      ELSE
         C_pre = RT_142
      ENDIF
      NRTCI = NRTCI + 1
!

! 4230:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_144,X_pre,0.01,0.0,X_pre,RVD2_1)
      X = RVD2_1(1)

! 4240:[select] Two Input Selector 
      IF (IT_120 .EQ. RTCI(NRTCI)) THEN
         TOV_out = tov_brk
      ELSE
         TOV_out = no_fault
      ENDIF
      NRTCI = NRTCI + 1
!

! 4250:[select] Two Input Selector 
      IF (IT_72 .EQ. RTCI(NRTCI)) THEN
         L_L_out = L_L
      ELSE
         L_L_out = TOV_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 4260:[select] Two Input Selector 
      IF (IT_69 .EQ. RTCI(NRTCI)) THEN
         onePHG_out = onePHG
      ELSE
         onePHG_out = L_L_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 4270:[select] Two Input Selector 
      IF (IT_66 .EQ. RTCI(NRTCI)) THEN
         twoPHG_out = twoPHG
      ELSE
         twoPHG_out = onePHG_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 4280:[select] Two Input Selector 
      IF (IT_54 .EQ. RTCI(NRTCI)) THEN
         breakerStatus = threePHG
      ELSE
         breakerStatus = twoPHG_out
      ENDIF
      NRTCI = NRTCI + 1
!

! 4290:[tdelay] Delay Function 
      CALL DELAY2_EXE(Ftime,RT_146)

! 4300:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_145,RT_146,1.0,0.0,0.0,RVD2_1)
      RT_147 = RVD2_1(1)

! 4310:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_148,RT_149,1.0,0.0,0.0,RVD2_1)
      RT_150 = RVD2_1(1)

! 4320:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (NINT(RT_150) .NE. 0) .AND. (NINT(RT_147) .NE. 0) ) THEN
        IT_133 = 1
      ELSE
        IT_133 = 0
      ENDIF

! 4330:[sandhdefn] Sample and Hold 
!  Sample and Hold
      CALL SANDH2(C_pre,IT_133,  1,  C)

! 4340:[mult] Multiplier 
      RT_68 = Fbase * RT_67

! 4350:[div] Divider 
      IF (ABS(RT_68) .LT. 1.0E-100) THEN
         IF (RT_68 .LT. 0.0)  THEN
            L = -1.0E100 * X
         ELSE
            L =  1.0E100 * X
         ENDIF
      ELSE
         L = X / RT_68
      ENDIF

! 4360:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_143,R_pre,0.01,0.0,R_pre,RVD2_1)
      R = RVD2_1(1)

! 4370:[datatap] Scalar/Array Tap 
      BRK3C = breakerStatus(9)

! 4380:[datatap] Scalar/Array Tap 
      BRK2C = breakerStatus(8)

! 4390:[datatap] Scalar/Array Tap 
      BRK1C = breakerStatus(7)

! 4400:[datatap] Scalar/Array Tap 
      BRK1_3 = breakerStatus(6)

! 4410:[datatap] Scalar/Array Tap 
      BRK2_3 = breakerStatus(5)

! 4420:[datatap] Scalar/Array Tap 
      BRK1_2 = breakerStatus(4)

! 4430:[datatap] Scalar/Array Tap 
      BRK3 = breakerStatus(3)

! 4440:[datatap] Scalar/Array Tap 
      BRK2 = breakerStatus(2)

! 4450:[datatap] Scalar/Array Tap 
      BRK1 = breakerStatus(1)

! 4460:[breaker1] Single Phase Breaker 'BRK3C'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+18),0.005,1000000.0,0,NINT(1.0-&
     &REAL(BRK3C)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+18),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1867043195,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+18),SS(1)))

! 4470:[breaker1] Single Phase Breaker 'BRK3'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+7),0.005,1000000.0,0,NINT(1.0-R&
     &EAL(BRK3)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+7),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,737123005,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+7),SS(1)))

! 4480:[breaker1] Single Phase Breaker 'BRK2C'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+17),0.005,1000000.0,0,NINT(1.0-&
     &REAL(BRK2C)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+17),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1640244187,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+17),SS(1)))

! 4490:[breaker1] Single Phase Breaker 'BRK2'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+6),0.005,1000000.0,0,NINT(1.0-R&
     &EAL(BRK2)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+6),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,712146858,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+6),SS(1)))

! 4500:[breaker1] Single Phase Breaker 'BRK1C'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+16),0.005,1000000.0,0,NINT(1.0-&
     &REAL(BRK1C)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+16),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,228360876,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+16),SS(1)))

! 4510:[breaker1] Single Phase Breaker 'BRK1'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+5),0.005,1000000.0,0,NINT(1.0-R&
     &EAL(BRK1)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+5),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1532214641,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+5),SS(1)))

! 4520:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+13),SS(1),0,0,1,1.0,1.0,C)

! 4530:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+12),SS(1),1,1,0,R,L,1.0)

! 4540:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+14),SS(1),0,0,1,1.0,1.0,C)

! 4550:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+11),SS(1),1,1,0,R,L,1.0)

! 4560:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+15),SS(1),0,0,1,1.0,1.0,C)

! 4570:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+10),SS(1),1,1,0,R,L,1.0)

! 4580:[breaker1] Single Phase Breaker 'BRK1_3'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+4),0.005,1000000.0,0,NINT(1.0-R&
     &EAL(BRK1_3)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,230208412,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+4),SS(1)))

! 4590:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+9),SS(1),1,1,0,R,L,1.0)

! 4600:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+8),SS(1),1,1,0,R,L,1.0)

! 4610:[breaker1] Single Phase Breaker 'BRK2_3'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+3),0.005,1000000.0,0,NINT(1.0-R&
     &EAL(BRK2_3)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,520420120,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+3),SS(1)))

! 4620:[breaker1] Single Phase Breaker 'BRK1_2'
      IVD1_2 = NSTORI
      NSTORI = NSTORI + 1
      CALL E1PBRKR1_EXE(SS(1), (IBRCH(1)+2),0.005,1000000.0,0,NINT(1.0-R&
     &EAL(BRK1_2)))
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))
      IF (FIRSTSTEP .OR. (STORI(IVD1_2) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,35916684,IVD1_1,"BOpen")
      ENDIF
      STORI(IVD1_2) = 2*E_BtoI(OPENBR( (IBRCH(1)+2),SS(1)))

! 4630:[var_impedance] Variable Series Impedance Branch 
      CALL E_VARIMPBRANCH( (IBRCH(1)+1),SS(1),1,1,0,R,L,1.0)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 1) = Time15
      STOF(ISTOF + 2) = Duration15
      STOI(ISTOI + 1) = Type15
      STOF(ISTOF + 3) = Impedance15
      STOF(ISTOF + 4) = Time14
      STOF(ISTOF + 5) = Duration14
      STOI(ISTOI + 2) = Type14
      STOF(ISTOF + 6) = Impedance14
      STOF(ISTOF + 7) = Time13
      STOF(ISTOF + 8) = Duration13
      STOI(ISTOI + 3) = Type13
      STOF(ISTOF + 9) = Impedance13
      STOF(ISTOF + 10) = Time12
      STOF(ISTOF + 11) = Duration12
      STOI(ISTOI + 4) = Type12
      STOF(ISTOF + 12) = Impedance12
      STOF(ISTOF + 13) = Time11
      STOF(ISTOF + 14) = Duration11
      STOI(ISTOI + 5) = Type11
      STOF(ISTOF + 15) = Impedance11
      STOF(ISTOF + 16) = Time10
      STOF(ISTOF + 17) = Duration10
      STOI(ISTOI + 6) = Type10
      STOF(ISTOF + 18) = Impedance10
      STOF(ISTOF + 19) = Time9
      STOF(ISTOF + 20) = Duration9
      STOI(ISTOI + 7) = Type9
      STOF(ISTOF + 21) = Impedance9
      STOF(ISTOF + 22) = Time8
      STOF(ISTOF + 23) = Duration8
      STOI(ISTOI + 8) = Type8
      STOF(ISTOF + 24) = Impedance8
      STOF(ISTOF + 25) = Time7
      STOF(ISTOF + 26) = Duration7
      STOI(ISTOI + 9) = Type7
      STOF(ISTOF + 27) = Impedance7
      STOF(ISTOF + 28) = Time6
      STOF(ISTOF + 29) = Duration6
      STOI(ISTOI + 10) = Type6
      STOF(ISTOF + 30) = Impedance6
      STOF(ISTOF + 31) = Time5
      STOF(ISTOF + 32) = Duration5
      STOI(ISTOI + 11) = Type5
      STOF(ISTOF + 33) = Impedance5
      STOF(ISTOF + 34) = Time4
      STOF(ISTOF + 35) = Duration4
      STOI(ISTOI + 12) = Type4
      STOF(ISTOF + 36) = Impedance4
      STOF(ISTOF + 37) = Time3
      STOF(ISTOF + 38) = Duration3
      STOI(ISTOI + 13) = Type3
      STOF(ISTOF + 39) = Impedance3
      STOF(ISTOF + 40) = Time2
      STOF(ISTOF + 41) = Duration2
      STOI(ISTOI + 14) = Type2
      STOF(ISTOF + 42) = Impedance2
      STOF(ISTOF + 43) = X_R15
      STOF(ISTOF + 44) = X_R14
      STOF(ISTOF + 45) = X_R13
      STOF(ISTOF + 46) = X_R12
      STOF(ISTOF + 47) = X_R11
      STOF(ISTOF + 48) = X_R10
      STOF(ISTOF + 49) = X_R9
      STOF(ISTOF + 50) = X_R8
      STOF(ISTOF + 51) = X_R7
      STOF(ISTOF + 52) = X_R6
      STOF(ISTOF + 53) = X_R5
      STOF(ISTOF + 54) = X_R4
      STOF(ISTOF + 55) = X_R3
      STOF(ISTOF + 56) = X_R2
      STOI(ISTOI + 15) = status
      STOI(ISTOI + 16) = N_faults
      STOF(ISTOF + 57) = Time1
      STOF(ISTOF + 58) = Duration1
      STOI(ISTOI + 17) = Type1
      STOF(ISTOF + 59) = Impedance1
      STOF(ISTOF + 60) = X_R1
      STOF(ISTOF + 61) = Fbase
      STOF(ISTOF + 62) = Capacity1
      STOF(ISTOF + 63) = Capacity2
      STOF(ISTOF + 64) = Capacity3
      STOF(ISTOF + 65) = Capacity4
      STOF(ISTOF + 66) = Capacity5
      STOF(ISTOF + 67) = Capacity6
      STOF(ISTOF + 68) = Capacity7
      STOF(ISTOF + 69) = Capacity8
      STOF(ISTOF + 70) = Capacity9
      STOF(ISTOF + 71) = Capacity10
      STOF(ISTOF + 72) = Capacity11
      STOF(ISTOF + 73) = Capacity12
      STOF(ISTOF + 74) = Capacity13
      STOF(ISTOF + 75) = Capacity14
      STOF(ISTOF + 76) = Capacity15
      STOF(ISTOF + 77) = RT_1
      STOI(ISTOI + 18) = IT_1
      STOI(ISTOI + 19) = IT_2
      STOI(ISTOI + 20) = IT_3
      STOI(ISTOI + 21) = IT_4
      STOF(ISTOF + 78) = RT_2
      STOF(ISTOF + 79) = RT_3
      STOF(ISTOF + 86) = RT_4
      STOF(ISTOF + 87) = RT_5
      STOF(ISTOF + 88) = RT_6
      STOF(ISTOF + 95) = RT_7
      STOF(ISTOF + 96) = RT_8
      STOF(ISTOF + 97) = RT_9
      STOF(ISTOF + 98) = RT_10
      STOF(ISTOF + 99) = RT_11
      STOF(ISTOF + 100) = RT_12
      STOF(ISTOF + 107) = RT_13
      STOF(ISTOF + 108) = RT_14
      STOF(ISTOF + 109) = RT_15
      STOF(ISTOF + 110) = RT_16
      STOF(ISTOF + 111) = RT_17
      STOF(ISTOF + 112) = RT_18
      STOF(ISTOF + 119) = RT_19
      STOF(ISTOF + 120) = RT_20
      STOF(ISTOF + 121) = RT_21
      STOI(ISTOI + 22) = IT_5
      STOI(ISTOI + 23) = IT_6
      STOI(ISTOI + 24) = IT_7
      STOI(ISTOI + 25) = IT_8
      STOI(ISTOI + 26) = IT_9
      STOI(ISTOI + 27) = IT_10
      STOF(ISTOF + 176) = RT_22
      STOF(ISTOF + 177) = RT_23
      STOF(ISTOF + 178) = RT_24
      STOF(ISTOF + 179) = RT_25
      STOF(ISTOF + 180) = RT_26
      STOI(ISTOI + 28) = IT_11
      STOI(ISTOI + 29) = IT_12
      STOF(ISTOF + 199) = RT_27
      STOF(ISTOF + 200) = RT_28
      STOF(ISTOF + 201) = RT_29
      STOI(ISTOI + 30) = IT_13
      STOF(ISTOF + 214) = RT_30
      STOF(ISTOF + 215) = RT_31
      STOF(ISTOF + 216) = RT_32
      STOF(ISTOF + 217) = RT_33
      STOF(ISTOF + 218) = RT_34
      STOF(ISTOF + 219) = RT_35
      STOI(ISTOI + 31) = IT_14
      STOI(ISTOI + 32) = IT_15
      STOF(ISTOF + 244) = RT_36
      STOF(ISTOF + 245) = RT_37
      STOF(ISTOF + 246) = RT_38
      STOF(ISTOF + 247) = RT_39
      STOF(ISTOF + 248) = RT_40
      STOF(ISTOF + 249) = RT_41
      STOI(ISTOI + 33) = IT_16
      STOF(ISTOF + 262) = RT_42
      STOF(ISTOF + 263) = RT_43
      STOF(ISTOF + 264) = RT_44
      STOF(ISTOF + 265) = RT_45
      STOF(ISTOF + 266) = RT_46
      STOF(ISTOF + 267) = RT_47
      STOF(ISTOF + 268) = RT_48
      STOF(ISTOF + 269) = RT_49
      STOF(ISTOF + 270) = RT_50
      STOI(ISTOI + 34) = IT_17
      STOI(ISTOI + 35) = IT_18
      STOI(ISTOI + 36) = IT_19
      STOI(ISTOI + 37) = IT_20
      STOI(ISTOI + 38) = IT_21
      STOI(ISTOI + 39) = IT_22
      STOI(ISTOI + 40) = IT_23
      STOI(ISTOI + 41) = IT_24
      STOI(ISTOI + 42) = IT_25
      STOI(ISTOI + 43) = IT_26
      STOI(ISTOI + 44) = IT_27
      STOI(ISTOI + 45) = IT_28
      STOI(ISTOI + 46) = IT_29
      STOI(ISTOI + 47) = IT_30
      STOI(ISTOI + 48) = IT_31
      STOI(ISTOI + 49) = IT_32
      STOI(ISTOI + 50) = IT_33
      STOI(ISTOI + 51) = IT_34
      STOI(ISTOI + 52) = IT_35
      STOI(ISTOI + 53) = IT_36
      STOI(ISTOI + 54) = IT_37
      STOI(ISTOI + 55) = IT_38
      STOI(ISTOI + 56) = IT_39
      STOI(ISTOI + 57) = IT_40
      STOI(ISTOI + 58) = IT_41
      STOI(ISTOI + 59) = IT_42
      STOI(ISTOI + 60) = IT_43
      STOI(ISTOI + 61) = IT_44
      STOI(ISTOI + 62) = IT_45
      STOI(ISTOI + 63) = IT_46
      STOI(ISTOI + 64) = IT_47
      STOI(ISTOI + 65) = IT_48
      STOI(ISTOI + 66) = IT_49
      STOI(ISTOI + 67) = IT_50
      STOI(ISTOI + 68) = IT_51
      STOI(ISTOI + 69) = IT_52
      STOI(ISTOI + 70) = IT_53
      STOI(ISTOI + 71) = IT_54
      STOF(ISTOF + 283) = RT_51
      STOI(ISTOI + 81) = IT_55
      STOI(ISTOI + 82) = IT_56
      STOI(ISTOI + 83) = IT_57
      STOI(ISTOI + 84) = IT_58
      STOI(ISTOI + 85) = IT_59
      STOI(ISTOI + 86) = IT_60
      STOI(ISTOI + 87) = IT_61
      STOI(ISTOI + 88) = IT_62
      STOI(ISTOI + 89) = IT_63
      STOI(ISTOI + 90) = IT_64
      STOI(ISTOI + 91) = IT_65
      STOF(ISTOF + 284) = RT_52
      STOF(ISTOF + 285) = RT_53
      STOF(ISTOF + 286) = RT_54
      STOF(ISTOF + 287) = RT_55
      STOF(ISTOF + 288) = RT_56
      STOF(ISTOF + 289) = RT_57
      STOF(ISTOF + 290) = RT_58
      STOI(ISTOI + 92) = IT_66
      STOI(ISTOI + 93) = IT_67
      STOI(ISTOI + 94) = IT_68
      STOI(ISTOI + 122) = IT_69
      STOF(ISTOF + 291) = RT_59
      STOI(ISTOI + 141) = IT_70
      STOI(ISTOI + 142) = IT_71
      STOF(ISTOF + 292) = RT_60
      STOF(ISTOF + 293) = RT_61
      STOF(ISTOF + 294) = RT_62
      STOF(ISTOF + 295) = RT_63
      STOF(ISTOF + 296) = RT_64
      STOF(ISTOF + 297) = RT_65
      STOF(ISTOF + 298) = RT_66
      STOI(ISTOI + 143) = IT_72
      STOI(ISTOI + 144) = IT_73
      STOI(ISTOI + 145) = IT_74
      STOF(ISTOF + 299) = RT_67
      STOF(ISTOF + 300) = L
      STOF(ISTOF + 301) = RT_68
      STOF(ISTOF + 302) = RT_69
      STOF(ISTOF + 303) = RT_70
      STOF(ISTOF + 304) = RT_71
      STOF(ISTOF + 305) = RT_72
      STOF(ISTOF + 306) = Fimpedance
      STOF(ISTOF + 307) = FX_R
      STOF(ISTOF + 308) = RT_73
      STOF(ISTOF + 309) = RT_74
      STOF(ISTOF + 310) = RT_75
      STOF(ISTOF + 311) = RT_76
      STOF(ISTOF + 312) = RT_77
      STOF(ISTOF + 313) = RT_78
      STOF(ISTOF + 314) = RT_79
      STOF(ISTOF + 315) = RT_80
      STOF(ISTOF + 316) = RT_81
      STOF(ISTOF + 317) = RT_82
      STOF(ISTOF + 318) = RT_83
      STOF(ISTOF + 319) = RT_84
      STOF(ISTOF + 320) = RT_85
      STOF(ISTOF + 321) = RT_86
      STOF(ISTOF + 322) = RT_87
      STOI(ISTOI + 155) = IT_75
      STOI(ISTOI + 156) = IT_76
      STOI(ISTOI + 157) = IT_77
      STOI(ISTOI + 158) = IT_78
      STOI(ISTOI + 159) = IT_79
      STOI(ISTOI + 160) = IT_80
      STOI(ISTOI + 161) = IT_81
      STOI(ISTOI + 162) = IT_82
      STOI(ISTOI + 163) = IT_83
      STOI(ISTOI + 164) = IT_84
      STOI(ISTOI + 165) = IT_85
      STOI(ISTOI + 166) = IT_86
      STOI(ISTOI + 167) = IT_87
      STOI(ISTOI + 168) = IT_88
      STOI(ISTOI + 169) = IT_89
      STOI(ISTOI + 170) = IT_90
      STOI(ISTOI + 171) = IT_91
      STOI(ISTOI + 172) = IT_92
      STOI(ISTOI + 173) = IT_93
      STOI(ISTOI + 174) = IT_94
      STOI(ISTOI + 175) = IT_95
      STOI(ISTOI + 176) = IT_96
      STOI(ISTOI + 177) = IT_97
      STOI(ISTOI + 178) = IT_98
      STOI(ISTOI + 179) = IT_99
      STOI(ISTOI + 180) = IT_100
      STOI(ISTOI + 181) = IT_101
      STOI(ISTOI + 182) = IT_102
      STOI(ISTOI + 183) = IT_103
      STOI(ISTOI + 184) = IT_104
      STOI(ISTOI + 185) = IT_105
      STOI(ISTOI + 186) = IT_106
      STOI(ISTOI + 187) = IT_107
      STOI(ISTOI + 188) = IT_108
      STOI(ISTOI + 189) = IT_109
      STOI(ISTOI + 190) = IT_110
      STOI(ISTOI + 191) = IT_111
      STOI(ISTOI + 192) = IT_112
      STOI(ISTOI + 193) = IT_113
      STOI(ISTOI + 194) = IT_114
      STOI(ISTOI + 195) = IT_115
      STOI(ISTOI + 196) = IT_116
      STOI(ISTOI + 197) = IT_117
      STOF(ISTOF + 323) = RT_88
      STOF(ISTOF + 324) = RT_89
      STOF(ISTOF + 325) = RT_90
      STOF(ISTOF + 326) = RT_91
      STOF(ISTOF + 345) = RT_92
      STOF(ISTOF + 346) = RT_93
      STOF(ISTOF + 347) = RT_94
      STOF(ISTOF + 348) = RT_95
      STOF(ISTOF + 349) = RT_96
      STOF(ISTOF + 350) = RT_97
      STOF(ISTOF + 351) = RT_98
      STOF(ISTOF + 352) = RT_99
      STOF(ISTOF + 353) = RT_100
      STOF(ISTOF + 354) = RT_101
      STOF(ISTOF + 355) = RT_102
      STOF(ISTOF + 356) = RT_103
      STOF(ISTOF + 357) = RT_104
      STOF(ISTOF + 358) = RT_105
      STOF(ISTOF + 359) = RT_106
      STOF(ISTOF + 360) = RT_107
      STOF(ISTOF + 361) = RT_108
      STOF(ISTOF + 362) = RT_109
      STOF(ISTOF + 363) = RT_110
      STOF(ISTOF + 364) = RT_111
      STOF(ISTOF + 365) = RT_112
      STOF(ISTOF + 366) = RT_113
      STOF(ISTOF + 367) = RT_114
      STOF(ISTOF + 368) = RT_115
      STOF(ISTOF + 369) = RT_116
      STOF(ISTOF + 370) = RT_117
      STOF(ISTOF + 371) = RT_118
      STOF(ISTOF + 372) = RT_119
      STOF(ISTOF + 373) = RT_120
      STOF(ISTOF + 374) = RT_121
      STOF(ISTOF + 375) = RT_122
      STOF(ISTOF + 376) = RT_123
      STOF(ISTOF + 377) = RT_124
      STOF(ISTOF + 378) = RT_125
      STOF(ISTOF + 379) = RT_126
      STOF(ISTOF + 380) = RT_127
      STOF(ISTOF + 381) = RT_128
      STOF(ISTOF + 382) = RT_129
      STOF(ISTOF + 383) = RT_130
      STOF(ISTOF + 384) = RT_131
      STOF(ISTOF + 385) = RT_132
      STOF(ISTOF + 386) = RT_133
      STOF(ISTOF + 405) = RT_134
      STOI(ISTOI + 198) = IT_118
      STOF(ISTOF + 406) = RT_135
      STOI(ISTOI + 199) = IT_119
      STOI(ISTOI + 200) = IT_120
      STOF(ISTOF + 407) = RT_136
      STOF(ISTOF + 408) = RT_137
      STOF(ISTOF + 409) = RT_138
      STOF(ISTOF + 410) = RT_139
      STOF(ISTOF + 411) = RT_140
      STOF(ISTOF + 412) = Fype
      STOF(ISTOF + 413) = RT_141
      STOI(ISTOI + 228) = IT_121
      STOI(ISTOI + 229) = IT_122
      STOI(ISTOI + 230) = IT_123
      STOF(ISTOF + 414) = capacitance
      STOF(ISTOF + 415) = RT_142
      STOF(ISTOF + 416) = C_pre
      STOI(ISTOI + 231) = IT_124
      STOI(ISTOI + 232) = IT_125
      STOI(ISTOI + 233) = IT_126
      STOI(ISTOI + 234) = IT_127
      STOI(ISTOI + 235) = IT_128
      STOI(ISTOI + 236) = IT_129
      STOI(ISTOI + 237) = IT_130
      STOI(ISTOI + 238) = IT_131
      STOI(ISTOI + 239) = IT_132
      STOF(ISTOF + 417) = RT_143
      STOF(ISTOF + 418) = R_pre
      STOF(ISTOF + 419) = R
      STOF(ISTOF + 420) = RT_144
      STOF(ISTOF + 421) = X_pre
      STOF(ISTOF + 422) = X
      STOF(ISTOF + 423) = RT_145
      STOF(ISTOF + 424) = RT_146
      STOF(ISTOF + 425) = RT_147
      STOF(ISTOF + 426) = RT_148
      STOF(ISTOF + 427) = RT_149
      STOF(ISTOF + 428) = RT_150
      STOI(ISTOI + 240) = IT_133
      STOF(ISTOF + 429) = RT_151
      STOF(ISTOF + 430) = RT_152
      STOF(ISTOF + 431) = RT_153
      STOF(ISTOF + 432) = RT_154
      STOF(ISTOF + 433) = C
      STOI(ISTOI + 241) = BRK1_2
      STOI(ISTOI + 242) = BRK2_3
      STOI(ISTOI + 243) = BRK1_3
      STOI(ISTOI + 244) = BRK1
      STOI(ISTOI + 245) = BRK2
      STOI(ISTOI + 246) = BRK3
      STOI(ISTOI + 256) = BRK1C
      STOI(ISTOI + 257) = BRK2C
      STOI(ISTOI + 258) = BRK3C
      STOF(ISTOF + 434) = Ftime
      STOF(ISTOF + 435) = Fduration

! Array (1:6) quantities...
      DO IT_0 = 1,6
         STOF(ISTOF + 79 + IT_0) = F1_data(IT_0)
         STOF(ISTOF + 88 + IT_0) = F2_data(IT_0)
         STOF(ISTOF + 100 + IT_0) = F4_data(IT_0)
         STOF(ISTOF + 112 + IT_0) = F6_data(IT_0)
         STOF(ISTOF + 121 + IT_0) = F2_out(IT_0)
         STOF(ISTOF + 127 + IT_0) = F3_data(IT_0)
         STOF(ISTOF + 133 + IT_0) = F3_out(IT_0)
         STOF(ISTOF + 139 + IT_0) = F4_out(IT_0)
         STOF(ISTOF + 145 + IT_0) = F5_data(IT_0)
         STOF(ISTOF + 151 + IT_0) = F5_out(IT_0)
         STOF(ISTOF + 157 + IT_0) = F6_out(IT_0)
         STOF(ISTOF + 163 + IT_0) = F7_data(IT_0)
         STOF(ISTOF + 169 + IT_0) = F7_out(IT_0)
         STOF(ISTOF + 180 + IT_0) = F9_data(IT_0)
         STOF(ISTOF + 186 + IT_0) = F10_data(IT_0)
         STOF(ISTOF + 192 + IT_0) = F10_out(IT_0)
         STOF(ISTOF + 201 + IT_0) = F11_data(IT_0)
         STOF(ISTOF + 207 + IT_0) = F11_out(IT_0)
         STOF(ISTOF + 219 + IT_0) = F12_data(IT_0)
         STOF(ISTOF + 225 + IT_0) = F12_out(IT_0)
         STOF(ISTOF + 231 + IT_0) = F13_data(IT_0)
         STOF(ISTOF + 237 + IT_0) = F13_out(IT_0)
         STOF(ISTOF + 249 + IT_0) = F14_data(IT_0)
         STOF(ISTOF + 255 + IT_0) = F14_out(IT_0)
         STOF(ISTOF + 270 + IT_0) = F15_data(IT_0)
         STOF(ISTOF + 276 + IT_0) = F15_out(IT_0)
         STOF(ISTOF + 326 + IT_0) = F8_data(IT_0)
         STOF(ISTOF + 332 + IT_0) = F9_out(IT_0)
         STOF(ISTOF + 338 + IT_0) = F8_out(IT_0)
         STOF(ISTOF + 386 + IT_0) = F_data_active(IT_0)
         STOF(ISTOF + 392 + IT_0) = Fnone(IT_0)
         STOF(ISTOF + 398 + IT_0) = F_data(IT_0)
      END DO

! Array (1:9) quantities...
      DO IT_0 = 1,9
         STOI(ISTOI + 71 + IT_0) = threePHG(IT_0)
         STOI(ISTOI + 94 + IT_0) = twoPHG(IT_0)
         STOI(ISTOI + 103 + IT_0) = onePHG_out(IT_0)
         STOI(ISTOI + 112 + IT_0) = twoPHG_out(IT_0)
         STOI(ISTOI + 122 + IT_0) = onePHG(IT_0)
         STOI(ISTOI + 131 + IT_0) = L_L_out(IT_0)
         STOI(ISTOI + 145 + IT_0) = L_L(IT_0)
         STOI(ISTOI + 200 + IT_0) = tov_brk(IT_0)
         STOI(ISTOI + 209 + IT_0) = no_fault(IT_0)
         STOI(ISTOI + 218 + IT_0) = TOV_out(IT_0)
         STOI(ISTOI + 246 + IT_0) = breakerStatus(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE FaultBlockOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

      REAL    VBRANCH       ! 

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices

! Control Signals
      INTEGER  IT_18, IT_19, IT_20, IT_21, IT_22
      INTEGER  IT_23, IT_24, IT_25, IT_26, IT_27
      INTEGER  IT_28, IT_29, IT_30, IT_31, IT_32
      INTEGER  IT_33, IT_34, IT_35, IT_36, IT_37
      INTEGER  IT_38, IT_39, IT_40, IT_41, IT_42
      INTEGER  IT_43, IT_44, IT_45, IT_46, IT_47
      INTEGER  IT_48, IT_49, IT_50, IT_51, IT_52
      INTEGER  IT_53, IT_55, IT_56, IT_57, IT_58
      INTEGER  IT_59, IT_60, IT_61, IT_62, IT_63
      INTEGER  IT_124, IT_125, IT_126, IT_127
      INTEGER  IT_128, IT_129, IT_130, IT_131
      INTEGER  IT_132
      REAL     RT_42, RT_43, RT_44, RT_45, RT_46
      REAL     RT_47, RT_51, RT_52, RT_55, RT_56
      REAL     RT_59, RT_60, RT_63, RT_64, RT_67
      REAL     RT_71, RT_73, RT_74, RT_75, RT_76
      REAL     RT_77, RT_78, RT_79, RT_80, RT_81
      REAL     RT_82, RT_83, RT_84, RT_85, RT_86
      REAL     RT_88, RT_136, RT_137, RT_138
      REAL     RT_139, RT_142, RT_143, RT_144
      REAL     RT_151

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 18

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      RT_42    = STOF(ISTOF + 262)
      RT_43    = STOF(ISTOF + 263)
      RT_44    = STOF(ISTOF + 264)
      RT_45    = STOF(ISTOF + 265)
      RT_46    = STOF(ISTOF + 266)
      RT_47    = STOF(ISTOF + 267)
      IT_18    = STOI(ISTOI + 35)
      IT_19    = STOI(ISTOI + 36)
      IT_20    = STOI(ISTOI + 37)
      IT_21    = STOI(ISTOI + 38)
      IT_22    = STOI(ISTOI + 39)
      IT_23    = STOI(ISTOI + 40)
      IT_24    = STOI(ISTOI + 41)
      IT_25    = STOI(ISTOI + 42)
      IT_26    = STOI(ISTOI + 43)
      IT_27    = STOI(ISTOI + 44)
      IT_28    = STOI(ISTOI + 45)
      IT_29    = STOI(ISTOI + 46)
      IT_30    = STOI(ISTOI + 47)
      IT_31    = STOI(ISTOI + 48)
      IT_32    = STOI(ISTOI + 49)
      IT_33    = STOI(ISTOI + 50)
      IT_34    = STOI(ISTOI + 51)
      IT_35    = STOI(ISTOI + 52)
      IT_36    = STOI(ISTOI + 53)
      IT_37    = STOI(ISTOI + 54)
      IT_38    = STOI(ISTOI + 55)
      IT_39    = STOI(ISTOI + 56)
      IT_40    = STOI(ISTOI + 57)
      IT_41    = STOI(ISTOI + 58)
      IT_42    = STOI(ISTOI + 59)
      IT_43    = STOI(ISTOI + 60)
      IT_44    = STOI(ISTOI + 61)
      IT_45    = STOI(ISTOI + 62)
      IT_46    = STOI(ISTOI + 63)
      IT_47    = STOI(ISTOI + 64)
      IT_48    = STOI(ISTOI + 65)
      IT_49    = STOI(ISTOI + 66)
      IT_50    = STOI(ISTOI + 67)
      IT_51    = STOI(ISTOI + 68)
      IT_52    = STOI(ISTOI + 69)
      IT_53    = STOI(ISTOI + 70)
      RT_51    = STOF(ISTOF + 283)
      IT_55    = STOI(ISTOI + 81)
      IT_56    = STOI(ISTOI + 82)
      IT_57    = STOI(ISTOI + 83)
      IT_58    = STOI(ISTOI + 84)
      IT_59    = STOI(ISTOI + 85)
      IT_60    = STOI(ISTOI + 86)
      IT_61    = STOI(ISTOI + 87)
      IT_62    = STOI(ISTOI + 88)
      IT_63    = STOI(ISTOI + 89)
      RT_52    = STOF(ISTOF + 284)
      RT_55    = STOF(ISTOF + 287)
      RT_56    = STOF(ISTOF + 288)
      RT_59    = STOF(ISTOF + 291)
      RT_60    = STOF(ISTOF + 292)
      RT_63    = STOF(ISTOF + 295)
      RT_64    = STOF(ISTOF + 296)
      RT_67    = STOF(ISTOF + 299)
      RT_71    = STOF(ISTOF + 304)
      RT_73    = STOF(ISTOF + 308)
      RT_74    = STOF(ISTOF + 309)
      RT_75    = STOF(ISTOF + 310)
      RT_76    = STOF(ISTOF + 311)
      RT_77    = STOF(ISTOF + 312)
      RT_78    = STOF(ISTOF + 313)
      RT_79    = STOF(ISTOF + 314)
      RT_80    = STOF(ISTOF + 315)
      RT_81    = STOF(ISTOF + 316)
      RT_82    = STOF(ISTOF + 317)
      RT_83    = STOF(ISTOF + 318)
      RT_84    = STOF(ISTOF + 319)
      RT_85    = STOF(ISTOF + 320)
      RT_86    = STOF(ISTOF + 321)
      RT_88    = STOF(ISTOF + 323)
      RT_136   = STOF(ISTOF + 407)
      RT_137   = STOF(ISTOF + 408)
      RT_138   = STOF(ISTOF + 409)
      RT_139   = STOF(ISTOF + 410)
      RT_142   = STOF(ISTOF + 415)
      IT_124   = STOI(ISTOI + 231)
      IT_125   = STOI(ISTOI + 232)
      IT_126   = STOI(ISTOI + 233)
      IT_127   = STOI(ISTOI + 234)
      IT_128   = STOI(ISTOI + 235)
      IT_129   = STOI(ISTOI + 236)
      IT_130   = STOI(ISTOI + 237)
      IT_131   = STOI(ISTOI + 238)
      IT_132   = STOI(ISTOI + 239)
      RT_143   = STOF(ISTOF + 417)
      RT_144   = STOF(ISTOF + 420)
      RT_151   = STOF(ISTOF + 429)


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'FaultBlock.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[const] Real Constant 

      RT_86 = 8.5

! 70:[const] Real Constant 

      RT_73 = 0.5

! 220:[const] Real Constant 

      RT_85 = 9.5

! 270:[consti] Integer Constant 

      IT_35 = 0

! 280:[consti] Integer Constant 

      IT_34 = 0

! 290:[consti] Integer Constant 

      IT_33 = 0

! 300:[consti] Integer Constant 

      IT_32 = 1

! 310:[consti] Integer Constant 

      IT_31 = 1

! 320:[const] Real Constant 

      RT_51 = -0.5

! 330:[consti] Integer Constant 

      IT_30 = 1

! 340:[const] Real Constant 

      RT_74 = 1.5

! 350:[consti] Integer Constant 

      IT_42 = 1

! 360:[consti] Integer Constant 

      IT_43 = 1

! 400:[consti] Integer Constant 

      IT_44 = 1

! 440:[const] Real Constant 

      RT_52 = 0.5

! 540:[consti] Integer Constant 

      IT_18 = 0

! 550:[const] Real Constant 

      RT_84 = 10.5

! 560:[consti] Integer Constant 

      IT_19 = 0

! 570:[consti] Integer Constant 

      IT_20 = 1

! 590:[consti] Integer Constant 

      IT_21 = 1

! 600:[consti] Integer Constant 

      IT_22 = 1

! 610:[consti] Integer Constant 

      IT_23 = 1

! 620:[consti] Integer Constant 

      IT_51 = 1

! 630:[consti] Integer Constant 

      IT_52 = 1

! 640:[consti] Integer Constant 

      IT_53 = 1

! 650:[const] Real Constant 

      RT_56 = 0.5

! 690:[const] Real Constant 

      RT_55 = 1.5

! 700:[const] Real Constant 

      RT_75 = 2.5

! 840:[consti] Integer Constant 

      IT_41 = 0

! 850:[consti] Integer Constant 

      IT_40 = 1

! 860:[consti] Integer Constant 

      IT_39 = 1

! 870:[consti] Integer Constant 

      IT_38 = 1

! 890:[consti] Integer Constant 

      IT_37 = 1

! 900:[consti] Integer Constant 

      IT_36 = 1

! 910:[const] Real Constant 

      RT_59 = 1.5

! 920:[consti] Integer Constant 

      IT_45 = 1

! 930:[consti] Integer Constant 

      IT_46 = 1

! 940:[consti] Integer Constant 

      IT_47 = 1

! 950:[const] Real Constant 

      RT_83 = 11.5

! 970:[const] Real Constant 

      RT_60 = 2.5

! 1010:[const] Real Constant 

      RT_76 = 3.5

! 1130:[consti] Integer Constant 

      IT_29 = 1

! 1140:[consti] Integer Constant 

      IT_28 = 1

! 1150:[consti] Integer Constant 

      IT_27 = 1

! 1160:[consti] Integer Constant 

      IT_26 = 0

! 1180:[consti] Integer Constant 

      IT_25 = 1

! 1190:[const] Real Constant 

      RT_64 = 2.5

! 1200:[consti] Integer Constant 

      IT_24 = 1

! 1210:[consti] Integer Constant 

      IT_48 = 1

! 1220:[consti] Integer Constant 

      IT_49 = 1

! 1230:[consti] Integer Constant 

      IT_50 = 1

! 1250:[const] Real Constant 

      RT_63 = 3.5

! 1270:[const] Real Constant 

      RT_82 = 12.5

! 1320:[const] Real Constant 

      RT_77 = 4.5

! 1370:[consti] Integer Constant 

      IT_132 = 1

! 1380:[consti] Integer Constant 

      IT_131 = 1

! 1390:[consti] Integer Constant 

      IT_130 = 1

! 1400:[consti] Integer Constant 

      IT_129 = 1

! 1420:[consti] Integer Constant 

      IT_128 = 1

! 1430:[consti] Integer Constant 

      IT_127 = 1

! 1440:[const] Real Constant 

      RT_136 = 3.5

! 1460:[consti] Integer Constant 

      IT_124 = 0

! 1470:[consti] Integer Constant 

      IT_125 = 0

! 1490:[consti] Integer Constant 

      IT_126 = 0

! 1520:[const] Real Constant 

      RT_137 = 4.5

! 1580:[const] Real Constant 

      RT_81 = 13.5

! 1620:[consti] Integer Constant 

      IT_55 = 1

! 1630:[consti] Integer Constant 

      IT_56 = 1

! 1640:[consti] Integer Constant 

      IT_57 = 1

! 1650:[consti] Integer Constant 

      IT_58 = 1

! 1660:[consti] Integer Constant 

      IT_59 = 1

! 1670:[consti] Integer Constant 

      IT_60 = 1

! 1680:[consti] Integer Constant 

      IT_61 = 1

! 1690:[consti] Integer Constant 

      IT_62 = 1

! 1710:[consti] Integer Constant 

      IT_63 = 1

! 1720:[const] Real Constant 

      RT_78 = 5.5

! 1870:[const] Real Constant 

      RT_80 = 14.5

! 1920:[const] Real Constant 

      RT_79 = 6.5

! 2050:[const] Real Constant 

      RT_71 = 1.0

! 2070:[const] Real Constant 

      RT_143 = 0.01

! 2090:[const] Real Constant 

      RT_45 = 0.0

! 2100:[const] Real Constant 

      RT_46 = 0.0

! 2110:[const] Real Constant 

      RT_42 = 100.0

! 2120:[const] Real Constant 

      RT_88 = 7.5

! 2140:[const] Real Constant 

      RT_43 = 9999999.0

! 2150:[const] Real Constant 

      RT_44 = 1.0

! 2180:[const] Real Constant 

      RT_144 = 0.01

! 2190:[const] Real Constant 

      RT_47 = 0.0

! 2270:[emtconst] Commonly Used Constants (pi...) 
      RT_67 = TWO_PI

! 2280:[const] Real Constant 

      RT_139 = 3.5

! 2290:[const] Real Constant 

      RT_138 = 4.5

! 2300:[const] Real Constant 

      RT_142 = 1.0

! 2310:[const] Real Constant 

      RT_151 = 0.05

! 4460:[breaker1] Single Phase Breaker 'BRK3C'
! Single phase breaker current
!

! 4470:[breaker1] Single Phase Breaker 'BRK3'
! Single phase breaker current
!

! 4480:[breaker1] Single Phase Breaker 'BRK2C'
! Single phase breaker current
!

! 4490:[breaker1] Single Phase Breaker 'BRK2'
! Single phase breaker current
!

! 4500:[breaker1] Single Phase Breaker 'BRK1C'
! Single phase breaker current
!

! 4510:[breaker1] Single Phase Breaker 'BRK1'
! Single phase breaker current
!

! 4580:[breaker1] Single Phase Breaker 'BRK1_3'
! Single phase breaker current
!

! 4610:[breaker1] Single Phase Breaker 'BRK2_3'
! Single phase breaker current
!

! 4620:[breaker1] Single Phase Breaker 'BRK1_2'
! Single phase breaker current
!

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOF(ISTOF + 262) = RT_42
      STOF(ISTOF + 263) = RT_43
      STOF(ISTOF + 264) = RT_44
      STOF(ISTOF + 265) = RT_45
      STOF(ISTOF + 266) = RT_46
      STOF(ISTOF + 267) = RT_47
      STOI(ISTOI + 35) = IT_18
      STOI(ISTOI + 36) = IT_19
      STOI(ISTOI + 37) = IT_20
      STOI(ISTOI + 38) = IT_21
      STOI(ISTOI + 39) = IT_22
      STOI(ISTOI + 40) = IT_23
      STOI(ISTOI + 41) = IT_24
      STOI(ISTOI + 42) = IT_25
      STOI(ISTOI + 43) = IT_26
      STOI(ISTOI + 44) = IT_27
      STOI(ISTOI + 45) = IT_28
      STOI(ISTOI + 46) = IT_29
      STOI(ISTOI + 47) = IT_30
      STOI(ISTOI + 48) = IT_31
      STOI(ISTOI + 49) = IT_32
      STOI(ISTOI + 50) = IT_33
      STOI(ISTOI + 51) = IT_34
      STOI(ISTOI + 52) = IT_35
      STOI(ISTOI + 53) = IT_36
      STOI(ISTOI + 54) = IT_37
      STOI(ISTOI + 55) = IT_38
      STOI(ISTOI + 56) = IT_39
      STOI(ISTOI + 57) = IT_40
      STOI(ISTOI + 58) = IT_41
      STOI(ISTOI + 59) = IT_42
      STOI(ISTOI + 60) = IT_43
      STOI(ISTOI + 61) = IT_44
      STOI(ISTOI + 62) = IT_45
      STOI(ISTOI + 63) = IT_46
      STOI(ISTOI + 64) = IT_47
      STOI(ISTOI + 65) = IT_48
      STOI(ISTOI + 66) = IT_49
      STOI(ISTOI + 67) = IT_50
      STOI(ISTOI + 68) = IT_51
      STOI(ISTOI + 69) = IT_52
      STOI(ISTOI + 70) = IT_53
      STOF(ISTOF + 283) = RT_51
      STOI(ISTOI + 81) = IT_55
      STOI(ISTOI + 82) = IT_56
      STOI(ISTOI + 83) = IT_57
      STOI(ISTOI + 84) = IT_58
      STOI(ISTOI + 85) = IT_59
      STOI(ISTOI + 86) = IT_60
      STOI(ISTOI + 87) = IT_61
      STOI(ISTOI + 88) = IT_62
      STOI(ISTOI + 89) = IT_63
      STOF(ISTOF + 284) = RT_52
      STOF(ISTOF + 287) = RT_55
      STOF(ISTOF + 288) = RT_56
      STOF(ISTOF + 291) = RT_59
      STOF(ISTOF + 292) = RT_60
      STOF(ISTOF + 295) = RT_63
      STOF(ISTOF + 296) = RT_64
      STOF(ISTOF + 299) = RT_67
      STOF(ISTOF + 304) = RT_71
      STOF(ISTOF + 308) = RT_73
      STOF(ISTOF + 309) = RT_74
      STOF(ISTOF + 310) = RT_75
      STOF(ISTOF + 311) = RT_76
      STOF(ISTOF + 312) = RT_77
      STOF(ISTOF + 313) = RT_78
      STOF(ISTOF + 314) = RT_79
      STOF(ISTOF + 315) = RT_80
      STOF(ISTOF + 316) = RT_81
      STOF(ISTOF + 317) = RT_82
      STOF(ISTOF + 318) = RT_83
      STOF(ISTOF + 319) = RT_84
      STOF(ISTOF + 320) = RT_85
      STOF(ISTOF + 321) = RT_86
      STOF(ISTOF + 323) = RT_88
      STOF(ISTOF + 407) = RT_136
      STOF(ISTOF + 408) = RT_137
      STOF(ISTOF + 409) = RT_138
      STOF(ISTOF + 410) = RT_139
      STOF(ISTOF + 415) = RT_142
      STOI(ISTOI + 231) = IT_124
      STOI(ISTOI + 232) = IT_125
      STOI(ISTOI + 233) = IT_126
      STOI(ISTOI + 234) = IT_127
      STOI(ISTOI + 235) = IT_128
      STOI(ISTOI + 236) = IT_129
      STOI(ISTOI + 237) = IT_130
      STOI(ISTOI + 238) = IT_131
      STOI(ISTOI + 239) = IT_132
      STOF(ISTOF + 417) = RT_143
      STOF(ISTOF + 420) = RT_144
      STOF(ISTOF + 429) = RT_151


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE FaultBlockDyn_Begin(Time15, Duration15, Type15,        &
     &   Impedance15, Time14, Duration14, Type14, Impedance14, Time13,  &
     &   Duration13, Type13, Impedance13, Time12, Duration12, Type12,   &
     &   Impedance12, Time11, Duration11, Type11, Impedance11, Time10,  &
     &   Duration10, Type10, Impedance10, Time9, Duration9, Type9,      &
     &   Impedance9, Time8, Duration8, Type8, Impedance8, Time7,        &
     &   Duration7, Type7, Impedance7, Time6, Duration6, Type6,         &
     &   Impedance6, Time5, Duration5, Type5, Impedance5, Time4,        &
     &   Duration4, Type4, Impedance4, Time3, Duration3, Type3,         &
     &   Impedance3, Time2, Duration2, Type2, Impedance2, X_R15, X_R14, &
     &   X_R13, X_R12, X_R11, X_R10, X_R9, X_R8, X_R7, X_R6, X_R5,      &
     &   X_R4, X_R3, X_R2, status, N_faults, Time1, Duration1, Type1,   &
     &   Impedance1, X_R1, Fbase, Capacity1, Capacity2, Capacity3,      &
     &   Capacity4, Capacity5, Capacity6, Capacity7, Capacity8,         &
     &   Capacity9, Capacity10, Capacity11, Capacity12, Capacity13,     &
     &   Capacity14, Capacity15)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Type15, Type14
      INTEGER, INTENT(IN)  :: Type13, Type12
      INTEGER, INTENT(IN)  :: Type11, Type10
      INTEGER, INTENT(IN)  :: Type9, Type8, Type7
      INTEGER, INTENT(IN)  :: Type6, Type5, Type4
      INTEGER, INTENT(IN)  :: Type3, Type2
      INTEGER, INTENT(IN)  :: status, N_faults
      INTEGER, INTENT(IN)  :: Type1
      REAL,    INTENT(IN)  :: Time15, Duration15
      REAL,    INTENT(IN)  :: Impedance15, Time14
      REAL,    INTENT(IN)  :: Duration14
      REAL,    INTENT(IN)  :: Impedance14, Time13
      REAL,    INTENT(IN)  :: Duration13
      REAL,    INTENT(IN)  :: Impedance13, Time12
      REAL,    INTENT(IN)  :: Duration12
      REAL,    INTENT(IN)  :: Impedance12, Time11
      REAL,    INTENT(IN)  :: Duration11
      REAL,    INTENT(IN)  :: Impedance11, Time10
      REAL,    INTENT(IN)  :: Duration10
      REAL,    INTENT(IN)  :: Impedance10, Time9
      REAL,    INTENT(IN)  :: Duration9
      REAL,    INTENT(IN)  :: Impedance9, Time8
      REAL,    INTENT(IN)  :: Duration8
      REAL,    INTENT(IN)  :: Impedance8, Time7
      REAL,    INTENT(IN)  :: Duration7
      REAL,    INTENT(IN)  :: Impedance7, Time6
      REAL,    INTENT(IN)  :: Duration6
      REAL,    INTENT(IN)  :: Impedance6, Time5
      REAL,    INTENT(IN)  :: Duration5
      REAL,    INTENT(IN)  :: Impedance5, Time4
      REAL,    INTENT(IN)  :: Duration4
      REAL,    INTENT(IN)  :: Impedance4, Time3
      REAL,    INTENT(IN)  :: Duration3
      REAL,    INTENT(IN)  :: Impedance3, Time2
      REAL,    INTENT(IN)  :: Duration2
      REAL,    INTENT(IN)  :: Impedance2, X_R15
      REAL,    INTENT(IN)  :: X_R14, X_R13, X_R12
      REAL,    INTENT(IN)  :: X_R11, X_R10, X_R9
      REAL,    INTENT(IN)  :: X_R8, X_R7, X_R6
      REAL,    INTENT(IN)  :: X_R5, X_R4, X_R3
      REAL,    INTENT(IN)  :: X_R2, Time1
      REAL,    INTENT(IN)  :: Duration1
      REAL,    INTENT(IN)  :: Impedance1, X_R1
      REAL,    INTENT(IN)  :: Fbase, Capacity1
      REAL,    INTENT(IN)  :: Capacity2
      REAL,    INTENT(IN)  :: Capacity3
      REAL,    INTENT(IN)  :: Capacity4
      REAL,    INTENT(IN)  :: Capacity5
      REAL,    INTENT(IN)  :: Capacity6
      REAL,    INTENT(IN)  :: Capacity7
      REAL,    INTENT(IN)  :: Capacity8
      REAL,    INTENT(IN)  :: Capacity9
      REAL,    INTENT(IN)  :: Capacity10
      REAL,    INTENT(IN)  :: Capacity11
      REAL,    INTENT(IN)  :: Capacity12
      REAL,    INTENT(IN)  :: Capacity13
      REAL,    INTENT(IN)  :: Capacity14
      REAL,    INTENT(IN)  :: Capacity15

! Electrical Node Indices

! Control Signals
      INTEGER  IT_18, IT_19, IT_20, IT_21, IT_22
      INTEGER  IT_23, IT_24, IT_25, IT_26, IT_27
      INTEGER  IT_28, IT_29, IT_30, IT_31, IT_32
      INTEGER  IT_33, IT_34, IT_35, IT_36, IT_37
      INTEGER  IT_38, IT_39, IT_40, IT_41, IT_42
      INTEGER  IT_43, IT_44, IT_45, IT_46, IT_47
      INTEGER  IT_48, IT_49, IT_50, IT_51, IT_52
      INTEGER  IT_53, IT_55, IT_56, IT_57, IT_58
      INTEGER  IT_59, IT_60, IT_61, IT_62, IT_63
      INTEGER  IT_124, IT_125, IT_126, IT_127
      INTEGER  IT_128, IT_129, IT_130, IT_131
      INTEGER  IT_132
      REAL     RT_42, RT_43, RT_44, RT_45, RT_46
      REAL     RT_47, RT_51, RT_52, RT_55, RT_56
      REAL     RT_59, RT_60, RT_63, RT_64, RT_67
      REAL     RT_71, RT_73, RT_74, RT_75, RT_76
      REAL     RT_77, RT_78, RT_79, RT_80, RT_81
      REAL     RT_82, RT_83, RT_84, RT_85, RT_86
      REAL     RT_88, RT_136, RT_137, RT_138
      REAL     RT_139, RT_142, RT_143, RT_144
      REAL     RT_151

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 18

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[const] Real Constant 
      RT_86 = 8.5

! 30:[time-sig] Output of Simulation Time 

! 50:[time-sig] Output of Simulation Time 

! 70:[const] Real Constant 
      RT_73 = 0.5

! 80:[time-sig] Output of Simulation Time 

! 100:[sumjct] Summing/Differencing Junctions 

! 130:[time-sig] Output of Simulation Time 

! 180:[sumjct] Summing/Differencing Junctions 

! 220:[const] Real Constant 
      RT_85 = 9.5

! 230:[time-sig] Output of Simulation Time 

! 250:[time-sig] Output of Simulation Time 

! 270:[consti] Integer Constant 
      IT_35 = 0

! 280:[consti] Integer Constant 
      IT_34 = 0

! 290:[consti] Integer Constant 
      IT_33 = 0

! 300:[consti] Integer Constant 
      IT_32 = 1

! 310:[consti] Integer Constant 
      IT_31 = 1

! 320:[const] Real Constant 
      RT_51 = -0.5

! 330:[consti] Integer Constant 
      IT_30 = 1

! 340:[const] Real Constant 
      RT_74 = 1.5

! 350:[consti] Integer Constant 
      IT_42 = 1

! 360:[consti] Integer Constant 
      IT_43 = 1

! 380:[time-sig] Output of Simulation Time 

! 400:[consti] Integer Constant 
      IT_44 = 1

! 410:[sumjct] Summing/Differencing Junctions 

! 440:[const] Real Constant 
      RT_52 = 0.5

! 450:[time-sig] Output of Simulation Time 

! 500:[sumjct] Summing/Differencing Junctions 

! 540:[consti] Integer Constant 
      IT_18 = 0

! 550:[const] Real Constant 
      RT_84 = 10.5

! 560:[consti] Integer Constant 
      IT_19 = 0

! 570:[consti] Integer Constant 
      IT_20 = 1

! 580:[time-sig] Output of Simulation Time 

! 590:[consti] Integer Constant 
      IT_21 = 1

! 600:[consti] Integer Constant 
      IT_22 = 1

! 610:[consti] Integer Constant 
      IT_23 = 1

! 620:[consti] Integer Constant 
      IT_51 = 1

! 630:[consti] Integer Constant 
      IT_52 = 1

! 640:[consti] Integer Constant 
      IT_53 = 1

! 650:[const] Real Constant 
      RT_56 = 0.5

! 670:[time-sig] Output of Simulation Time 

! 690:[const] Real Constant 
      RT_55 = 1.5

! 700:[const] Real Constant 
      RT_75 = 2.5

! 710:[time-sig] Output of Simulation Time 

! 730:[sumjct] Summing/Differencing Junctions 

! 760:[time-sig] Output of Simulation Time 

! 810:[sumjct] Summing/Differencing Junctions 

! 840:[consti] Integer Constant 
      IT_41 = 0

! 850:[consti] Integer Constant 
      IT_40 = 1

! 860:[consti] Integer Constant 
      IT_39 = 1

! 870:[consti] Integer Constant 
      IT_38 = 1

! 890:[consti] Integer Constant 
      IT_37 = 1

! 900:[consti] Integer Constant 
      IT_36 = 1

! 910:[const] Real Constant 
      RT_59 = 1.5

! 920:[consti] Integer Constant 
      IT_45 = 1

! 930:[consti] Integer Constant 
      IT_46 = 1

! 940:[consti] Integer Constant 
      IT_47 = 1

! 950:[const] Real Constant 
      RT_83 = 11.5

! 960:[time-sig] Output of Simulation Time 

! 970:[const] Real Constant 
      RT_60 = 2.5

! 990:[time-sig] Output of Simulation Time 

! 1010:[const] Real Constant 
      RT_76 = 3.5

! 1020:[time-sig] Output of Simulation Time 

! 1040:[sumjct] Summing/Differencing Junctions 

! 1070:[time-sig] Output of Simulation Time 

! 1120:[sumjct] Summing/Differencing Junctions 

! 1130:[consti] Integer Constant 
      IT_29 = 1

! 1140:[consti] Integer Constant 
      IT_28 = 1

! 1150:[consti] Integer Constant 
      IT_27 = 1

! 1160:[consti] Integer Constant 
      IT_26 = 0

! 1180:[consti] Integer Constant 
      IT_25 = 1

! 1190:[const] Real Constant 
      RT_64 = 2.5

! 1200:[consti] Integer Constant 
      IT_24 = 1

! 1210:[consti] Integer Constant 
      IT_48 = 1

! 1220:[consti] Integer Constant 
      IT_49 = 1

! 1230:[consti] Integer Constant 
      IT_50 = 1

! 1250:[const] Real Constant 
      RT_63 = 3.5

! 1270:[const] Real Constant 
      RT_82 = 12.5

! 1280:[time-sig] Output of Simulation Time 

! 1300:[time-sig] Output of Simulation Time 

! 1320:[const] Real Constant 
      RT_77 = 4.5

! 1330:[time-sig] Output of Simulation Time 

! 1350:[sumjct] Summing/Differencing Junctions 

! 1370:[consti] Integer Constant 
      IT_132 = 1

! 1380:[consti] Integer Constant 
      IT_131 = 1

! 1390:[consti] Integer Constant 
      IT_130 = 1

! 1400:[consti] Integer Constant 
      IT_129 = 1

! 1420:[consti] Integer Constant 
      IT_128 = 1

! 1430:[consti] Integer Constant 
      IT_127 = 1

! 1440:[const] Real Constant 
      RT_136 = 3.5

! 1450:[time-sig] Output of Simulation Time 

! 1460:[consti] Integer Constant 
      IT_124 = 0

! 1470:[consti] Integer Constant 
      IT_125 = 0

! 1490:[consti] Integer Constant 
      IT_126 = 0

! 1520:[const] Real Constant 
      RT_137 = 4.5

! 1540:[sumjct] Summing/Differencing Junctions 

! 1580:[const] Real Constant 
      RT_81 = 13.5

! 1590:[time-sig] Output of Simulation Time 

! 1610:[time-sig] Output of Simulation Time 

! 1620:[consti] Integer Constant 
      IT_55 = 1

! 1630:[consti] Integer Constant 
      IT_56 = 1

! 1640:[consti] Integer Constant 
      IT_57 = 1

! 1650:[consti] Integer Constant 
      IT_58 = 1

! 1660:[consti] Integer Constant 
      IT_59 = 1

! 1670:[consti] Integer Constant 
      IT_60 = 1

! 1680:[consti] Integer Constant 
      IT_61 = 1

! 1690:[consti] Integer Constant 
      IT_62 = 1

! 1710:[consti] Integer Constant 
      IT_63 = 1

! 1720:[const] Real Constant 
      RT_78 = 5.5

! 1730:[time-sig] Output of Simulation Time 

! 1750:[sumjct] Summing/Differencing Junctions 

! 1780:[time-sig] Output of Simulation Time 

! 1830:[sumjct] Summing/Differencing Junctions 

! 1870:[const] Real Constant 
      RT_80 = 14.5

! 1880:[time-sig] Output of Simulation Time 

! 1900:[time-sig] Output of Simulation Time 

! 1920:[const] Real Constant 
      RT_79 = 6.5

! 1930:[time-sig] Output of Simulation Time 

! 1950:[sumjct] Summing/Differencing Junctions 

! 1980:[time-sig] Output of Simulation Time 

! 2030:[sumjct] Summing/Differencing Junctions 

! 2050:[const] Real Constant 
      RT_71 = 1.0

! 2070:[const] Real Constant 
      RT_143 = 0.01

! 2090:[const] Real Constant 
      RT_45 = 0.0

! 2100:[const] Real Constant 
      RT_46 = 0.0

! 2110:[const] Real Constant 
      RT_42 = 100.0

! 2120:[const] Real Constant 
      RT_88 = 7.5

! 2130:[time-sig] Output of Simulation Time 

! 2140:[const] Real Constant 
      RT_43 = 9999999.0

! 2150:[const] Real Constant 
      RT_44 = 1.0

! 2170:[time-sig] Output of Simulation Time 

! 2180:[const] Real Constant 
      RT_144 = 0.01

! 2190:[const] Real Constant 
      RT_47 = 0.0

! 2220:[sumjct] Summing/Differencing Junctions 

! 2270:[emtconst] Commonly Used Constants (pi...) 
      RT_67 = TWO_PI

! 2280:[const] Real Constant 
      RT_139 = 3.5

! 2290:[const] Real Constant 
      RT_138 = 4.5

! 2300:[const] Real Constant 
      RT_142 = 1.0

! 2310:[const] Real Constant 
      RT_151 = 0.05

! 2320:[time-sig] Output of Simulation Time 

! 2330:[time-sig] Output of Simulation Time 

! 2340:[compar] Two Input Comparator 

! 2350:[unity] Type/Shape conversion block 

! 2360:[compar] Two Input Comparator 

! 2370:[compar] Two Input Comparator 

! 2380:[unity] Type/Shape conversion block 

! 2390:[compar] Two Input Comparator 

! 2400:[unity] Type/Shape conversion block 

! 2410:[unity] Type/Shape conversion block 

! 2420:[compar] Two Input Comparator 

! 2430:[unity] Type/Shape conversion block 

! 2440:[compar] Two Input Comparator 

! 2450:[datamerge] Merges data signals into an array 

! 2460:[unity] Type/Shape conversion block 

! 2470:[compar] Two Input Comparator 

! 2480:[datamerge] Merges data signals into an array 

! 2490:[unity] Type/Shape conversion block 

! 2500:[compar] Two Input Comparator 

! 2510:[datamerge] Merges data signals into an array 

! 2520:[compar] Two Input Comparator 

! 2530:[unity] Type/Shape conversion block 

! 2540:[compar] Two Input Comparator 

! 2550:[unity] Type/Shape conversion block 

! 2560:[unity] Type/Shape conversion block 

! 2570:[compar] Two Input Comparator 

! 2580:[unity] Type/Shape conversion block 

! 2590:[compar] Two Input Comparator 

! 2600:[datamerge] Merges data signals into an array 

! 2610:[unity] Type/Shape conversion block 

! 2620:[datamerge] Merges data signals into an array 

! 2630:[compar] Two Input Comparator 

! 2640:[datamerge] Merges data signals into an array 

! 2650:[unity] Type/Shape conversion block 

! 2660:[compar] Two Input Comparator 

! 2670:[compar] Two Input Comparator 

! 2680:[unity] Type/Shape conversion block 

! 2690:[compar] Two Input Comparator 

! 2700:[unity] Type/Shape conversion block 

! 2710:[unity] Type/Shape conversion block 

! 2720:[compar] Two Input Comparator 

! 2730:[unity] Type/Shape conversion block 

! 2740:[compar] Two Input Comparator 

! 2750:[datamerge] Merges data signals into an array 

! 2760:[unity] Type/Shape conversion block 

! 2770:[datamerge] Merges data signals into an array 

! 2780:[compar] Two Input Comparator 

! 2790:[datamerge] Merges data signals into an array 

! 2800:[unity] Type/Shape conversion block 

! 2810:[compar] Two Input Comparator 

! 2820:[compar] Two Input Comparator 

! 2830:[unity] Type/Shape conversion block 

! 2840:[compar] Two Input Comparator 

! 2850:[unity] Type/Shape conversion block 

! 2860:[unity] Type/Shape conversion block 

! 2870:[compar] Two Input Comparator 

! 2880:[unity] Type/Shape conversion block 

! 2890:[datamerge] Merges data signals into an array 

! 2900:[compar] Two Input Comparator 

! 2910:[datamerge] Merges data signals into an array 

! 2920:[unity] Type/Shape conversion block 

! 2930:[compar] Two Input Comparator 

! 2940:[datamerge] Merges data signals into an array 

! 2950:[unity] Type/Shape conversion block 

! 2960:[compar] Two Input Comparator 

! 2970:[compar] Two Input Comparator 

! 2980:[unity] Type/Shape conversion block 

! 2990:[compar] Two Input Comparator 

! 3000:[unity] Type/Shape conversion block 

! 3010:[datamerge] Merges data signals into an array 

! 3020:[unity] Type/Shape conversion block 

! 3030:[compar] Two Input Comparator 

! 3040:[unity] Type/Shape conversion block 

! 3050:[compar] Two Input Comparator 

! 3060:[datamerge] Merges data signals into an array 

! 3070:[unity] Type/Shape conversion block 

! 3080:[compar] Two Input Comparator 

! 3090:[datamerge] Merges data signals into an array 

! 3100:[unity] Type/Shape conversion block 

! 3110:[datamerge] Merges data signals into an array 

! 3120:[compar] Two Input Comparator 

! 3130:[compar] Two Input Comparator 

! 3140:[unity] Type/Shape conversion block 

! 3150:[compar] Two Input Comparator 

! 3160:[unity] Type/Shape conversion block 

! 3170:[unity] Type/Shape conversion block 

! 3180:[compar] Two Input Comparator 

! 3190:[unity] Type/Shape conversion block 

! 3200:[compar] Two Input Comparator 

! 3210:[datamerge] Merges data signals into an array 

! 3220:[unity] Type/Shape conversion block 

! 3230:[compar] Two Input Comparator 

! 3240:[datamerge] Merges data signals into an array 

! 3250:[unity] Type/Shape conversion block 

! 3260:[compar] Two Input Comparator 

! 3270:[compar] Two Input Comparator 

! 3280:[unity] Type/Shape conversion block 

! 3290:[unity] Type/Shape conversion block 

! 3300:[compar] Two Input Comparator 

! 3310:[unity] Type/Shape conversion block 

! 3320:[compar] Two Input Comparator 

! 3330:[unity] Type/Shape conversion block 

! 3340:[compar] Two Input Comparator 

! 3350:[datamerge] Merges data signals into an array 

! 3360:[unity] Type/Shape conversion block 

! 3370:[datamerge] Merges data signals into an array 

! 3380:[compar] Two Input Comparator 

! 3390:[unity] Type/Shape conversion block 

! 3400:[compar] Two Input Comparator 

! 3410:[datamerge] Merges data signals into an array 

! 3420:[unity] Type/Shape conversion block 

! 3430:[compar] Two Input Comparator 

! 3440:[unity] Type/Shape conversion block 

! 3450:[datamerge] Merges data signals into an array 

! 3590:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3620:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3630:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3640:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3650:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3660:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3670:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3680:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3690:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3700:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3710:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3720:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3730:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3740:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3750:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3760:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 3770:[datatap] Scalar/Array Tap 

! 3780:[datatap] Scalar/Array Tap 

! 3790:[compar] Two Input Comparator 

! 3800:[compar] Two Input Comparator 

! 3810:[square] Square 

! 3820:[sumjct] Summing/Differencing Junctions 

! 3830:[compar] Two Input Comparator 

! 3840:[compar] Two Input Comparator 

! 3850:[compar] Two Input Comparator 

! 3860:[compar] Two Input Comparator 

! 3870:[compar] Two Input Comparator 

! 3880:[compar] Two Input Comparator 

! 3890:[compar] Two Input Comparator 

! 3900:[compar] Two Input Comparator 

! 3910:[compar] Two Input Comparator 

! 3920:[compar] Two Input Comparator 

! 3930:[datatap] Scalar/Array Tap 

! 3940:[datatap] Scalar/Array Tap 

! 3950:[tdelay] Delay Function 
      CALL DELAY2_CFG(0,100,0,0.1,0.0)

! 3960:[unity] Type/Shape conversion block 

! 3970:[unity] Type/Shape conversion block 

! 3980:[sqrt] Square Root 

! 3990:[div] Divider 

! 4000:[unity] Type/Shape conversion block 

! 4010:[unity] Type/Shape conversion block 

! 4020:[unity] Type/Shape conversion block 

! 4030:[unity] Type/Shape conversion block 

! 4040:[unity] Type/Shape conversion block 

! 4050:[unity] Type/Shape conversion block 

! 4060:[unity] Type/Shape conversion block 

! 4070:[unity] Type/Shape conversion block 

! 4080:[unity] Type/Shape conversion block 

! 4090:[unity] Type/Shape conversion block 

! 4100:[datatap] Scalar/Array Tap 

! 4110:[tdelay] Delay Function 
      CALL DELAY2_CFG(0,100,0,0.1,0.0)

! 4120:[sumjct] Summing/Differencing Junctions 

! 4140:[mult] Multiplier 

! 4200:[datatap] Scalar/Array Tap 

! 4210:[sumjct] Summing/Differencing Junctions 

! 4220:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 4230:[compar] Two Input Comparator 

! 4240:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 4250:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 4260:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 4270:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 4280:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 4290:[tdelay] Delay Function 
      CALL DELAY2_CFG(0,100,0,0.1,0.0)

! 4300:[compar] Two Input Comparator 

! 4310:[compar] Two Input Comparator 

! 4330:[sandhdefn] Sample and Hold 

! 4340:[mult] Multiplier 

! 4350:[div] Divider 

! 4360:[compar] Two Input Comparator 

! 4370:[datatap] Scalar/Array Tap 

! 4380:[datatap] Scalar/Array Tap 

! 4390:[datatap] Scalar/Array Tap 

! 4400:[datatap] Scalar/Array Tap 

! 4410:[datatap] Scalar/Array Tap 

! 4420:[datatap] Scalar/Array Tap 

! 4430:[datatap] Scalar/Array Tap 

! 4440:[datatap] Scalar/Array Tap 

! 4450:[datatap] Scalar/Array Tap 

! 4460:[breaker1] Single Phase Breaker 'BRK3C'
      CALL COMPONENT_ID(ICALL_NO,1867043195)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4470:[breaker1] Single Phase Breaker 'BRK3'
      CALL COMPONENT_ID(ICALL_NO,737123005)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4480:[breaker1] Single Phase Breaker 'BRK2C'
      CALL COMPONENT_ID(ICALL_NO,1640244187)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4490:[breaker1] Single Phase Breaker 'BRK2'
      CALL COMPONENT_ID(ICALL_NO,712146858)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4500:[breaker1] Single Phase Breaker 'BRK1C'
      CALL COMPONENT_ID(ICALL_NO,228360876)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4510:[breaker1] Single Phase Breaker 'BRK1'
      CALL COMPONENT_ID(ICALL_NO,1532214641)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4580:[breaker1] Single Phase Breaker 'BRK1_3'
      CALL COMPONENT_ID(ICALL_NO,230208412)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4610:[breaker1] Single Phase Breaker 'BRK2_3'
      CALL COMPONENT_ID(ICALL_NO,520420120)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

! 4620:[breaker1] Single Phase Breaker 'BRK1_2'
      CALL COMPONENT_ID(ICALL_NO,35916684)
      CALL E1PBRKR1_CFG(0.005,1000000.0,0.0)

      RETURN
      END

!=======================================================================

      SUBROUTINE FaultBlockOut_Begin(Time15, Duration15, Type15,        &
     &   Impedance15, Time14, Duration14, Type14, Impedance14, Time13,  &
     &   Duration13, Type13, Impedance13, Time12, Duration12, Type12,   &
     &   Impedance12, Time11, Duration11, Type11, Impedance11, Time10,  &
     &   Duration10, Type10, Impedance10, Time9, Duration9, Type9,      &
     &   Impedance9, Time8, Duration8, Type8, Impedance8, Time7,        &
     &   Duration7, Type7, Impedance7, Time6, Duration6, Type6,         &
     &   Impedance6, Time5, Duration5, Type5, Impedance5, Time4,        &
     &   Duration4, Type4, Impedance4, Time3, Duration3, Type3,         &
     &   Impedance3, Time2, Duration2, Type2, Impedance2, X_R15, X_R14, &
     &   X_R13, X_R12, X_R11, X_R10, X_R9, X_R8, X_R7, X_R6, X_R5,      &
     &   X_R4, X_R3, X_R2, status, N_faults, Time1, Duration1, Type1,   &
     &   Impedance1, X_R1, Fbase, Capacity1, Capacity2, Capacity3,      &
     &   Capacity4, Capacity5, Capacity6, Capacity7, Capacity8,         &
     &   Capacity9, Capacity10, Capacity11, Capacity12, Capacity13,     &
     &   Capacity14, Capacity15)

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------


!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments
      INTEGER, INTENT(IN)  :: Type15, Type14
      INTEGER, INTENT(IN)  :: Type13, Type12
      INTEGER, INTENT(IN)  :: Type11, Type10
      INTEGER, INTENT(IN)  :: Type9, Type8, Type7
      INTEGER, INTENT(IN)  :: Type6, Type5, Type4
      INTEGER, INTENT(IN)  :: Type3, Type2
      INTEGER, INTENT(IN)  :: status, N_faults
      INTEGER, INTENT(IN)  :: Type1
      REAL,    INTENT(IN)  :: Time15, Duration15
      REAL,    INTENT(IN)  :: Impedance15, Time14
      REAL,    INTENT(IN)  :: Duration14
      REAL,    INTENT(IN)  :: Impedance14, Time13
      REAL,    INTENT(IN)  :: Duration13
      REAL,    INTENT(IN)  :: Impedance13, Time12
      REAL,    INTENT(IN)  :: Duration12
      REAL,    INTENT(IN)  :: Impedance12, Time11
      REAL,    INTENT(IN)  :: Duration11
      REAL,    INTENT(IN)  :: Impedance11, Time10
      REAL,    INTENT(IN)  :: Duration10
      REAL,    INTENT(IN)  :: Impedance10, Time9
      REAL,    INTENT(IN)  :: Duration9
      REAL,    INTENT(IN)  :: Impedance9, Time8
      REAL,    INTENT(IN)  :: Duration8
      REAL,    INTENT(IN)  :: Impedance8, Time7
      REAL,    INTENT(IN)  :: Duration7
      REAL,    INTENT(IN)  :: Impedance7, Time6
      REAL,    INTENT(IN)  :: Duration6
      REAL,    INTENT(IN)  :: Impedance6, Time5
      REAL,    INTENT(IN)  :: Duration5
      REAL,    INTENT(IN)  :: Impedance5, Time4
      REAL,    INTENT(IN)  :: Duration4
      REAL,    INTENT(IN)  :: Impedance4, Time3
      REAL,    INTENT(IN)  :: Duration3
      REAL,    INTENT(IN)  :: Impedance3, Time2
      REAL,    INTENT(IN)  :: Duration2
      REAL,    INTENT(IN)  :: Impedance2, X_R15
      REAL,    INTENT(IN)  :: X_R14, X_R13, X_R12
      REAL,    INTENT(IN)  :: X_R11, X_R10, X_R9
      REAL,    INTENT(IN)  :: X_R8, X_R7, X_R6
      REAL,    INTENT(IN)  :: X_R5, X_R4, X_R3
      REAL,    INTENT(IN)  :: X_R2, Time1
      REAL,    INTENT(IN)  :: Duration1
      REAL,    INTENT(IN)  :: Impedance1, X_R1
      REAL,    INTENT(IN)  :: Fbase, Capacity1
      REAL,    INTENT(IN)  :: Capacity2
      REAL,    INTENT(IN)  :: Capacity3
      REAL,    INTENT(IN)  :: Capacity4
      REAL,    INTENT(IN)  :: Capacity5
      REAL,    INTENT(IN)  :: Capacity6
      REAL,    INTENT(IN)  :: Capacity7
      REAL,    INTENT(IN)  :: Capacity8
      REAL,    INTENT(IN)  :: Capacity9
      REAL,    INTENT(IN)  :: Capacity10
      REAL,    INTENT(IN)  :: Capacity11
      REAL,    INTENT(IN)  :: Capacity12
      REAL,    INTENT(IN)  :: Capacity13
      REAL,    INTENT(IN)  :: Capacity14
      REAL,    INTENT(IN)  :: Capacity15

! Electrical Node Indices

! Control Signals
      INTEGER  IT_18, IT_19, IT_20, IT_21, IT_22
      INTEGER  IT_23, IT_24, IT_25, IT_26, IT_27
      INTEGER  IT_28, IT_29, IT_30, IT_31, IT_32
      INTEGER  IT_33, IT_34, IT_35, IT_36, IT_37
      INTEGER  IT_38, IT_39, IT_40, IT_41, IT_42
      INTEGER  IT_43, IT_44, IT_45, IT_46, IT_47
      INTEGER  IT_48, IT_49, IT_50, IT_51, IT_52
      INTEGER  IT_53, IT_55, IT_56, IT_57, IT_58
      INTEGER  IT_59, IT_60, IT_61, IT_62, IT_63
      INTEGER  IT_124, IT_125, IT_126, IT_127
      INTEGER  IT_128, IT_129, IT_130, IT_131
      INTEGER  IT_132
      REAL     RT_42, RT_43, RT_44, RT_45, RT_46
      REAL     RT_47, RT_51, RT_52, RT_55, RT_56
      REAL     RT_59, RT_60, RT_63, RT_64, RT_67
      REAL     RT_71, RT_73, RT_74, RT_75, RT_76
      REAL     RT_77, RT_78, RT_79, RT_80, RT_81
      REAL     RT_82, RT_83, RT_84, RT_85, RT_86
      REAL     RT_88, RT_136, RT_137, RT_138
      REAL     RT_139, RT_142, RT_143, RT_144
      REAL     RT_151

! Internal Variables

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(1), IBRCH(1), INODE       ! SS/Node/Branch/Xfmr


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      INODE     = NNODE + 2
      NNODE     = NNODE + 14
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 1

      DO IT_0 = 1,1
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 18

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 20:[const] Real Constant 
      RT_86 = 8.5

! 70:[const] Real Constant 
      RT_73 = 0.5

! 220:[const] Real Constant 
      RT_85 = 9.5

! 270:[consti] Integer Constant 
      IT_35 = 0

! 280:[consti] Integer Constant 
      IT_34 = 0

! 290:[consti] Integer Constant 
      IT_33 = 0

! 300:[consti] Integer Constant 
      IT_32 = 1

! 310:[consti] Integer Constant 
      IT_31 = 1

! 320:[const] Real Constant 
      RT_51 = -0.5

! 330:[consti] Integer Constant 
      IT_30 = 1

! 340:[const] Real Constant 
      RT_74 = 1.5

! 350:[consti] Integer Constant 
      IT_42 = 1

! 360:[consti] Integer Constant 
      IT_43 = 1

! 400:[consti] Integer Constant 
      IT_44 = 1

! 440:[const] Real Constant 
      RT_52 = 0.5

! 540:[consti] Integer Constant 
      IT_18 = 0

! 550:[const] Real Constant 
      RT_84 = 10.5

! 560:[consti] Integer Constant 
      IT_19 = 0

! 570:[consti] Integer Constant 
      IT_20 = 1

! 590:[consti] Integer Constant 
      IT_21 = 1

! 600:[consti] Integer Constant 
      IT_22 = 1

! 610:[consti] Integer Constant 
      IT_23 = 1

! 620:[consti] Integer Constant 
      IT_51 = 1

! 630:[consti] Integer Constant 
      IT_52 = 1

! 640:[consti] Integer Constant 
      IT_53 = 1

! 650:[const] Real Constant 
      RT_56 = 0.5

! 690:[const] Real Constant 
      RT_55 = 1.5

! 700:[const] Real Constant 
      RT_75 = 2.5

! 840:[consti] Integer Constant 
      IT_41 = 0

! 850:[consti] Integer Constant 
      IT_40 = 1

! 860:[consti] Integer Constant 
      IT_39 = 1

! 870:[consti] Integer Constant 
      IT_38 = 1

! 890:[consti] Integer Constant 
      IT_37 = 1

! 900:[consti] Integer Constant 
      IT_36 = 1

! 910:[const] Real Constant 
      RT_59 = 1.5

! 920:[consti] Integer Constant 
      IT_45 = 1

! 930:[consti] Integer Constant 
      IT_46 = 1

! 940:[consti] Integer Constant 
      IT_47 = 1

! 950:[const] Real Constant 
      RT_83 = 11.5

! 970:[const] Real Constant 
      RT_60 = 2.5

! 1010:[const] Real Constant 
      RT_76 = 3.5

! 1130:[consti] Integer Constant 
      IT_29 = 1

! 1140:[consti] Integer Constant 
      IT_28 = 1

! 1150:[consti] Integer Constant 
      IT_27 = 1

! 1160:[consti] Integer Constant 
      IT_26 = 0

! 1180:[consti] Integer Constant 
      IT_25 = 1

! 1190:[const] Real Constant 
      RT_64 = 2.5

! 1200:[consti] Integer Constant 
      IT_24 = 1

! 1210:[consti] Integer Constant 
      IT_48 = 1

! 1220:[consti] Integer Constant 
      IT_49 = 1

! 1230:[consti] Integer Constant 
      IT_50 = 1

! 1250:[const] Real Constant 
      RT_63 = 3.5

! 1270:[const] Real Constant 
      RT_82 = 12.5

! 1320:[const] Real Constant 
      RT_77 = 4.5

! 1370:[consti] Integer Constant 
      IT_132 = 1

! 1380:[consti] Integer Constant 
      IT_131 = 1

! 1390:[consti] Integer Constant 
      IT_130 = 1

! 1400:[consti] Integer Constant 
      IT_129 = 1

! 1420:[consti] Integer Constant 
      IT_128 = 1

! 1430:[consti] Integer Constant 
      IT_127 = 1

! 1440:[const] Real Constant 
      RT_136 = 3.5

! 1460:[consti] Integer Constant 
      IT_124 = 0

! 1470:[consti] Integer Constant 
      IT_125 = 0

! 1490:[consti] Integer Constant 
      IT_126 = 0

! 1520:[const] Real Constant 
      RT_137 = 4.5

! 1580:[const] Real Constant 
      RT_81 = 13.5

! 1620:[consti] Integer Constant 
      IT_55 = 1

! 1630:[consti] Integer Constant 
      IT_56 = 1

! 1640:[consti] Integer Constant 
      IT_57 = 1

! 1650:[consti] Integer Constant 
      IT_58 = 1

! 1660:[consti] Integer Constant 
      IT_59 = 1

! 1670:[consti] Integer Constant 
      IT_60 = 1

! 1680:[consti] Integer Constant 
      IT_61 = 1

! 1690:[consti] Integer Constant 
      IT_62 = 1

! 1710:[consti] Integer Constant 
      IT_63 = 1

! 1720:[const] Real Constant 
      RT_78 = 5.5

! 1870:[const] Real Constant 
      RT_80 = 14.5

! 1920:[const] Real Constant 
      RT_79 = 6.5

! 2050:[const] Real Constant 
      RT_71 = 1.0

! 2070:[const] Real Constant 
      RT_143 = 0.01

! 2090:[const] Real Constant 
      RT_45 = 0.0

! 2100:[const] Real Constant 
      RT_46 = 0.0

! 2110:[const] Real Constant 
      RT_42 = 100.0

! 2120:[const] Real Constant 
      RT_88 = 7.5

! 2140:[const] Real Constant 
      RT_43 = 9999999.0

! 2150:[const] Real Constant 
      RT_44 = 1.0

! 2180:[const] Real Constant 
      RT_144 = 0.01

! 2190:[const] Real Constant 
      RT_47 = 0.0

! 2270:[emtconst] Commonly Used Constants (pi...) 
      RT_67 = TWO_PI

! 2280:[const] Real Constant 
      RT_139 = 3.5

! 2290:[const] Real Constant 
      RT_138 = 4.5

! 2300:[const] Real Constant 
      RT_142 = 1.0

! 2310:[const] Real Constant 
      RT_151 = 0.05

      RETURN
      END

