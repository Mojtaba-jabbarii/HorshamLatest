!=======================================================================
! Generated by: PSCAD v5.0.1.0
! Warning:  The content of this file is automatically generated.
!           Do not modify, as any changes made here will be lost!
!-----------------------------------------------------------------------
! Component     : Main
! Description   : 
!-----------------------------------------------------------------------


!=======================================================================

      SUBROUTINE MainDyn()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    EMTDC_XTTRANS  ! 'Timed Transition'
!     SUBR    InvFbDummyDyn  ! 
!     SUBR    TSAT21        ! Transformer Saturation Subroutine
!     SUBR    DPS_DummyDyn  ! 
!     SUBR    GridSourceDyn  ! 
!     SUBR    FaultBlockDyn  ! 
!     SUBR    SymmetricalComponentsCalc_1_1Dyn  ! 
!     SUBR    SymmetricalComponentsCalcDyn  ! 
!     SUBR    setpointProfilesDyn  ! 
!     SUBR    EMTDC_X2COMP  ! 'Comparator with Interpolation'
!     SUBR    TapCtrl_1Dyn  ! 
!     SUBR    Aggr_Fb_ScaledDyn  ! 
!     SUBR    DDSRF_PLL_1Dyn  ! 
!     SUBR    HyCtlDyn      ! 
!     SUBR    SCxxxxDyn     ! SMA  SC xxxx
      REAL    LIMIT         ! Hard Limiter
!     SUBR    DEBUG_HyCon_ScopeDyn  ! 
!     SUBR    SC_ScopeDyn   ! Scopes for monitoring

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  PCU2_MVBUS(3), PCU1_MVBUS(3)
      INTEGER  NT_16, NT_23(3), NT_24(3)
      INTEGER  NT_27(3), NT_28(3)

! Control Signals
      LOGICAL  LT_1
      INTEGER  No_PCU1, Tap_position, PCU2_BRK
      INTEGER  POI_BRK, IT_1, IT_2, MVBRK, IT_3
      INTEGER  No_PCU2, IT_4, PCU1_BRK, IT_5
      INTEGER  IT_6, PVmode
      REAL     DPS1_Spt(5), DPS2_Spt(5)
      REAL     Meas_Grid(10), RT_1(11)
      REAL     Poi_Ms(12), Pv_Ms(4), RT_2(20)
      REAL     RT_3(20), PCU2_Fb_SI(10)
      REAL     Bess_Ms(4), DPS2_Fb(10)
      REAL     DPS1_Fb(10), maintap, RT_4
      REAL     PoiVArSpt_pu, RT_5, RT_6, RT_7
      REAL     RT_8, RT_9, PCU1_Irr, RT_10, RT_11
      REAL     RT_12, RT_13, RT_14, MEAS_PCU1(17)
      REAL     MEAS_PCU2(17), Iqzero_PoC, RT_15
      REAL     RT_16, RT_17, Vneg_PoC, Vpos_PoC
      REAL     Vzero_PoC, Vab_PPC, Vbc_PPC
      REAL     Vca_PPC, Ineg_PoC, Ipos_PoC
      REAL     Izero_PoC, PCU1_P_LV, PCU1_Q_LV
      REAL     PCU1_A_LV(3), PCU1_V_LV_pu
      REAL     PCU1_Q_MV, PCU1_P_MV, PCU1_A_MV(3)
      REAL     RT_18, RT_19, RT_20, RT_21, RT_22
      REAL     RT_23, PCU2_A_MV(3), PCU2_P_MV
      REAL     PCU2_Q_MV, PCU2_Q_LV, PCU2_P_LV
      REAL     PCU1_Arms_LV, PCU2_Arms_LV
      REAL     PCU2_Phs, PCU1_Phs, PLANT_Phs
      REAL     RT_24, MV_Bus_Vol, RT_25, Fsys
      REAL     PCU1_Fb_SI(10), dummy_fb(10)
      REAL     SC_Fb(10), PoiVolSpt
      REAL     PCU1_P_MV_AGGR, PCU1_Q_MV_AGGR
      REAL     PCU2_P_MV_AGGR, PCU2_Q_MV_AGGR
      REAL     Qspt_MVAr, PoiPfSpt, Pspt_MW
      REAL     PoiWLimSales_pu, PCU1_V_LV
      REAL     PCU1_V_MV_pu, PCU1_V_MV
      REAL     PCU2_V_MV_pu, PCU2_V_MV
      REAL     MV_Vol_base, RT_26, RT_27, inf_BRK
      REAL     Pcmd_PPC_to_INV_PV
      REAL     Qcmd_PPC_to_INV_PV
      REAL     Pcmd_PPC_to_INV_BESS
      REAL     Qcmd_PPC_to_INV_BESS, Pout_INV_PV
      REAL     RT_28, P_Base_PV, Qout_INV_PV
      REAL     RT_29, Pout_INV_BESS, RT_30
      REAL     P_Base_BESS, Qout_INV_BESS, RT_31
      REAL     PCU2_V_LV_pu, PCU2_V_LV
      REAL     LV_Vol_base, PCU2_A_LV(3)
      REAL     HV_Vol_base, BESSspt_MW
      REAL     BessWSpt_pu, PoiVolSpt_pu
      REAL     Q_Base_PV, Q_Base_BESS
      REAL     Iq_neg_pos_ratio, Iqneg_PoC
      REAL     Iqpos_PoC, Itot_PoC, RT_32, RT_33
      REAL     RT_34, Iq_PoC, Id_PoC, RT_35
      REAL     RT_36, RT_37, RT_38, RT_39, RT_40
      REAL     Ia_PoC, Ib_PoC, Ic_PoC
      REAL     PLANT_V_HV_pu, PLANT_P_HV
      REAL     PLANT_Q_HV, Vol_POI, Hz_POI
      REAL     McbStt, GcbStt, Vrms_abc_POI(3)
      REAL     PoiWLimSales, BessWSpt, PVini
      REAL     FRT_flag_PV, FRT_flag_BESS
      REAL     FRT_flag_POC, PLANT_Q_MV
      REAL     PLANT_P_MV, PLANT_V_MV, RT_41
      REAL     PoiVArSpt, RT_42, Meas_Plant(10)
      REAL     PCU1_Fb(10), PCU2_Fb(10), V_ph(3)
      REAL     PCU1_Spt(10), PCU2_Spt(10)
      REAL     DEBUG_PCU1(100), DEBUG_PCU2(100)
      REAL     DEBUG_HyCon1(40), PLANT_V_HV
      REAL     Amp_MV(3), PLANT_I_MV
      REAL     QiniBESS       ! Aliases: QiniPV

! Internal Variables
      LOGICAL  LVD1_1
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD2_1(2), RVD2_2(2), RVD1_1
      REAL     RVD1_2, RVD1_3, RVD1_4
      REAL     OLD_CCIN_a1, OLD_CCIN_b1
      REAL     OLD_CCIN_c1, OLD_CCIN_a2
      REAL     OLD_CCIN_b2, OLD_CCIN_c2
      REAL     NEW_CCIN_a1, NEW_CCIN_b1
      REAL     NEW_CCIN_c1, NEW_CCIN_a2
      REAL     NEW_CCIN_b2, NEW_CCIN_c2, IMKa_OLD
      REAL     IMKb_OLD, IMKc_OLD, IKMa_OLD
      REAL     IKMb_OLD, IKMc_OLD, IZom, IZo
      REAL     Scl1, X_KNEE, TURNS_V, RVD1_5
      REAL     RVD1_6, RVD1_7

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, IT_0           ! Storage Indices
      INTEGER ICX, IPGB                           ! Control/Monitoring
      INTEGER ISUBS, SS(8), IBRCH(8), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      TXFR(NTXFR,1) = NSTOL
      TXFR(NTXFR,2) = NSTOI
      TXFR(NTXFR,3) = NSTOF
      TXFR(NTXFR,4) = NSTOC

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ISTOL     = NSTOL
      NSTOL     = NSTOL + 1
      ISTOI     = NSTOI
      NSTOI     = NSTOI + 14
      ISTOF     = NSTOF
      NSTOF     = NSTOF + 628
      IPGB      = NPGB
      NPGB      = NPGB + 70
      ICX       = NCX
      NCX       = NCX + 7
      INODE     = NNODE + 2
      NNODE     = NNODE + 96
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 8

      DO IT_0 = 1,8
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 113


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 3


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 1


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 0


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0


      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 3


      IBRCH(7)     = NBRCH(SS(7))
      NBRCH(SS(7)) = NBRCH(SS(7)) + 0


      IBRCH(8)     = NBRCH(SS(8))
      NBRCH(SS(8)) = NBRCH(SS(8)) + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      No_PCU1  = STOI(ISTOI + 1)
      Tap_position = STOI(ISTOI + 2)
      maintap  = STOF(ISTOF + 122)
      RT_4     = STOF(ISTOF + 123)
      PoiVArSpt_pu = STOF(ISTOF + 124)
      RT_5     = STOF(ISTOF + 125)
      RT_6     = STOF(ISTOF + 126)
      RT_7     = STOF(ISTOF + 127)
      RT_8     = STOF(ISTOF + 128)
      RT_9     = STOF(ISTOF + 129)
      PCU1_Irr = STOF(ISTOF + 130)
      RT_10    = STOF(ISTOF + 131)
      RT_11    = STOF(ISTOF + 132)
      RT_12    = STOF(ISTOF + 133)
      RT_13    = STOF(ISTOF + 134)
      RT_14    = STOF(ISTOF + 135)
      Iqzero_PoC = STOF(ISTOF + 170)
      RT_15    = STOF(ISTOF + 171)
      RT_16    = STOF(ISTOF + 172)
      RT_17    = STOF(ISTOF + 173)
      Vneg_PoC = STOF(ISTOF + 174)
      Vpos_PoC = STOF(ISTOF + 175)
      Vzero_PoC = STOF(ISTOF + 176)
      Vab_PPC  = STOF(ISTOF + 177)
      Vbc_PPC  = STOF(ISTOF + 178)
      Vca_PPC  = STOF(ISTOF + 179)
      Ineg_PoC = STOF(ISTOF + 180)
      Ipos_PoC = STOF(ISTOF + 181)
      Izero_PoC = STOF(ISTOF + 182)
      PCU1_P_LV = STOF(ISTOF + 183)
      PCU1_Q_LV = STOF(ISTOF + 184)
      PCU1_V_LV_pu = STOF(ISTOF + 188)
      PCU1_Q_MV = STOF(ISTOF + 189)
      PCU1_P_MV = STOF(ISTOF + 190)
      RT_18    = STOF(ISTOF + 194)
      RT_19    = STOF(ISTOF + 195)
      RT_20    = STOF(ISTOF + 196)
      RT_21    = STOF(ISTOF + 197)
      RT_22    = STOF(ISTOF + 198)
      RT_23    = STOF(ISTOF + 199)
      PCU2_P_MV = STOF(ISTOF + 203)
      PCU2_Q_MV = STOF(ISTOF + 204)
      PCU2_Q_LV = STOF(ISTOF + 205)
      PCU2_P_LV = STOF(ISTOF + 206)
      PCU2_BRK = STOI(ISTOI + 3)
      LT_1     = STOL(ISTOL + 1)
      POI_BRK  = STOI(ISTOI + 4)
      IT_1     = STOI(ISTOI + 5)
      IT_2     = STOI(ISTOI + 6)
      PCU1_Arms_LV = STOF(ISTOF + 207)
      PCU2_Arms_LV = STOF(ISTOF + 208)
      PCU2_Phs = STOF(ISTOF + 209)
      PCU1_Phs = STOF(ISTOF + 210)
      PLANT_Phs = STOF(ISTOF + 211)
      MVBRK    = STOI(ISTOI + 7)
      RT_24    = STOF(ISTOF + 212)
      IT_3     = STOI(ISTOI + 8)
      MV_Bus_Vol = STOF(ISTOF + 213)
      RT_25    = STOF(ISTOF + 214)
      Fsys     = STOF(ISTOF + 215)
      No_PCU2  = STOI(ISTOI + 9)
      IT_4     = STOI(ISTOI + 10)
      PCU1_BRK = STOI(ISTOI + 11)
      IT_5     = STOI(ISTOI + 12)
      IT_6     = STOI(ISTOI + 13)
      PVmode   = STOI(ISTOI + 14)
      PoiVolSpt = STOF(ISTOF + 246)
      PCU1_P_MV_AGGR = STOF(ISTOF + 247)
      PCU1_Q_MV_AGGR = STOF(ISTOF + 248)
      PCU2_P_MV_AGGR = STOF(ISTOF + 249)
      PCU2_Q_MV_AGGR = STOF(ISTOF + 250)
      Qspt_MVAr = STOF(ISTOF + 251)
      PoiPfSpt = STOF(ISTOF + 252)
      Pspt_MW  = STOF(ISTOF + 253)
      PoiWLimSales_pu = STOF(ISTOF + 254)
      PCU1_V_LV = STOF(ISTOF + 255)
      PCU1_V_MV_pu = STOF(ISTOF + 256)
      PCU1_V_MV = STOF(ISTOF + 257)
      PCU2_V_MV_pu = STOF(ISTOF + 258)
      PCU2_V_MV = STOF(ISTOF + 259)
      MV_Vol_base = STOF(ISTOF + 260)
      RT_26    = STOF(ISTOF + 261)
      RT_27    = STOF(ISTOF + 262)
      inf_BRK  = STOF(ISTOF + 263)
      Pcmd_PPC_to_INV_PV = STOF(ISTOF + 264)
      Qcmd_PPC_to_INV_PV = STOF(ISTOF + 265)
      Pcmd_PPC_to_INV_BESS = STOF(ISTOF + 266)
      Qcmd_PPC_to_INV_BESS = STOF(ISTOF + 267)
      Pout_INV_PV = STOF(ISTOF + 268)
      RT_28    = STOF(ISTOF + 269)
      P_Base_PV = STOF(ISTOF + 270)
      Qout_INV_PV = STOF(ISTOF + 271)
      RT_29    = STOF(ISTOF + 272)
      Pout_INV_BESS = STOF(ISTOF + 273)
      RT_30    = STOF(ISTOF + 274)
      P_Base_BESS = STOF(ISTOF + 275)
      Qout_INV_BESS = STOF(ISTOF + 276)
      RT_31    = STOF(ISTOF + 277)
      PCU2_V_LV_pu = STOF(ISTOF + 278)
      PCU2_V_LV = STOF(ISTOF + 279)
      LV_Vol_base = STOF(ISTOF + 280)
      HV_Vol_base = STOF(ISTOF + 284)
      BESSspt_MW = STOF(ISTOF + 285)
      BessWSpt_pu = STOF(ISTOF + 286)
      PoiVolSpt_pu = STOF(ISTOF + 287)
      Q_Base_PV = STOF(ISTOF + 288)
      Q_Base_BESS = STOF(ISTOF + 289)
      Iq_neg_pos_ratio = STOF(ISTOF + 290)
      Iqneg_PoC = STOF(ISTOF + 291)
      Iqpos_PoC = STOF(ISTOF + 292)
      Itot_PoC = STOF(ISTOF + 293)
      RT_32    = STOF(ISTOF + 294)
      RT_33    = STOF(ISTOF + 295)
      RT_34    = STOF(ISTOF + 296)
      Iq_PoC   = STOF(ISTOF + 297)
      Id_PoC   = STOF(ISTOF + 298)
      RT_35    = STOF(ISTOF + 299)
      RT_36    = STOF(ISTOF + 300)
      RT_37    = STOF(ISTOF + 301)
      RT_38    = STOF(ISTOF + 302)
      RT_39    = STOF(ISTOF + 303)
      RT_40    = STOF(ISTOF + 304)
      Ia_PoC   = STOF(ISTOF + 305)
      Ib_PoC   = STOF(ISTOF + 306)
      Ic_PoC   = STOF(ISTOF + 307)
      PLANT_V_HV_pu = STOF(ISTOF + 308)
      PLANT_P_HV = STOF(ISTOF + 309)
      PLANT_Q_HV = STOF(ISTOF + 310)
      Vol_POI  = STOF(ISTOF + 311)
      Hz_POI   = STOF(ISTOF + 312)
      McbStt   = STOF(ISTOF + 313)
      GcbStt   = STOF(ISTOF + 314)
      PoiWLimSales = STOF(ISTOF + 318)
      BessWSpt = STOF(ISTOF + 319)
      PVini    = STOF(ISTOF + 320)
      FRT_flag_PV = STOF(ISTOF + 321)
      FRT_flag_BESS = STOF(ISTOF + 322)
      FRT_flag_POC = STOF(ISTOF + 323)
      PLANT_Q_MV = STOF(ISTOF + 324)
      PLANT_P_MV = STOF(ISTOF + 325)
      PLANT_V_MV = STOF(ISTOF + 326)
      QiniBESS = STOF(ISTOF + 327)
      RT_41    = STOF(ISTOF + 328)
      PoiVArSpt = STOF(ISTOF + 329)
      RT_42    = STOF(ISTOF + 330)
      PLANT_V_HV = STOF(ISTOF + 624)
      PLANT_I_MV = STOF(ISTOF + 628)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         PCU1_A_LV(IT_0) = STOF(ISTOF + 184 + IT_0)
         PCU1_A_MV(IT_0) = STOF(ISTOF + 190 + IT_0)
         PCU2_A_MV(IT_0) = STOF(ISTOF + 199 + IT_0)
         PCU2_A_LV(IT_0) = STOF(ISTOF + 280 + IT_0)
         Vrms_abc_POI(IT_0) = STOF(ISTOF + 314 + IT_0)
         V_ph(IT_0) = STOF(ISTOF + 360 + IT_0)
         Amp_MV(IT_0) = STOF(ISTOF + 624 + IT_0)
      END DO

! Array (1:4) quantities...
      DO IT_0 = 1,4
         Pv_Ms(IT_0) = STOF(ISTOF + 43 + IT_0)
         Bess_Ms(IT_0) = STOF(ISTOF + 97 + IT_0)
      END DO

! Array (1:5) quantities...
      DO IT_0 = 1,5
         DPS1_Spt(IT_0) = STOF(ISTOF + 0 + IT_0)
         DPS2_Spt(IT_0) = STOF(ISTOF + 5 + IT_0)
      END DO

! Array (1:10) quantities...
      DO IT_0 = 1,10
         Meas_Grid(IT_0) = STOF(ISTOF + 10 + IT_0)
         PCU2_Fb_SI(IT_0) = STOF(ISTOF + 87 + IT_0)
         DPS2_Fb(IT_0) = STOF(ISTOF + 101 + IT_0)
         DPS1_Fb(IT_0) = STOF(ISTOF + 111 + IT_0)
         PCU1_Fb_SI(IT_0) = STOF(ISTOF + 215 + IT_0)
         dummy_fb(IT_0) = STOF(ISTOF + 225 + IT_0)
         SC_Fb(IT_0) = STOF(ISTOF + 235 + IT_0)
         Meas_Plant(IT_0) = STOF(ISTOF + 330 + IT_0)
         PCU1_Fb(IT_0) = STOF(ISTOF + 340 + IT_0)
         PCU2_Fb(IT_0) = STOF(ISTOF + 350 + IT_0)
         PCU1_Spt(IT_0) = STOF(ISTOF + 363 + IT_0)
         PCU2_Spt(IT_0) = STOF(ISTOF + 373 + IT_0)
      END DO

! Array (1:11) quantities...
      DO IT_0 = 1,11
         RT_1(IT_0) = STOF(ISTOF + 20 + IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         Poi_Ms(IT_0) = STOF(ISTOF + 31 + IT_0)
      END DO

! Array (1:17) quantities...
      DO IT_0 = 1,17
         MEAS_PCU1(IT_0) = STOF(ISTOF + 135 + IT_0)
         MEAS_PCU2(IT_0) = STOF(ISTOF + 152 + IT_0)
      END DO

! Array (1:20) quantities...
      DO IT_0 = 1,20
         RT_2(IT_0) = STOF(ISTOF + 47 + IT_0)
         RT_3(IT_0) = STOF(ISTOF + 67 + IT_0)
      END DO

! Array (1:40) quantities...
      DO IT_0 = 1,40
         DEBUG_HyCon1(IT_0) = STOF(ISTOF + 583 + IT_0)
      END DO

! Array (1:100) quantities...
      DO IT_0 = 1,100
         DEBUG_PCU1(IT_0) = STOF(ISTOF + 383 + IT_0)
         DEBUG_PCU2(IT_0) = STOF(ISTOF + 483 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_16 = NODE(INODE + 47)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         PCU2_MVBUS(IT_0) = NODE(INODE + 12 + IT_0)
         PCU1_MVBUS(IT_0) = NODE(INODE + 18 + IT_0)
         NT_23(IT_0) = NODE(INODE + 61 + IT_0)
         NT_24(IT_0) = NODE(INODE + 64 + IT_0)
         NT_27(IT_0) = NODE(INODE + 73 + IT_0)
         NT_28(IT_0) = NODE(INODE + 76 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSD:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'HV Vol base'
      HV_Vol_base = 220.0

! 20:[const] Real Constant 'MV Vol base'
      MV_Vol_base = 33.0

! 30:[const] Real Constant 'Freq base'
      Fsys = 50.0

! 40:[const] Real Constant 'LV Vol base'
      LV_Vol_base = 0.63

! 50:[const] Real Constant 'P_Base_PV'
      P_Base_PV = 4200.0

! 60:[const] Real Constant 'P_Base_BESS'
      P_Base_BESS = 4200.0

! 70:[const] Real Constant 'Q_Base_PV'
      Q_Base_PV = 2520.0

! 80:[const] Real Constant 
      RT_18 = 127947.2

! 90:[const] Real Constant 'Q_Base_BESS'
      Q_Base_BESS = 2520.0

! 100:[const] Real Constant 
      RT_20 = 119000.0

! 110:[consti] Integer Constant 'HV_BRK'
      POI_BRK = 0

! 120:[const] Real Constant 
      RT_21 = -100000.0

! 130:[const] Real Constant 
      RT_22 = 47005.0

! 140:[unity] Type/Shape conversion block 
! integer -> logical
      LT_1 = E_ItoB(POI_BRK)

! 150:[inv] Interpolated Logic Inverter 
      IF (E_BtoI(LT_1) .NE. 0) THEN
         IT_1 = 0
      ELSE
         IT_1 = 1
      ENDIF

! 160:[bin_delay] Timed ON/OFF Logic Transition 
!
      RVD2_1(1) = REAL(IT_1)
      RVD2_1(2) = 0.0
!
      CALL EMTDC_XTTRANS(0,0.05,0.05,RVD2_1,RVD2_2)
!
      IT_2 = NINT(RVD2_2(1))

! 170:[unity] Type/Shape conversion block 
! logical -> real
      McbStt = E_BtoR(E_ItoB(IT_2))

! 180:[const] Real Constant 
      RT_23 = -47005.0

! 190:[const] Real Constant 'Gcb'
      GcbStt = 0.0

! 200:[const] Real Constant 
      RT_19 = 50.0

! 210:[InvFbDummy]  
      CALL InvFbDummyDyn(dummy_fb)


! 220:[const] Real Constant 
      RT_40 = 96.77

! 230:[var] Variable Input Slider 'Vstp_manual'
      RT_8 = CX(CXMAP(ICX+1))

! 240:[const] Real Constant 
      RT_36 = 96.77

! 250:[var] Variable Input Slider 'Qstp_manual'
      RT_7 = CX(CXMAP(ICX+2))

! 260:[var_switch] Two State Switch 'PV'
      RT_25 = CX(CXMAP(ICX+3))

! 270:[unity] Type/Shape conversion block 
! real -> nearest integer
      PVmode = NINT(RT_25)

! 280:[var] Variable Input Slider 'Pstp_manual'
      RT_5 = CX(CXMAP(ICX+4))

! 290:[unity] Type/Shape conversion block 
! real -> nearest integer
      IT_4 = NINT(RT_25)

! 300:[var] Variable Input Slider 'PFstp_manual'
      RT_6 = CX(CXMAP(ICX+5))

! 310:[consti] Integer Constant 'PCU1_BRK'
      IT_6 = 0

! 320:[inv] Interpolated Logic Inverter 
      IF (IT_6 .NE. 0) THEN
         IT_5 = 0
      ELSE
         IT_5 = 1
      ENDIF

! 330:[const] Real Constant 
      RT_12 = 0.0

! 340:[var] Variable Input Slider 'P1stp_manual'
      RT_10 = CX(CXMAP(ICX+6))

! 350:[consti] Integer Constant 'PCU2_BRK'
      PCU2_BRK = 0

! 360:[const] Real Constant 
      RT_14 = 0.0

! 370:[consti] Integer Constant 'MVBRK'
      MVBRK = 0

! 380:[var] Variable Input Slider 'Irradiance'
      RT_9 = CX(CXMAP(ICX+7))

! 390:[time-sig] Output of Simulation Time 
      RT_26 = TIME

! 400:[const] Real Constant 'inf_BRK_time'
      RT_27 = 1000.0

! 410:[consti] Integer Constant 
      No_PCU1 = 36

! 420:[const] Real Constant 
      RT_24 = 25.0

! 440:[xfmr_2w_scaled] 3 Phase 2 Winding Transformer - With Scaling! 'T1_2'




      IZo = 1.0/((0.065*33.0*33.0)/(2.0*4.2*TWO_PI*50.0*DELT))
      Scl1 = REAL(No_PCU1)-1
      IZom = Scl1*IZo

! Recall current injections from the last time step
      OLD_CCIN_a1 = STORF(NSTORF+0)
      OLD_CCIN_b1 = STORF(NSTORF+1)
      OLD_CCIN_c1 = STORF(NSTORF+2)
      OLD_CCIN_a2 = STORF(NSTORF+3)
      OLD_CCIN_b2 = STORF(NSTORF+4)
      OLD_CCIN_c2 = STORF(NSTORF+5)

! Compute the branch currents from the last time step
      IMKa_OLD =  VDC(NT_28(1),SS(1))*IZo - OLD_CCIN_a2
      IMKb_OLD =  VDC(NT_28(2),SS(1))*IZo - OLD_CCIN_b2
      IMKc_OLD =  VDC(NT_28(3),SS(1))*IZo - OLD_CCIN_c2
      IKMa_OLD =  VDC(PCU1_MVBUS(1),SS(1))*IZo - OLD_CCIN_a1
      IKMb_OLD =  VDC(PCU1_MVBUS(2),SS(1))*IZo - OLD_CCIN_b1
      IKMc_OLD =  VDC(PCU1_MVBUS(3),SS(1))*IZo - OLD_CCIN_c1


! Define the new current injections
      NEW_CCIN_a1 = VDC(NT_28(1), SS(1))*IZo + IMKa_OLD + (VDC(NT_28(1),&
     & SS(1))*IZo + IMKa_OLD)*Scl1
      NEW_CCIN_b1 = VDC(NT_28(2), SS(1))*IZo + IMKb_OLD + (VDC(NT_28(2),&
     & SS(1))*IZo + IMKb_OLD)*Scl1
      NEW_CCIN_c1 = VDC(NT_28(3), SS(1))*IZo + IMKc_OLD + (VDC(NT_28(3),&
     & SS(1))*IZo + IMKc_OLD)*Scl1
      NEW_CCIN_a2 = VDC(PCU1_MVBUS(1), SS(1))*IZo + IKMa_OLD
      NEW_CCIN_b2 = VDC(PCU1_MVBUS(2), SS(1))*IZo + IKMb_OLD
      NEW_CCIN_c2 = VDC(PCU1_MVBUS(3), SS(1))*IZo + IKMc_OLD

! Put current injections into the EMTDC main program using CCIN
      CCIN(NT_28(1), SS(1)) = CCIN(NT_28(1), SS(1)) + NEW_CCIN_a2
      CCIN(NT_28(2), SS(1)) = CCIN(NT_28(2), SS(1)) + NEW_CCIN_b2
      CCIN(NT_28(3), SS(1)) = CCIN(NT_28(3), SS(1)) + NEW_CCIN_c2
      CCIN(PCU1_MVBUS(1), SS(1)) = CCIN(PCU1_MVBUS(1), SS(1)) + NEW_CCIN&
     &_a1
      CCIN(PCU1_MVBUS(2), SS(1)) = CCIN(PCU1_MVBUS(2), SS(1)) + NEW_CCIN&
     &_b1
      CCIN(PCU1_MVBUS(3), SS(1)) = CCIN(PCU1_MVBUS(3), SS(1)) + NEW_CCIN&
     &_c1

! Ensure main program records CCIN current injections at these nodes
      IF ( TIMEZERO ) THEN
         ENABCCIN(NT_28(1), SS(1)) = .TRUE.
         ENABCCIN(NT_28(2), SS(1)) = .TRUE.
         ENABCCIN(NT_28(3), SS(1)) = .TRUE.
         ENABCCIN(PCU1_MVBUS(1), SS(1)) = .TRUE.
         ENABCCIN(PCU1_MVBUS(2), SS(1)) = .TRUE.
         ENABCCIN(PCU1_MVBUS(3), SS(1)) = .TRUE.
      ENDIF

         GGIN(NT_28(1),SS(1)) = GGIN(NT_28(1),SS(1)) + IZo
         GGIN(NT_28(2),SS(1)) = GGIN(NT_28(2),SS(1)) + IZo
         GGIN(NT_28(3),SS(1)) = GGIN(NT_28(3),SS(1)) + IZo
         GGIN(PCU1_MVBUS(1),SS(1)) = GGIN(PCU1_MVBUS(1),SS(1)) + IZo + I&
     &Zom
         GGIN(PCU1_MVBUS(2),SS(1)) = GGIN(PCU1_MVBUS(2),SS(1)) + IZo + I&
     &Zom
         GGIN(PCU1_MVBUS(3),SS(1)) = GGIN(PCU1_MVBUS(3),SS(1)) + IZo + I&
     &Zom


! Save current injections for use in the next time step to compute the branch currents
      STORF(NSTORF+0) = VDC(NT_28(1), SS(1))*IZo + IMKa_OLD
      STORF(NSTORF+1) = VDC(NT_28(2), SS(1))*IZo + IMKb_OLD
      STORF(NSTORF+2) = VDC(NT_28(3), SS(1))*IZo + IMKc_OLD
      STORF(NSTORF+3) = VDC(PCU1_MVBUS(1), SS(1))*IZo + IKMa_OLD
      STORF(NSTORF+4) = VDC(PCU1_MVBUS(2), SS(1))*IZo + IKMb_OLD
      STORF(NSTORF+5) = VDC(PCU1_MVBUS(3), SS(1))*IZo + IKMc_OLD
      NSTORF = NSTORF + 6

! 440:[xfmr_2w_scaled] 3 Phase 2 Winding Transformer - With Scaling! 'T1_2'
!  TRANSFORMER SATURATION SUBROUTINE
      IF (TIME.GT.0.1) THEN
         X_KNEE = 1.25
      ELSE
         X_KNEE = -1.25
      ENDIF
      TURNS_V = 33.0
      CALL TSAT21(NT_27(1),NT_28(2), NT_27(2),NT_28(3), NT_27(3),NT_28(1&
     &),SS(1),1.4,TURNS_V,0.2,X_KNEE,50.0,1.0,0.004, 0.0, 0)
!

! 470:[const] Real Constant 
      RT_4 = 1.03

! 480:[DPS_Dummy]  
      CALL DPS_DummyDyn(DPS1_Fb)


! 490:[breaker3] 3 Phase Breaker 'MVBRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+52),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(MVBRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+53),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(MVBRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+54),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(MVBRK)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+52),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+53),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+54),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,943764813,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,943764813,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,943764813,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+52),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+53),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+54),SS(1)))

! 520:[breaker3] 3 Phase Breaker 'POI_BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+25),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(POI_BRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+26),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(POI_BRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+27),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(POI_BRK)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+25),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+26),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+27),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,715073575,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,715073575,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,715073575,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+25),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+26),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+27),SS(1)))

! 540:[consti] Integer Constant 
      No_PCU2 = 40

! 570:[GridSource]  'GridSource_1'
      CALL GridSourceDyn(0, 0.0, 0.0, 220.0, 0.0, 0.0, 0.999776463133, 5&
     &0.0, 3.0, 251.5, 0, 0.0, 0.0, 50.0, 50.0, 51.0, 51.0, 51.5, 51.5, &
     &50.0, 50.0, 0.0, 5.0, 5.5, 1, 10.0, 10.5, 15.0, 15.5, 25.0, 0.0, 0&
     &.0, 0.0, 0, 0, 8, 1.02, 1, 1.02, 0.918, 0.918, 1.02, 1.02, 0.0, 0.&
     &0, 0.0, 0.0, 0.0, 5.0, 5.001, 10.0, 10.001, 15.0, 0.0, 0.0, 0.0, 0&
     &.0, 1, 0, 6, 0.1, 10.0, 0, 0.0, 5.0, 0.0, 1, 0.0, 90.0, 90.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 5.01, 10.0, 10.01, 15.0, 15.01&
     &, 0.0, 0.0, 0.0, 6)


! 580:[xfmr_2w_scaled] 3 Phase 2 Winding Transformer - With Scaling! 'T1_2'




      IZo = 1.0/((0.065*33.0*33.0)/(2.0*4.2*TWO_PI*50.0*DELT))
      Scl1 = REAL(No_PCU2)-1
      IZom = Scl1*IZo

! Recall current injections from the last time step
      OLD_CCIN_a1 = STORF(NSTORF+0)
      OLD_CCIN_b1 = STORF(NSTORF+1)
      OLD_CCIN_c1 = STORF(NSTORF+2)
      OLD_CCIN_a2 = STORF(NSTORF+3)
      OLD_CCIN_b2 = STORF(NSTORF+4)
      OLD_CCIN_c2 = STORF(NSTORF+5)

! Compute the branch currents from the last time step
      IMKa_OLD =  VDC(NT_24(1),SS(1))*IZo - OLD_CCIN_a2
      IMKb_OLD =  VDC(NT_24(2),SS(1))*IZo - OLD_CCIN_b2
      IMKc_OLD =  VDC(NT_24(3),SS(1))*IZo - OLD_CCIN_c2
      IKMa_OLD =  VDC(PCU2_MVBUS(1),SS(1))*IZo - OLD_CCIN_a1
      IKMb_OLD =  VDC(PCU2_MVBUS(2),SS(1))*IZo - OLD_CCIN_b1
      IKMc_OLD =  VDC(PCU2_MVBUS(3),SS(1))*IZo - OLD_CCIN_c1


! Define the new current injections
      NEW_CCIN_a1 = VDC(NT_24(1), SS(1))*IZo + IMKa_OLD + (VDC(NT_24(1),&
     & SS(1))*IZo + IMKa_OLD)*Scl1
      NEW_CCIN_b1 = VDC(NT_24(2), SS(1))*IZo + IMKb_OLD + (VDC(NT_24(2),&
     & SS(1))*IZo + IMKb_OLD)*Scl1
      NEW_CCIN_c1 = VDC(NT_24(3), SS(1))*IZo + IMKc_OLD + (VDC(NT_24(3),&
     & SS(1))*IZo + IMKc_OLD)*Scl1
      NEW_CCIN_a2 = VDC(PCU2_MVBUS(1), SS(1))*IZo + IKMa_OLD
      NEW_CCIN_b2 = VDC(PCU2_MVBUS(2), SS(1))*IZo + IKMb_OLD
      NEW_CCIN_c2 = VDC(PCU2_MVBUS(3), SS(1))*IZo + IKMc_OLD

! Put current injections into the EMTDC main program using CCIN
      CCIN(NT_24(1), SS(1)) = CCIN(NT_24(1), SS(1)) + NEW_CCIN_a2
      CCIN(NT_24(2), SS(1)) = CCIN(NT_24(2), SS(1)) + NEW_CCIN_b2
      CCIN(NT_24(3), SS(1)) = CCIN(NT_24(3), SS(1)) + NEW_CCIN_c2
      CCIN(PCU2_MVBUS(1), SS(1)) = CCIN(PCU2_MVBUS(1), SS(1)) + NEW_CCIN&
     &_a1
      CCIN(PCU2_MVBUS(2), SS(1)) = CCIN(PCU2_MVBUS(2), SS(1)) + NEW_CCIN&
     &_b1
      CCIN(PCU2_MVBUS(3), SS(1)) = CCIN(PCU2_MVBUS(3), SS(1)) + NEW_CCIN&
     &_c1

! Ensure main program records CCIN current injections at these nodes
      IF ( TIMEZERO ) THEN
         ENABCCIN(NT_24(1), SS(1)) = .TRUE.
         ENABCCIN(NT_24(2), SS(1)) = .TRUE.
         ENABCCIN(NT_24(3), SS(1)) = .TRUE.
         ENABCCIN(PCU2_MVBUS(1), SS(1)) = .TRUE.
         ENABCCIN(PCU2_MVBUS(2), SS(1)) = .TRUE.
         ENABCCIN(PCU2_MVBUS(3), SS(1)) = .TRUE.
      ENDIF

         GGIN(NT_24(1),SS(1)) = GGIN(NT_24(1),SS(1)) + IZo
         GGIN(NT_24(2),SS(1)) = GGIN(NT_24(2),SS(1)) + IZo
         GGIN(NT_24(3),SS(1)) = GGIN(NT_24(3),SS(1)) + IZo
         GGIN(PCU2_MVBUS(1),SS(1)) = GGIN(PCU2_MVBUS(1),SS(1)) + IZo + I&
     &Zom
         GGIN(PCU2_MVBUS(2),SS(1)) = GGIN(PCU2_MVBUS(2),SS(1)) + IZo + I&
     &Zom
         GGIN(PCU2_MVBUS(3),SS(1)) = GGIN(PCU2_MVBUS(3),SS(1)) + IZo + I&
     &Zom


! Save current injections for use in the next time step to compute the branch currents
      STORF(NSTORF+0) = VDC(NT_24(1), SS(1))*IZo + IMKa_OLD
      STORF(NSTORF+1) = VDC(NT_24(2), SS(1))*IZo + IMKb_OLD
      STORF(NSTORF+2) = VDC(NT_24(3), SS(1))*IZo + IMKc_OLD
      STORF(NSTORF+3) = VDC(PCU2_MVBUS(1), SS(1))*IZo + IKMa_OLD
      STORF(NSTORF+4) = VDC(PCU2_MVBUS(2), SS(1))*IZo + IKMb_OLD
      STORF(NSTORF+5) = VDC(PCU2_MVBUS(3), SS(1))*IZo + IKMc_OLD
      NSTORF = NSTORF + 6

! 580:[xfmr_2w_scaled] 3 Phase 2 Winding Transformer - With Scaling! 'T1_2'
!  TRANSFORMER SATURATION SUBROUTINE
      IF (TIME.GT.0.1) THEN
         X_KNEE = 1.25
      ELSE
         X_KNEE = -1.25
      ENDIF
      TURNS_V = 33.0
      CALL TSAT21(NT_23(1),NT_24(2), NT_23(2),NT_24(3), NT_23(3),NT_24(1&
     &),SS(1),1.4,TURNS_V,0.2,X_KNEE,50.0,1.0,0.004, 0.0, 0)
!

! 620:[breaker3] 3 Phase Breaker 'PCU2_BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+16),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(PCU2_BRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+17),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(PCU2_BRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+18),0.0001,100000000.0,RTCF(N&
     &RTCF),0,NINT(1.0-REAL(PCU2_BRK)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+16),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+17),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+18),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1701648050,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1701648050,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,1701648050,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+16),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+17),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+18),SS(1)))

! 640:[DPS_Dummy]  
      CALL DPS_DummyDyn(DPS2_Fb)


! 660:[FaultBlock]  'FaultBlock_1'
      CALL FaultBlockDyn(0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0&
     &, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, &
     &0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0,&
     & 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 30.0, 0.43,&
     & 0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 3.0, 1, 1, 5.0, 0.43, 0, 18.0, 3.0, 50.0, 0.0, 0.0, 0.0, &
     &0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)


! 720:[SymmetricalComponentsCalc_1_1]  'SymmetricalComponentsCalc_1_1'
      CALL SymmetricalComponentsCalc_1_1Dyn(Iqneg_PoC, Iqpos_PoC, Iqzero&
     &_PoC, RT_15, RT_16, RT_17, Ic_PoC, Ib_PoC, Ia_PoC, 50.0)


! 730:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcDyn(Vneg_PoC, Vpos_PoC, Vzero_PoC, V&
     &ab_PPC, Vbc_PPC, Vca_PPC, 50.0)


! 740:[div] Divider 
      IF (ABS(RT_40) .LT. 1.0E-100) THEN
         IF (RT_40 .LT. 0.0)  THEN
            RT_38 = -1.0E100 * PLANT_P_HV
         ELSE
            RT_38 =  1.0E100 * PLANT_P_HV
         ENDIF
      ELSE
         RT_38 = PLANT_P_HV / RT_40
      ENDIF

! 750:[div] Divider 
      IF (ABS(RT_36) .LT. 1.0E-100) THEN
         IF (RT_36 .LT. 0.0)  THEN
            RT_35 = -1.0E100 * PLANT_Q_HV
         ELSE
            RT_35 =  1.0E100 * PLANT_Q_HV
         ENDIF
      ELSE
         RT_35 = PLANT_Q_HV / RT_36
      ENDIF

! 760:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcDyn(Ineg_PoC, Ipos_PoC, Izero_PoC, I&
     &c_PoC, Ib_PoC, Ia_PoC, 50.0)


! 770:[setpointProfiles]  'setpointProfiles_1'
      CALL setpointProfilesDyn(PoiWLimSales_pu, PoiPfSpt, PoiVArSpt_pu, &
     &PoiVolSpt_pu, RT_5, RT_6, RT_7, RT_8, RT_9, PCU1_Irr, BessWSpt_pu,&
     & RT_10, RT_11, RT_12, RT_13, RT_14, 0.0, 1.02, 1.02, 1.0, 1.05, 1.&
     &05, 1.02, 1.02, 0.0, 0.0, 0.0, 4.0, 4.001, 2, 10.0, 10.001, 100.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 6, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.&
     &0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.&
     &0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1&
     &.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.&
     &0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0&
     &.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0&
     &.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0,&
     & 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,&
     & 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 1000.0)


! 780:[gain] Gain Block 
!  Gain
      PoiVArSpt = 119000.0 * PoiVArSpt_pu

! 790:[gain] Gain Block 
!  Gain
      PoiWLimSales = 119000.0 * PoiWLimSales_pu

! 800:[logic_mult] Multiple Input Logic Gate 
!
! Multi input AND gate
!
      IF ( (IT_4 .NE. 0) .AND. (IT_5 .NE. 0) ) THEN
        PCU1_BRK = 0
      ELSE
        PCU1_BRK = 1
      ENDIF

! 810:[gain] Gain Block 
!  Gain
      BessWSpt = 119000.0 * BessWSpt_pu

! 820:[compar] Two Input Comparator 
!
      CALL EMTDC_X2COMP(0,0,RT_26,RT_27,1.0,0.0,0.0,RVD2_1)
      inf_BRK = RVD2_1(1)

! 830:[TapCtrl_1]  
      CALL TapCtrl_1Dyn(Tap_position, maintap, PLANT_V_MV, RT_4, 1, 220.&
     &0, 0.0125, 0.64, 8, 8, 10, 0.01, 30.0, 30.0, 30.0, 1.0, 3.0, 3.0, &
     &1)


! 840:[sumjct] Summing/Differencing Junctions 
      PVini = + PoiWLimSales - BessWSpt

! 850:[scale_changer] Scale Changer 
      CALL CONVERT_SCALE1_EXE(1,PoiVArSpt,RT_42)

! 860:[gain] Gain Block 
!  Gain
      PoiVolSpt = 220000.0 * PoiVolSpt_pu

! 870:[datamerge] Merges data signals into an array 
      RT_1(1) = RT_18
      RT_1(2) = RT_20
      RT_1(3) = PoiWLimSales
      RT_1(4) = RT_21
      RT_1(5) = RT_22
      RT_1(6) = RT_23
      RT_1(7) = BessWSpt
      RT_1(8) = PoiVArSpt
      RT_1(9) = PoiPfSpt
      RT_1(10) = PoiVolSpt
      RT_1(11) = RT_19

! 880:[sumjct] Summing/Differencing Junctions 
      RT_41 = + PoiVArSpt + RT_42

! 890:[gain] Gain Block 
!  Gain
      QiniBESS = 0.5 * RT_41

! 900:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledDyn(PCU2_Fb_SI, No_PCU2, PCU2_Fb)


! 910:[select] Two Input Selector 
      IF (PVmode .EQ. RTCI(NRTCI)) THEN
         SC_Fb = PCU1_Fb_SI
      ELSE
         SC_Fb = dummy_fb
      ENDIF
      NRTCI = NRTCI + 1
!

! 920:[DDSRF_PLL_1]  
      CALL DDSRF_PLL_1Dyn(220.0, 50.0, Meas_Plant, Meas_Grid)


! 930:[datatap] Scalar/Array Tap 
      Vrms_abc_POI = Meas_Plant(6 : 8)

! 940:[datatap] Scalar/Array Tap 
      Hz_POI = Meas_Plant(2)

! 950:[datatap] Scalar/Array Tap 
      Vol_POI = Meas_Plant(1)

! 960:[datamerge] Merges data signals into an array 
      Bess_Ms(1) = PCU2_P_MV_AGGR
      Bess_Ms(2) = PCU2_Q_MV_AGGR
      Bess_Ms(3) = PCU2_V_MV
      Bess_Ms(4) = Hz_POI

! 970:[datamerge] Merges data signals into an array 
      Pv_Ms(1) = PCU1_P_MV_AGGR
      Pv_Ms(2) = PCU1_Q_MV_AGGR
      Pv_Ms(3) = PCU1_V_MV
      Pv_Ms(4) = Hz_POI

! 980:[datamerge] Merges data signals into an array 
      Poi_Ms(1) = PLANT_P_HV
      Poi_Ms(2) = PLANT_Q_HV
      Poi_Ms(3) = Vol_POI
      Poi_Ms(4) = Hz_POI
      Poi_Ms(5) = McbStt
      Poi_Ms(6) = GcbStt
      Poi_Ms(7 : 9) = Vrms_abc_POI
      Poi_Ms(10 : 12) = Vrms_abc_POI

! 990:[HyCtl]  'HyCon1'
      CALL HyCtlDyn(RT_1, Poi_Ms, Pv_Ms, RT_2, RT_3, PCU2_Fb_SI, SC_Fb, &
     &Bess_Ms, dummy_fb, DEBUG_HyCon1, dummy_fb, 1, 0, 50.0, 21521, 0.04&
     &, 1.9, BessWSpt, QiniBESS, PVini, QiniBESS)


! 1000:[datatap] Scalar/Array Tap 
      PCU1_Spt = RT_3(1 : 10)

! 1010:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxDyn(PCU1_Spt, PCU1_Fb, 51, 16641, 9, 0, 1700, DPS1_Spt,&
     & DPS1_Fb, DEBUG_PCU1, MEAS_PCU1)


! 1020:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledDyn(PCU1_Fb_SI, No_PCU1, PCU1_Fb)


! 1030:[datatap] Scalar/Array Tap 
      PCU2_Spt = RT_2(1 : 10)

! 1040:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxDyn(PCU2_Spt, PCU2_Fb, 57, 82177, 9, 0, 1500, DPS2_Spt,&
     & DPS2_Fb, DEBUG_PCU2, MEAS_PCU2)


! 1050:[div] Divider 
      IF (ABS(HV_Vol_base) .LT. 1.0E-100) THEN
         IF (HV_Vol_base .LT. 0.0)  THEN
            PLANT_V_HV_pu = -1.0E100 * Vol_POI
         ELSE
            PLANT_V_HV_pu =  1.0E100 * Vol_POI
         ENDIF
      ELSE
         PLANT_V_HV_pu = Vol_POI / HV_Vol_base
      ENDIF

! 1060:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (0.001 .LE. 2.0) THEN
        RT_39 = LIMIT(0.001, 2.0, PLANT_V_HV_pu)
      ELSE
        RT_39 = PLANT_V_HV_pu
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,2095370447,1,"Lower limit is more tha&
     &n the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1070:[div] Divider 
      IF (ABS(RT_39) .LT. 1.0E-100) THEN
         IF (RT_39 .LT. 0.0)  THEN
            Id_PoC = -1.0E100 * RT_38
         ELSE
            Id_PoC =  1.0E100 * RT_38
         ENDIF
      ELSE
         Id_PoC = RT_38 / RT_39
      ENDIF

! 1080:[square] Square 
      RT_32 = Id_PoC * Id_PoC

! 1090:[hardlimit] Hard Limiter 
!  Hard_Limit
      IF (0.001 .LE. 2.0) THEN
        RT_37 = LIMIT(0.001, 2.0, PLANT_V_HV_pu)
      ELSE
        RT_37 = PLANT_V_HV_pu
        IF (STORL(NSTORL) .EQV. .FALSE.) THEN
          CALL EMTDC_WARN(ICALL_NO,389639178,1,"Lower limit is more than&
     & the upper limit, limits not enforced.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ENDIF
      NSTORL = NSTORL + 1
!

! 1100:[div] Divider 
      IF (ABS(RT_37) .LT. 1.0E-100) THEN
         IF (RT_37 .LT. 0.0)  THEN
            Iq_PoC = -1.0E100 * RT_35
         ELSE
            Iq_PoC =  1.0E100 * RT_35
         ENDIF
      ELSE
         Iq_PoC = RT_35 / RT_37
      ENDIF

! 1110:[square] Square 
      RT_33 = Iq_PoC * Iq_PoC

! 1120:[sumjct] Summing/Differencing Junctions 
      RT_34 = + RT_32 + RT_33

! 1130:[datatap] Scalar/Array Tap 
      RT_31 = PCU2_Fb(6)

! 1140:[sqrt] Square Root 
      LVD1_1 = STORL(NSTORL)
      IF (RT_34 .LT. 0.0) THEN
        Itot_PoC = 0.0
        IF (.NOT. LVD1_1) THEN
          CALL EMTDC_MESSAGE(ICALL_NO,726772474,1,2,"A negative value is&
     & detected as an input to the Square Root function. ")
          CALL EMTDC_MESSAGE(ICALL_NO,726772474,1,-1,"Input is treated a&
     &s 0.0.")
          STORL(NSTORL) = .TRUE.
        ENDIF
      ELSE
         Itot_PoC = SQRT(RT_34)
      ENDIF
      NSTORL = NSTORL + 1

! 1150:[datatap] Scalar/Array Tap 
      RT_29 = PCU1_Fb(6)

! 1160:[datatap] Scalar/Array Tap 
      RT_30 = PCU2_Fb(5)

! 1170:[datatap] Scalar/Array Tap 
      RT_28 = PCU1_Fb(5)

! 1180:[datatap] Scalar/Array Tap 
      FRT_flag_POC = DEBUG_HyCon1(18)

! 1190:[datatap] Scalar/Array Tap 
      FRT_flag_BESS = DEBUG_PCU2(1)

! 1200:[datatap] Scalar/Array Tap 
      FRT_flag_PV = DEBUG_PCU1(1)

! 1210:[gain] Gain Block 
!  Gain
      BESSspt_MW = 119.0 * BessWSpt_pu

! 1220:[gain] Gain Block 
!  Gain
      Qspt_MVAr = 119.0 * PoiVArSpt_pu

! 1230:[gain] Gain Block 
!  Gain
      Pspt_MW = 119.0 * PoiWLimSales_pu

! 1240:[div] Divider 
      IF (ABS(Iqpos_PoC) .LT. 1.0E-100) THEN
         IF (Iqpos_PoC .LT. 0.0)  THEN
            Iq_neg_pos_ratio = -1.0E100 * Iqneg_PoC
         ELSE
            Iq_neg_pos_ratio =  1.0E100 * Iqneg_PoC
         ENDIF
      ELSE
         Iq_neg_pos_ratio = Iqneg_PoC / Iqpos_PoC
      ENDIF

! 1250:[datatap] Scalar/Array Tap 
      Qcmd_PPC_to_INV_BESS = PCU2_Spt(2)

! 1260:[datatap] Scalar/Array Tap 
      Pcmd_PPC_to_INV_BESS = PCU2_Spt(1)

! 1270:[datatap] Scalar/Array Tap 
      Qcmd_PPC_to_INV_PV = PCU1_Spt(2)

! 1280:[datatap] Scalar/Array Tap 
      Pcmd_PPC_to_INV_PV = PCU1_Spt(1)

! 1300:[breaker3] 3 Phase Breaker 'inf_BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+109),0.0001,100000000.0,RTCF(&
     &NRTCF),0,NINT(1.0-inf_BRK))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+110),0.0001,100000000.0,RTCF(&
     &NRTCF),0,NINT(1.0-inf_BRK))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+111),0.0001,100000000.0,RTCF(&
     &NRTCF),0,NINT(1.0-inf_BRK))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+109),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+110),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+111),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,371043801,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,371043801,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,371043801,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+109),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+110),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+111),SS(1)))

! 1310:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T2'
!  TRANSFORMER SATURATION SUBROUTINE
      IVD1_1 = NEXC
      CALL TSAT1_EXE( (IBRCH(1)+46), (IBRCH(1)+47), (IBRCH(1)+48),SS(1),&
     &maintap,0)
      CALL TRTAP5((IXFMR + 7), 1, SS(1), maintap)
      CALL TRTAP5((IXFMR + 8), 1, SS(1), maintap)
      CALL TRTAP5((IXFMR + 9), 1, SS(1), maintap)

! 1320:[pgb] Output Channel 'Tap_position'

      PGB(IPGB+1) = REAL(Tap_position)

! 1330:[breaker3] 3 Phase Breaker 'PCU1_BRK'
      IVD1_4 = NSTORI
      NSTORI = NSTORI + 3
! Three Phase Breaker
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+7),0.0001,100000000.0,RTCF(NR&
     &TCF),0,NINT(1.0-REAL(PCU1_BRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+8),0.0001,100000000.0,RTCF(NR&
     &TCF),0,NINT(1.0-REAL(PCU1_BRK)))
      CALL EMTDC_BREAKER1(SS(1), (IBRCH(1)+9),0.0001,100000000.0,RTCF(NR&
     &TCF),0,NINT(1.0-REAL(PCU1_BRK)))
!
      IVD1_1 = 2*E_BtoI(OPENBR( (IBRCH(1)+7),SS(1)))
      IVD1_2 = 2*E_BtoI(OPENBR( (IBRCH(1)+8),SS(1)))
      IVD1_3 = 2*E_BtoI(OPENBR( (IBRCH(1)+9),SS(1)))
      NRTCF = NRTCF + 1
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+0) .NE. IVD1_1)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2042303879,IVD1_1,"BOpen1")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+1) .NE. IVD1_2)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2042303879,IVD1_2,"BOpen2")
      ENDIF
      IF (FIRSTSTEP .OR. (STORI(IVD1_4+2) .NE. IVD1_3)) THEN
         CALL PSCAD_AGI2(ICALL_NO,2042303879,IVD1_3,"BOpen3")
      ENDIF
      STORI(IVD1_4+0) = 2*E_BtoI(OPENBR( (IBRCH(1)+7),SS(1)))
      STORI(IVD1_4+1) = 2*E_BtoI(OPENBR( (IBRCH(1)+8),SS(1)))
      STORI(IVD1_4+2) = 2*E_BtoI(OPENBR( (IBRCH(1)+9),SS(1)))

! 1340:[pgb] Output Channel 'maintap'

      PGB(IPGB+2) = maintap

! 1350:[photovoltaic_source] photovoltaic source 'PVarray1'
      CALL COMPONENT_ID(ICALL_NO,1473112425)
      CALL PHOTOVOLT1_EXE(SS(2), (IBRCH(2)+1),PCU1_Irr,RT_24,RVD1_1,RVD1&
     &_2,RVD1_3, RVD1_4)

! 1380:[pgb] Output Channel 'Itot_PoC'

      PGB(IPGB+5) = Itot_PoC

! 1390:[div] Divider 
      IF (ABS(Q_Base_BESS) .LT. 1.0E-100) THEN
         IF (Q_Base_BESS .LT. 0.0)  THEN
            Qout_INV_BESS = -1.0E100 * RT_31
         ELSE
            Qout_INV_BESS =  1.0E100 * RT_31
         ENDIF
      ELSE
         Qout_INV_BESS = RT_31 / Q_Base_BESS
      ENDIF

! 1410:[div] Divider 
      IF (ABS(Q_Base_PV) .LT. 1.0E-100) THEN
         IF (Q_Base_PV .LT. 0.0)  THEN
            Qout_INV_PV = -1.0E100 * RT_29
         ELSE
            Qout_INV_PV =  1.0E100 * RT_29
         ENDIF
      ELSE
         Qout_INV_PV = RT_29 / Q_Base_PV
      ENDIF

! 1420:[div] Divider 
      IF (ABS(P_Base_BESS) .LT. 1.0E-100) THEN
         IF (P_Base_BESS .LT. 0.0)  THEN
            Pout_INV_BESS = -1.0E100 * RT_30
         ELSE
            Pout_INV_BESS =  1.0E100 * RT_30
         ENDIF
      ELSE
         Pout_INV_BESS = RT_30 / P_Base_BESS
      ENDIF

! 1430:[pgb] Output Channel 'Ineg_PoC'

      PGB(IPGB+7) = Ineg_PoC

! 1440:[div] Divider 
      IF (ABS(MV_Vol_base) .LT. 1.0E-100) THEN
         IF (MV_Vol_base .LT. 0.0)  THEN
            PCU2_V_MV_pu = -1.0E100 * PCU2_V_MV
         ELSE
            PCU2_V_MV_pu =  1.0E100 * PCU2_V_MV
         ENDIF
      ELSE
         PCU2_V_MV_pu = PCU2_V_MV / MV_Vol_base
      ENDIF

! 1450:[div] Divider 
      IF (ABS(P_Base_PV) .LT. 1.0E-100) THEN
         IF (P_Base_PV .LT. 0.0)  THEN
            Pout_INV_PV = -1.0E100 * RT_28
         ELSE
            Pout_INV_PV =  1.0E100 * RT_28
         ENDIF
      ELSE
         Pout_INV_PV = RT_28 / P_Base_PV
      ENDIF

! 1460:[div] Divider 
      IF (ABS(MV_Vol_base) .LT. 1.0E-100) THEN
         IF (MV_Vol_base .LT. 0.0)  THEN
            PCU1_V_MV_pu = -1.0E100 * PCU1_V_MV
         ELSE
            PCU1_V_MV_pu =  1.0E100 * PCU1_V_MV
         ENDIF
      ELSE
         PCU1_V_MV_pu = PCU1_V_MV / MV_Vol_base
      ENDIF

! 1470:[pgb] Output Channel 'Ipos_PoC'

      PGB(IPGB+8) = Ipos_PoC

! 1480:[pgb] Output Channel 'Iq_PoC'

      PGB(IPGB+9) = Iq_PoC

! 1490:[pgb] Output Channel 'Izero_PoC'

      PGB(IPGB+10) = Izero_PoC

! 1500:[div] Divider 
      IF (ABS(LV_Vol_base) .LT. 1.0E-100) THEN
         IF (LV_Vol_base .LT. 0.0)  THEN
            PCU2_V_LV_pu = -1.0E100 * PCU2_V_LV
         ELSE
            PCU2_V_LV_pu =  1.0E100 * PCU2_V_LV
         ENDIF
      ELSE
         PCU2_V_LV_pu = PCU2_V_LV / LV_Vol_base
      ENDIF

! 1510:[div] Divider 
      IF (ABS(LV_Vol_base) .LT. 1.0E-100) THEN
         IF (LV_Vol_base .LT. 0.0)  THEN
            PCU1_V_LV_pu = -1.0E100 * PCU1_V_LV
         ELSE
            PCU1_V_LV_pu =  1.0E100 * PCU1_V_LV
         ENDIF
      ELSE
         PCU1_V_LV_pu = PCU1_V_LV / LV_Vol_base
      ENDIF

! 1520:[pgb] Output Channel 'FRT_flag_POC'

      PGB(IPGB+11) = FRT_flag_POC

! 1540:[pgb] Output Channel 'FRT_flag_BESS'

      PGB(IPGB+13) = FRT_flag_BESS

! 1560:[pgb] Output Channel 'FRT_flag_PV'

      PGB(IPGB+15) = FRT_flag_PV

! 1570:[pgb] Output Channel 'Vneg_PoC'

      PGB(IPGB+16) = Vneg_PoC

! 1590:[pgb] Output Channel 'Id_PoC'

      PGB(IPGB+18) = Id_PoC

! 1600:[pgb] Output Channel 'Vpos_PoC'

      PGB(IPGB+19) = Vpos_PoC

! 1610:[pgb] Output Channel 'Qout_INV_BESS'

      PGB(IPGB+20) = Qout_INV_BESS

! 1620:[pgb] Output Channel 'BESSspt_MW'

      PGB(IPGB+21) = BESSspt_MW

! 1640:[pgb] Output Channel 'Vzero_PoC'

      PGB(IPGB+23) = Vzero_PoC

! 1660:[pgb] Output Channel 'Pout_INV_BESS'

      PGB(IPGB+25) = Pout_INV_BESS

! 1670:[pgb] Output Channel 'Qspt_MVAr'

      PGB(IPGB+26) = Qspt_MVAr

! 1700:[pgb] Output Channel 'Qout_INV_PV'

      PGB(IPGB+29) = Qout_INV_PV

! 1710:[DEBUG_HyCon_Scope]  'HyCon1'
      CALL DEBUG_HyCon_ScopeDyn(DEBUG_HyCon1)


! 1720:[pgb] Output Channel 'Pspt_MW'

      PGB(IPGB+30) = Pspt_MW

! 1740:[pgb] Output Channel 'Pout_INV_PV'

      PGB(IPGB+32) = Pout_INV_PV

! 1750:[pgb] Output Channel 'PoiPfSpt'

      PGB(IPGB+33) = PoiPfSpt

! 1770:[pgb] Output Channel 'Iqneg_PoC'

      PGB(IPGB+35) = Iqneg_PoC

! 1790:[pgb] Output Channel 'PoiVolSpt_pu'

      PGB(IPGB+37) = PoiVolSpt_pu

! 1810:[pgb] Output Channel 'Qcmd_PPC_to_INV_BESS'

      PGB(IPGB+39) = Qcmd_PPC_to_INV_BESS

! 1820:[pgb] Output Channel 'Iqpos_PoC'

      PGB(IPGB+40) = Iqpos_PoC

! 1830:[pgb] Output Channel 'Iq_neg_pos_ratio'

      PGB(IPGB+41) = Iq_neg_pos_ratio

! 1860:[pgb] Output Channel 'Hz_POI'

      PGB(IPGB+48) = Hz_POI

! 1870:[pgb] Output Channel 'Pcmd_PPC_to_INV_BESS'

      PGB(IPGB+49) = Pcmd_PPC_to_INV_BESS

! 1880:[pgb] Output Channel 'Iqzero_PoC'

      PGB(IPGB+50) = Iqzero_PoC

! 1890:[pgb] Output Channel 'PCU2_V_MV_pu'

      PGB(IPGB+51) = PCU2_V_MV_pu

! 1910:[pgb] Output Channel 'PCU1_V_MV_pu'

      PGB(IPGB+53) = PCU1_V_MV_pu

! 1920:[pgb] Output Channel 'Qcmd_PPC_to_INV_PV'

      PGB(IPGB+54) = Qcmd_PPC_to_INV_PV

! 1930:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeDyn(DEBUG_PCU2, MEAS_PCU2)


! 1960:[pgb] Output Channel 'Pcmd_PPC_to_INV_PV'

      PGB(IPGB+57) = Pcmd_PPC_to_INV_PV

! 2020:[pgb] Output Channel 'PLANT_V_HV_pu'

      PGB(IPGB+65) = PLANT_V_HV_pu

! 2040:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeDyn(DEBUG_PCU1, MEAS_PCU1)


! 2050:[pgb] Output Channel 'PCU2_V_LV_pu'

      PGB(IPGB+69) = PCU2_V_LV_pu

! 2060:[pgb] Output Channel 'PCU1_V_LV_pu'

      PGB(IPGB+70) = PCU1_V_LV_pu

! 1:[source1] Single Phase Voltage Source Model 1 'Battery'
!  Single Phase Source: Battery
      RVD1_1 = RTCF(NRTCF+12)*SQRT_3*SQRT_1BY2
      RVD1_2 = 0.0
      RVD1_3 = PI_BY2
      CALL ESYS651_EXE(SS(6), (IBRCH(6)+1),0,0,0,0,0,  SS(6),NT_16,0,0,0&
     &,  RVD1_2, RVD1_1, 0.05,  1.0, 1.0, 1.0,RVD1_3,  1.0, 1.0, 1.0,  1&
     &.0, 1.0, 1.0,  RVD1_4, RVD1_5, RVD1_6, RVD1_7)

!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 1) = No_PCU1
      STOI(ISTOI + 2) = Tap_position
      STOF(ISTOF + 122) = maintap
      STOF(ISTOF + 123) = RT_4
      STOF(ISTOF + 124) = PoiVArSpt_pu
      STOF(ISTOF + 125) = RT_5
      STOF(ISTOF + 126) = RT_6
      STOF(ISTOF + 127) = RT_7
      STOF(ISTOF + 128) = RT_8
      STOF(ISTOF + 129) = RT_9
      STOF(ISTOF + 130) = PCU1_Irr
      STOF(ISTOF + 131) = RT_10
      STOF(ISTOF + 132) = RT_11
      STOF(ISTOF + 133) = RT_12
      STOF(ISTOF + 134) = RT_13
      STOF(ISTOF + 135) = RT_14
      STOF(ISTOF + 170) = Iqzero_PoC
      STOF(ISTOF + 171) = RT_15
      STOF(ISTOF + 172) = RT_16
      STOF(ISTOF + 173) = RT_17
      STOF(ISTOF + 174) = Vneg_PoC
      STOF(ISTOF + 175) = Vpos_PoC
      STOF(ISTOF + 176) = Vzero_PoC
      STOF(ISTOF + 177) = Vab_PPC
      STOF(ISTOF + 178) = Vbc_PPC
      STOF(ISTOF + 179) = Vca_PPC
      STOF(ISTOF + 180) = Ineg_PoC
      STOF(ISTOF + 181) = Ipos_PoC
      STOF(ISTOF + 182) = Izero_PoC
      STOF(ISTOF + 183) = PCU1_P_LV
      STOF(ISTOF + 184) = PCU1_Q_LV
      STOF(ISTOF + 188) = PCU1_V_LV_pu
      STOF(ISTOF + 189) = PCU1_Q_MV
      STOF(ISTOF + 190) = PCU1_P_MV
      STOF(ISTOF + 194) = RT_18
      STOF(ISTOF + 195) = RT_19
      STOF(ISTOF + 196) = RT_20
      STOF(ISTOF + 197) = RT_21
      STOF(ISTOF + 198) = RT_22
      STOF(ISTOF + 199) = RT_23
      STOF(ISTOF + 203) = PCU2_P_MV
      STOF(ISTOF + 204) = PCU2_Q_MV
      STOF(ISTOF + 205) = PCU2_Q_LV
      STOF(ISTOF + 206) = PCU2_P_LV
      STOI(ISTOI + 3) = PCU2_BRK
      STOL(ISTOL + 1) = LT_1
      STOI(ISTOI + 4) = POI_BRK
      STOI(ISTOI + 5) = IT_1
      STOI(ISTOI + 6) = IT_2
      STOF(ISTOF + 207) = PCU1_Arms_LV
      STOF(ISTOF + 208) = PCU2_Arms_LV
      STOF(ISTOF + 209) = PCU2_Phs
      STOF(ISTOF + 210) = PCU1_Phs
      STOF(ISTOF + 211) = PLANT_Phs
      STOI(ISTOI + 7) = MVBRK
      STOF(ISTOF + 212) = RT_24
      STOI(ISTOI + 8) = IT_3
      STOF(ISTOF + 213) = MV_Bus_Vol
      STOF(ISTOF + 214) = RT_25
      STOF(ISTOF + 215) = Fsys
      STOI(ISTOI + 9) = No_PCU2
      STOI(ISTOI + 10) = IT_4
      STOI(ISTOI + 11) = PCU1_BRK
      STOI(ISTOI + 12) = IT_5
      STOI(ISTOI + 13) = IT_6
      STOI(ISTOI + 14) = PVmode
      STOF(ISTOF + 246) = PoiVolSpt
      STOF(ISTOF + 247) = PCU1_P_MV_AGGR
      STOF(ISTOF + 248) = PCU1_Q_MV_AGGR
      STOF(ISTOF + 249) = PCU2_P_MV_AGGR
      STOF(ISTOF + 250) = PCU2_Q_MV_AGGR
      STOF(ISTOF + 251) = Qspt_MVAr
      STOF(ISTOF + 252) = PoiPfSpt
      STOF(ISTOF + 253) = Pspt_MW
      STOF(ISTOF + 254) = PoiWLimSales_pu
      STOF(ISTOF + 255) = PCU1_V_LV
      STOF(ISTOF + 256) = PCU1_V_MV_pu
      STOF(ISTOF + 257) = PCU1_V_MV
      STOF(ISTOF + 258) = PCU2_V_MV_pu
      STOF(ISTOF + 259) = PCU2_V_MV
      STOF(ISTOF + 260) = MV_Vol_base
      STOF(ISTOF + 261) = RT_26
      STOF(ISTOF + 262) = RT_27
      STOF(ISTOF + 263) = inf_BRK
      STOF(ISTOF + 264) = Pcmd_PPC_to_INV_PV
      STOF(ISTOF + 265) = Qcmd_PPC_to_INV_PV
      STOF(ISTOF + 266) = Pcmd_PPC_to_INV_BESS
      STOF(ISTOF + 267) = Qcmd_PPC_to_INV_BESS
      STOF(ISTOF + 268) = Pout_INV_PV
      STOF(ISTOF + 269) = RT_28
      STOF(ISTOF + 270) = P_Base_PV
      STOF(ISTOF + 271) = Qout_INV_PV
      STOF(ISTOF + 272) = RT_29
      STOF(ISTOF + 273) = Pout_INV_BESS
      STOF(ISTOF + 274) = RT_30
      STOF(ISTOF + 275) = P_Base_BESS
      STOF(ISTOF + 276) = Qout_INV_BESS
      STOF(ISTOF + 277) = RT_31
      STOF(ISTOF + 278) = PCU2_V_LV_pu
      STOF(ISTOF + 279) = PCU2_V_LV
      STOF(ISTOF + 280) = LV_Vol_base
      STOF(ISTOF + 284) = HV_Vol_base
      STOF(ISTOF + 285) = BESSspt_MW
      STOF(ISTOF + 286) = BessWSpt_pu
      STOF(ISTOF + 287) = PoiVolSpt_pu
      STOF(ISTOF + 288) = Q_Base_PV
      STOF(ISTOF + 289) = Q_Base_BESS
      STOF(ISTOF + 290) = Iq_neg_pos_ratio
      STOF(ISTOF + 291) = Iqneg_PoC
      STOF(ISTOF + 292) = Iqpos_PoC
      STOF(ISTOF + 293) = Itot_PoC
      STOF(ISTOF + 294) = RT_32
      STOF(ISTOF + 295) = RT_33
      STOF(ISTOF + 296) = RT_34
      STOF(ISTOF + 297) = Iq_PoC
      STOF(ISTOF + 298) = Id_PoC
      STOF(ISTOF + 299) = RT_35
      STOF(ISTOF + 300) = RT_36
      STOF(ISTOF + 301) = RT_37
      STOF(ISTOF + 302) = RT_38
      STOF(ISTOF + 303) = RT_39
      STOF(ISTOF + 304) = RT_40
      STOF(ISTOF + 305) = Ia_PoC
      STOF(ISTOF + 306) = Ib_PoC
      STOF(ISTOF + 307) = Ic_PoC
      STOF(ISTOF + 308) = PLANT_V_HV_pu
      STOF(ISTOF + 309) = PLANT_P_HV
      STOF(ISTOF + 310) = PLANT_Q_HV
      STOF(ISTOF + 311) = Vol_POI
      STOF(ISTOF + 312) = Hz_POI
      STOF(ISTOF + 313) = McbStt
      STOF(ISTOF + 314) = GcbStt
      STOF(ISTOF + 318) = PoiWLimSales
      STOF(ISTOF + 319) = BessWSpt
      STOF(ISTOF + 320) = PVini
      STOF(ISTOF + 321) = FRT_flag_PV
      STOF(ISTOF + 322) = FRT_flag_BESS
      STOF(ISTOF + 323) = FRT_flag_POC
      STOF(ISTOF + 324) = PLANT_Q_MV
      STOF(ISTOF + 325) = PLANT_P_MV
      STOF(ISTOF + 326) = PLANT_V_MV
      STOF(ISTOF + 327) = QiniBESS
      STOF(ISTOF + 328) = RT_41
      STOF(ISTOF + 329) = PoiVArSpt
      STOF(ISTOF + 330) = RT_42
      STOF(ISTOF + 624) = PLANT_V_HV
      STOF(ISTOF + 628) = PLANT_I_MV

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 184 + IT_0) = PCU1_A_LV(IT_0)
         STOF(ISTOF + 190 + IT_0) = PCU1_A_MV(IT_0)
         STOF(ISTOF + 199 + IT_0) = PCU2_A_MV(IT_0)
         STOF(ISTOF + 280 + IT_0) = PCU2_A_LV(IT_0)
         STOF(ISTOF + 314 + IT_0) = Vrms_abc_POI(IT_0)
         STOF(ISTOF + 360 + IT_0) = V_ph(IT_0)
         STOF(ISTOF + 624 + IT_0) = Amp_MV(IT_0)
      END DO

! Array (1:4) quantities...
      DO IT_0 = 1,4
         STOF(ISTOF + 43 + IT_0) = Pv_Ms(IT_0)
         STOF(ISTOF + 97 + IT_0) = Bess_Ms(IT_0)
      END DO

! Array (1:5) quantities...
      DO IT_0 = 1,5
         STOF(ISTOF + 0 + IT_0) = DPS1_Spt(IT_0)
         STOF(ISTOF + 5 + IT_0) = DPS2_Spt(IT_0)
      END DO

! Array (1:10) quantities...
      DO IT_0 = 1,10
         STOF(ISTOF + 10 + IT_0) = Meas_Grid(IT_0)
         STOF(ISTOF + 87 + IT_0) = PCU2_Fb_SI(IT_0)
         STOF(ISTOF + 101 + IT_0) = DPS2_Fb(IT_0)
         STOF(ISTOF + 111 + IT_0) = DPS1_Fb(IT_0)
         STOF(ISTOF + 215 + IT_0) = PCU1_Fb_SI(IT_0)
         STOF(ISTOF + 225 + IT_0) = dummy_fb(IT_0)
         STOF(ISTOF + 235 + IT_0) = SC_Fb(IT_0)
         STOF(ISTOF + 330 + IT_0) = Meas_Plant(IT_0)
         STOF(ISTOF + 340 + IT_0) = PCU1_Fb(IT_0)
         STOF(ISTOF + 350 + IT_0) = PCU2_Fb(IT_0)
         STOF(ISTOF + 363 + IT_0) = PCU1_Spt(IT_0)
         STOF(ISTOF + 373 + IT_0) = PCU2_Spt(IT_0)
      END DO

! Array (1:11) quantities...
      DO IT_0 = 1,11
         STOF(ISTOF + 20 + IT_0) = RT_1(IT_0)
      END DO

! Array (1:12) quantities...
      DO IT_0 = 1,12
         STOF(ISTOF + 31 + IT_0) = Poi_Ms(IT_0)
      END DO

! Array (1:17) quantities...
      DO IT_0 = 1,17
         STOF(ISTOF + 135 + IT_0) = MEAS_PCU1(IT_0)
         STOF(ISTOF + 152 + IT_0) = MEAS_PCU2(IT_0)
      END DO

! Array (1:20) quantities...
      DO IT_0 = 1,20
         STOF(ISTOF + 47 + IT_0) = RT_2(IT_0)
         STOF(ISTOF + 67 + IT_0) = RT_3(IT_0)
      END DO

! Array (1:40) quantities...
      DO IT_0 = 1,40
         STOF(ISTOF + 583 + IT_0) = DEBUG_HyCon1(IT_0)
      END DO

! Array (1:100) quantities...
      DO IT_0 = 1,100
         STOF(ISTOF + 383 + IT_0) = DEBUG_PCU1(IT_0)
         STOF(ISTOF + 483 + IT_0) = DEBUG_PCU2(IT_0)
      END DO


!---------------------------------------
! Transfer to Exports
!---------------------------------------

!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 'emtstor.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's2.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'fnames.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'matlab.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    InvFbDummyOut  ! 
      REAL    P3PH3         ! 
      REAL    Q3PH3         ! 
!     SUBR    DGTL_RMS3     ! '3 Phase Digital RMS Meter'
!     SUBR    DGTL_RMS3A    ! '3 Phase Digital RMS Meter'
      REAL    EMTDC_VVDC    ! 
!     SUBR    MPHASE3PS     ! Phase Measurement in a 3p signal
!     SUBR    DPS_DummyOut  ! 
      REAL    VBRANCH       ! 
!     SUBR    GridSourceOut  ! 
!     SUBR    FaultBlockOut  ! 
!     SUBR    SymmetricalComponentsCalc_1_1Out  ! 
!     SUBR    SymmetricalComponentsCalcOut  ! 
!     SUBR    setpointProfilesOut  ! 
!     SUBR    TapCtrl_1Out  ! 
!     SUBR    Aggr_Fb_ScaledOut  ! 
!     SUBR    DDSRF_PLL_1Out  ! 
!     SUBR    HyCtlOut      ! 
!     SUBR    SCxxxxOut     ! SMA  SC xxxx
!     SUBR    DEBUG_HyCon_ScopeOut  ! 
!     SUBR    SC_ScopeOut   ! Scopes for monitoring

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Electrical Node Indices
      INTEGER  PCU1_LVBUS(3), PLANT_HVBUS(3)
      INTEGER  PCU2_MVBUS(3), PCU2_LVBUS(3)
      INTEGER  PCU1_MVBUS(3), NT_14(3), NT_21(3)
      INTEGER  NT_31(3), NT_33(3), NT_34, NT_35
      INTEGER  NT_36

! Control Signals
      INTEGER  No_PCU1, PCU2_BRK, POI_BRK, MVBRK
      INTEGER  IT_3, No_PCU2, IT_6
      REAL     RT_4, RT_12, RT_14, RT_15, RT_16
      REAL     RT_17, Vab_PPC, Vbc_PPC, Vca_PPC
      REAL     PCU1_P_LV, PCU1_Q_LV, PCU1_A_LV(3)
      REAL     PCU1_Q_MV, PCU1_P_MV, PCU1_A_MV(3)
      REAL     RT_18, RT_19, RT_20, RT_21, RT_22
      REAL     RT_23, PCU2_A_MV(3), PCU2_P_MV
      REAL     PCU2_Q_MV, PCU2_Q_LV, PCU2_P_LV
      REAL     PCU1_Arms_LV, PCU2_Arms_LV
      REAL     PCU2_Phs, PCU1_Phs, PLANT_Phs
      REAL     RT_24, MV_Bus_Vol, Fsys
      REAL     PCU1_P_MV_AGGR, PCU1_Q_MV_AGGR
      REAL     PCU2_P_MV_AGGR, PCU2_Q_MV_AGGR
      REAL     PCU1_V_LV, PCU1_V_MV, PCU2_V_MV
      REAL     MV_Vol_base, RT_27, P_Base_PV
      REAL     P_Base_BESS, PCU2_V_LV
      REAL     LV_Vol_base, PCU2_A_LV(3)
      REAL     HV_Vol_base, Q_Base_PV
      REAL     Q_Base_BESS, RT_36, RT_40, Ia_PoC
      REAL     Ib_PoC, Ic_PoC, PLANT_P_HV
      REAL     PLANT_Q_HV, GcbStt, PLANT_Q_MV
      REAL     PLANT_P_MV, PLANT_V_MV, V_ph(3)
      REAL     PLANT_V_HV, Amp_MV(3), PLANT_I_MV

! Internal Variables
      INTEGER  IVD1_1
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER ISTOL, ISTOI, ISTOF, ISTOC, IT_0    ! Storage Indices
      INTEGER IPGB                                ! Control/Monitoring
      INTEGER ISUBS, SS(8), IBRCH(8), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------

! Dsdyn <-> Dsout transfer index storage

      NTXFR = NTXFR + 1

      ISTOL = TXFR(NTXFR,1)
      ISTOI = TXFR(NTXFR,2)
      ISTOF = TXFR(NTXFR,3)
      ISTOC = TXFR(NTXFR,4)

! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      IPGB      = NPGB
      NPGB      = NPGB + 70
      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 96
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 8

      DO IT_0 = 1,8
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 113


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 3


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 1


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 0


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0


      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 3


      IBRCH(7)     = NBRCH(SS(7))
      NBRCH(SS(7)) = NBRCH(SS(7)) + 0


      IBRCH(8)     = NBRCH(SS(8))
      NBRCH(SS(8)) = NBRCH(SS(8)) + 0

!---------------------------------------
! Transfers from storage arrays 
!---------------------------------------

      No_PCU1  = STOI(ISTOI + 1)
      RT_4     = STOF(ISTOF + 123)
      RT_12    = STOF(ISTOF + 133)
      RT_14    = STOF(ISTOF + 135)
      RT_15    = STOF(ISTOF + 171)
      RT_16    = STOF(ISTOF + 172)
      RT_17    = STOF(ISTOF + 173)
      Vab_PPC  = STOF(ISTOF + 177)
      Vbc_PPC  = STOF(ISTOF + 178)
      Vca_PPC  = STOF(ISTOF + 179)
      PCU1_P_LV = STOF(ISTOF + 183)
      PCU1_Q_LV = STOF(ISTOF + 184)
      PCU1_Q_MV = STOF(ISTOF + 189)
      PCU1_P_MV = STOF(ISTOF + 190)
      RT_18    = STOF(ISTOF + 194)
      RT_19    = STOF(ISTOF + 195)
      RT_20    = STOF(ISTOF + 196)
      RT_21    = STOF(ISTOF + 197)
      RT_22    = STOF(ISTOF + 198)
      RT_23    = STOF(ISTOF + 199)
      PCU2_P_MV = STOF(ISTOF + 203)
      PCU2_Q_MV = STOF(ISTOF + 204)
      PCU2_Q_LV = STOF(ISTOF + 205)
      PCU2_P_LV = STOF(ISTOF + 206)
      PCU2_BRK = STOI(ISTOI + 3)
      POI_BRK  = STOI(ISTOI + 4)
      PCU1_Arms_LV = STOF(ISTOF + 207)
      PCU2_Arms_LV = STOF(ISTOF + 208)
      PCU2_Phs = STOF(ISTOF + 209)
      PCU1_Phs = STOF(ISTOF + 210)
      PLANT_Phs = STOF(ISTOF + 211)
      MVBRK    = STOI(ISTOI + 7)
      RT_24    = STOF(ISTOF + 212)
      IT_3     = STOI(ISTOI + 8)
      MV_Bus_Vol = STOF(ISTOF + 213)
      Fsys     = STOF(ISTOF + 215)
      No_PCU2  = STOI(ISTOI + 9)
      IT_6     = STOI(ISTOI + 13)
      PCU1_P_MV_AGGR = STOF(ISTOF + 247)
      PCU1_Q_MV_AGGR = STOF(ISTOF + 248)
      PCU2_P_MV_AGGR = STOF(ISTOF + 249)
      PCU2_Q_MV_AGGR = STOF(ISTOF + 250)
      PCU1_V_LV = STOF(ISTOF + 255)
      PCU1_V_MV = STOF(ISTOF + 257)
      PCU2_V_MV = STOF(ISTOF + 259)
      MV_Vol_base = STOF(ISTOF + 260)
      RT_27    = STOF(ISTOF + 262)
      P_Base_PV = STOF(ISTOF + 270)
      P_Base_BESS = STOF(ISTOF + 275)
      PCU2_V_LV = STOF(ISTOF + 279)
      LV_Vol_base = STOF(ISTOF + 280)
      HV_Vol_base = STOF(ISTOF + 284)
      Q_Base_PV = STOF(ISTOF + 288)
      Q_Base_BESS = STOF(ISTOF + 289)
      RT_36    = STOF(ISTOF + 300)
      RT_40    = STOF(ISTOF + 304)
      Ia_PoC   = STOF(ISTOF + 305)
      Ib_PoC   = STOF(ISTOF + 306)
      Ic_PoC   = STOF(ISTOF + 307)
      PLANT_P_HV = STOF(ISTOF + 309)
      PLANT_Q_HV = STOF(ISTOF + 310)
      GcbStt   = STOF(ISTOF + 314)
      PLANT_Q_MV = STOF(ISTOF + 324)
      PLANT_P_MV = STOF(ISTOF + 325)
      PLANT_V_MV = STOF(ISTOF + 326)
      PLANT_V_HV = STOF(ISTOF + 624)
      PLANT_I_MV = STOF(ISTOF + 628)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         PCU1_A_LV(IT_0) = STOF(ISTOF + 184 + IT_0)
         PCU1_A_MV(IT_0) = STOF(ISTOF + 190 + IT_0)
         PCU2_A_MV(IT_0) = STOF(ISTOF + 199 + IT_0)
         PCU2_A_LV(IT_0) = STOF(ISTOF + 280 + IT_0)
         V_ph(IT_0) = STOF(ISTOF + 360 + IT_0)
         Amp_MV(IT_0) = STOF(ISTOF + 624 + IT_0)
      END DO


!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_34 = NODE(INODE + 34)
      NT_35 = NODE(INODE + 35)
      NT_36 = NODE(INODE + 33)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         PCU1_LVBUS(IT_0) = NODE(INODE + 0 + IT_0)
         PLANT_HVBUS(IT_0) = NODE(INODE + 3 + IT_0)
         PCU2_MVBUS(IT_0) = NODE(INODE + 12 + IT_0)
         PCU2_LVBUS(IT_0) = NODE(INODE + 15 + IT_0)
         PCU1_MVBUS(IT_0) = NODE(INODE + 18 + IT_0)
         NT_14(IT_0) = NODE(INODE + 42 + IT_0)
         NT_21(IT_0) = NODE(INODE + 55 + IT_0)
         NT_31(IT_0) = NODE(INODE + 85 + IT_0)
         NT_33(IT_0) = NODE(INODE + 91 + IT_0)
      END DO

!---------------------------------------
! Configuration of Models 
!---------------------------------------

      IF ( TIMEZERO ) THEN
         FILENAME = 'Main.dta'
         CALL EMTDC_OPENFILE
         SECTION = 'DATADSO:'
         CALL EMTDC_GOTOSECTION
      ENDIF
!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'HV Vol base'

      HV_Vol_base = 220.0

! 20:[const] Real Constant 'MV Vol base'

      MV_Vol_base = 33.0

! 30:[const] Real Constant 'Freq base'

      Fsys = 50.0

! 40:[const] Real Constant 'LV Vol base'

      LV_Vol_base = 0.63

! 50:[const] Real Constant 'P_Base_PV'

      P_Base_PV = 4200.0

! 60:[const] Real Constant 'P_Base_BESS'

      P_Base_BESS = 4200.0

! 70:[const] Real Constant 'Q_Base_PV'

      Q_Base_PV = 2520.0

! 80:[const] Real Constant 

      RT_18 = 127947.2

! 90:[const] Real Constant 'Q_Base_BESS'

      Q_Base_BESS = 2520.0

! 100:[const] Real Constant 

      RT_20 = 119000.0

! 110:[consti] Integer Constant 'HV_BRK'

      POI_BRK = 0

! 120:[const] Real Constant 

      RT_21 = -100000.0

! 130:[const] Real Constant 

      RT_22 = 47005.0

! 180:[const] Real Constant 

      RT_23 = -47005.0

! 190:[const] Real Constant 'Gcb'

      GcbStt = 0.0

! 200:[const] Real Constant 

      RT_19 = 50.0

! 210:[InvFbDummy]  
      CALL InvFbDummyOut()


! 220:[const] Real Constant 

      RT_40 = 96.77

! 240:[const] Real Constant 

      RT_36 = 96.77

! 310:[consti] Integer Constant 'PCU1_BRK'

      IT_6 = 0

! 330:[const] Real Constant 

      RT_12 = 0.0

! 350:[consti] Integer Constant 'PCU2_BRK'

      PCU2_BRK = 0

! 360:[const] Real Constant 

      RT_14 = 0.0

! 370:[consti] Integer Constant 'MVBRK'

      MVBRK = 0

! 400:[const] Real Constant 'inf_BRK_time'

      RT_27 = 1000.0

! 410:[consti] Integer Constant 

      No_PCU1 = 36

! 420:[const] Real Constant 

      RT_24 = 25.0

! 430:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      PCU1_A_LV(1) = ( CBR((IBRCH(1)+1), SS(1)))
      PCU1_A_LV(2) = ( CBR((IBRCH(1)+2), SS(1)))
      PCU1_A_LV(3) = ( CBR((IBRCH(1)+3), SS(1)))
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (&
     &IBRCH(1)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1675394643,RVD1_1,"Pd")
      PCU1_P_LV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+1), (IBRCH(1)+2), (&
     &IBRCH(1)+3),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1675394643,RVD1_1,"Qd")
      PCU1_Q_LV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),PCU1_LVBUS(1),PCU1_LVBUS(2),PCU1_LVBUS(3)&
     &,RTCF(IVD1_1+3),1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1675394643,RVD1_1,"Vd")
      PCU1_V_LV = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+1), SS(1))),( CBR((IBRCH(1)+2)&
     &, SS(1))),( CBR((IBRCH(1)+3), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_1+4&
     &),0.0,RVD1_1)
      PCU1_Arms_LV = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(1), PCU1_LVBUS(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), PCU1_LVBUS(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), PCU1_LVBUS(3), 0)
      CALL MPHASE3PS(1, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      PCU1_Phs = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1675394643,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1675394643,1,"hide2")
      ENDIF

! 450:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+91), (IBRCH(1)+92),&
     & (IBRCH(1)+93),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1251734031,RVD1_1,"Pd")
      PCU1_P_MV_AGGR = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+91), (IBRCH(1)+92),&
     & (IBRCH(1)+93),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1251734031,RVD1_1,"Qd")
      PCU1_Q_MV_AGGR = RVD1_1
      CALL DGTL_RMS3(256,SS(1),PCU1_MVBUS(1),PCU1_MVBUS(2),PCU1_MVBUS(3)&
     &,RTCF(IVD1_1+3),1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1251734031,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1251734031,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1251734031,1,"hide2")
      ENDIF

! 460:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      PCU1_A_MV(1) = ( CBR((IBRCH(1)+10), SS(1)))
      PCU1_A_MV(2) = ( CBR((IBRCH(1)+11), SS(1)))
      PCU1_A_MV(3) = ( CBR((IBRCH(1)+12), SS(1)))
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,954405753,RVD1_1,"Pd")
      PCU1_P_MV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+10), (IBRCH(1)+11),&
     & (IBRCH(1)+12),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,954405753,RVD1_1,"Qd")
      PCU1_Q_MV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_31(1),NT_31(2),NT_31(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,954405753,RVD1_1,"Vd")
      PCU1_V_MV = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,954405753,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,954405753,1,"hide2")
      ENDIF

! 470:[const] Real Constant 

      RT_4 = 1.03

! 480:[DPS_Dummy]  
      CALL DPS_DummyOut()


! 490:[breaker3] 3 Phase Breaker 'MVBRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+52), (IBRCH(1)+53), (IBRCH(1)+54),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 500:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      Amp_MV(1) = ( CBR((IBRCH(1)+49), SS(1)))
      Amp_MV(2) = ( CBR((IBRCH(1)+50), SS(1)))
      Amp_MV(3) = ( CBR((IBRCH(1)+51), SS(1)))
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+49), (IBRCH(1)+50),&
     & (IBRCH(1)+51),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,122835826,RVD1_1,"Pd")
      PLANT_P_MV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+49), (IBRCH(1)+50),&
     & (IBRCH(1)+51),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,122835826,RVD1_1,"Qd")
      PLANT_Q_MV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_21(1),NT_21(2),NT_21(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,122835826,RVD1_1,"Vd")
      PLANT_V_MV = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+49), SS(1))),( CBR((IBRCH(1)+5&
     &0), SS(1))),( CBR((IBRCH(1)+51), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      PLANT_I_MV = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,122835826,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,122835826,1,"hide2")
      ENDIF

! 510:[ammeter] Current Meter 'Ia_Poc'
      Ia_PoC = ( CBR((IBRCH(1)+39), SS(1)))

! 520:[breaker3] 3 Phase Breaker 'POI_BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+25), (IBRCH(1)+26), (IBRCH(1)+27),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 530:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      V_ph(1) = EMTDC_VVDC(SS(1), NT_14(1), 0)
      V_ph(2) = EMTDC_VVDC(SS(1), NT_14(2), 0)
      V_ph(3) = EMTDC_VVDC(SS(1), NT_14(3), 0)
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (&
     &IBRCH(1)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1543620566,RVD1_1,"Pd")
      PLANT_P_HV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+4), (IBRCH(1)+5), (&
     &IBRCH(1)+6),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1543620566,RVD1_1,"Qd")
      PLANT_Q_HV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_14(1),NT_14(2),NT_14(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,1543620566,RVD1_1,"Vd")
      PLANT_V_HV = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+4), SS(1))),( CBR((IBRCH(1)+5)&
     &, SS(1))),( CBR((IBRCH(1)+6), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_1+4&
     &),0.0,RVD1_1)
      RVD1_2 = EMTDC_VVDC(SS(1), NT_14(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), NT_14(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), NT_14(3), 0)
      CALL MPHASE3PS(1, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      PLANT_Phs = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,1543620566,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,1543620566,1,"hide2")
      ENDIF

! 540:[consti] Integer Constant 

      No_PCU2 = 40

! 550:[ammeter] Current Meter 'Ib_PoC'
      Ib_PoC = ( CBR((IBRCH(1)+38), SS(1)))

! 560:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      PCU2_A_LV(1) = ( CBR((IBRCH(1)+22), SS(1)))
      PCU2_A_LV(2) = ( CBR((IBRCH(1)+23), SS(1)))
      PCU2_A_LV(3) = ( CBR((IBRCH(1)+24), SS(1)))
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+22), (IBRCH(1)+23),&
     & (IBRCH(1)+24),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,469044665,RVD1_1,"Pd")
      PCU2_P_LV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+22), (IBRCH(1)+23),&
     & (IBRCH(1)+24),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,469044665,RVD1_1,"Qd")
      PCU2_Q_LV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),PCU2_LVBUS(1),PCU2_LVBUS(2),PCU2_LVBUS(3)&
     &,RTCF(IVD1_1+3),1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,469044665,RVD1_1,"Vd")
      PCU2_V_LV = RVD1_1
      CALL DGTL_RMS3A(256,( CBR((IBRCH(1)+22), SS(1))),( CBR((IBRCH(1)+2&
     &3), SS(1))),( CBR((IBRCH(1)+24), SS(1))),RTCF(IVD1_1+3),RTCF(IVD1_&
     &1+4),0.0,RVD1_1)
      PCU2_Arms_LV = RVD1_1
      RVD1_2 = EMTDC_VVDC(SS(1), PCU2_LVBUS(1), 0)
      RVD1_3 = EMTDC_VVDC(SS(1), PCU2_LVBUS(2), 0)
      RVD1_4 = EMTDC_VVDC(SS(1), PCU2_LVBUS(3), 0)
      CALL MPHASE3PS(1, 1, RVD1_2, RVD1_3, RVD1_4, RTCF(IVD1_1+2), RTCF(&
     &IVD1_1+3) , RVD1_1)
      PCU2_Phs = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,469044665,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,469044665,1,"hide2")
      ENDIF

! 570:[GridSource]  'GridSource_1'
      CALL GridSourceOut()


! 590:[ammeter] Current Meter 'Ic_PoC'
      Ic_PoC = ( CBR((IBRCH(1)+37), SS(1)))

! 600:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+94), (IBRCH(1)+95),&
     & (IBRCH(1)+96),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,306794587,RVD1_1,"Pd")
      PCU2_P_MV_AGGR = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+94), (IBRCH(1)+95),&
     & (IBRCH(1)+96),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,306794587,RVD1_1,"Qd")
      PCU2_Q_MV_AGGR = RVD1_1
      CALL DGTL_RMS3(256,SS(1),PCU2_MVBUS(1),PCU2_MVBUS(2),PCU2_MVBUS(3)&
     &,RTCF(IVD1_1+3),1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,306794587,RVD1_1,"Vd")
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,306794587,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,306794587,1,"hide2")
      ENDIF

! 610:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      PCU2_A_MV(1) = ( CBR((IBRCH(1)+13), SS(1)))
      PCU2_A_MV(2) = ( CBR((IBRCH(1)+14), SS(1)))
      PCU2_A_MV(3) = ( CBR((IBRCH(1)+15), SS(1)))
      RVD1_1 = RTCF(IVD1_1) * P3PH3(SS(1), (IBRCH(1)+13), (IBRCH(1)+14),&
     & (IBRCH(1)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,71743599,RVD1_1,"Pd")
      PCU2_P_MV = RVD1_1
      RVD1_1 = RTCF(IVD1_1) * Q3PH3(SS(1), (IBRCH(1)+13), (IBRCH(1)+14),&
     & (IBRCH(1)+15),RTCF(IVD1_1+2),0)
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,71743599,RVD1_1,"Qd")
      PCU2_Q_MV = RVD1_1
      CALL DGTL_RMS3(256,SS(1),NT_33(1),NT_33(2),NT_33(3),RTCF(IVD1_1+3)&
     &,1.0,0.0,RVD1_1)
      RVD1_1 = RTCF(IVD1_1+1)*RVD1_1
      IF (UPDATE_AG) CALL PSCAD_AGR2(ICALL_NO,71743599,RVD1_1,"Vd")
      PCU2_V_MV = RVD1_1
      IF (FIRSTSTEP) THEN
        CALL PSCAD_AGI2(ICALL_NO,71743599,1,"hide1")
        CALL PSCAD_AGI2(ICALL_NO,71743599,1,"hide2")
      ENDIF

! 620:[breaker3] 3 Phase Breaker 'PCU2_BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+16), (IBRCH(1)+17), (IBRCH(1)+18),&
     &0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 640:[DPS_Dummy]  
      CALL DPS_DummyOut()


! 650:[voltmeter] Voltmeter (Line - Line) 'Vab_PPC'
      Vab_PPC = EMTDC_VVDC(SS(1), NT_36, NT_34)

! 660:[FaultBlock]  'FaultBlock_1'
      CALL FaultBlockOut()


! 670:[voltmeter] Voltmeter (Line - Line) 'Vbc_PPC'
      Vbc_PPC = EMTDC_VVDC(SS(1), NT_34, NT_35)

! 680:[voltmeter] Voltmeter (Line - Line) 'Vca_PPC'
      Vca_PPC = EMTDC_VVDC(SS(1), NT_35, NT_36)

! 690:[datatap] Scalar/Array Tap 
      RT_17 = V_ph(1)

! 700:[datatap] Scalar/Array Tap 
      RT_16 = V_ph(2)

! 710:[datatap] Scalar/Array Tap 
      RT_15 = V_ph(3)

! 720:[SymmetricalComponentsCalc_1_1]  'SymmetricalComponentsCalc_1_1'
      CALL SymmetricalComponentsCalc_1_1Out()


! 730:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcOut()


! 760:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcOut()


! 770:[setpointProfiles]  'setpointProfiles_1'
      CALL setpointProfilesOut()


! 830:[TapCtrl_1]  
      CALL TapCtrl_1Out()


! 900:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledOut()


! 920:[DDSRF_PLL_1]  
      CALL DDSRF_PLL_1Out()


! 990:[HyCtl]  'HyCon1'
      CALL HyCtlOut()


! 1010:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxOut()


! 1020:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledOut()


! 1040:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxOut()


! 1290:[rms3ph] Three Phase RMS Meter 
      RVD1_1 = RTCF(NRTCF) ! Inverse of rated voltage
      RVD1_2 = RTCF(NRTCF+1) ! Frequency
      RVD1_3 = RTCF(NRTCF+2) ! Initial value
      NRTCF = NRTCF + 3
      CALL DGTL_RMS3(64,SS(1),PLANT_HVBUS(1),PLANT_HVBUS(2),PLANT_HVBUS(&
     &3),RVD1_2,RVD1_1,RVD1_3,MV_Bus_Vol)
!

! 1300:[breaker3] 3 Phase Breaker 'inf_BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+109), (IBRCH(1)+110), (IBRCH(1)+11&
     &1),0,0,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1330:[breaker3] 3 Phase Breaker 'PCU1_BRK'
! Three Phase Breaker Currents
      CALL BRK_POWER(SS(1), (IBRCH(1)+7), (IBRCH(1)+8), (IBRCH(1)+9),0,0&
     &,0,IVD1_1,0.02,RVD1_1,RVD1_2)

! 1350:[photovoltaic_source] photovoltaic source 'PVarray1'
      NRTCF = NRTCF + 1

! 1360:[pgb] Output Channel 'Ic_PoC'

      PGB(IPGB+3) = Ic_PoC

! 1370:[pgb] Output Channel 'Ib_PoC'

      PGB(IPGB+4) = Ib_PoC

! 1400:[pgb] Output Channel 'Ia_PoC'

      PGB(IPGB+6) = Ia_PoC

! 1530:[pgb] Output Channel 'PLANT_Q_MV'

      PGB(IPGB+12) = PLANT_Q_MV

! 1550:[pgb] Output Channel 'PLANT_P_MV'

      PGB(IPGB+14) = PLANT_P_MV

! 1580:[pgb] Output Channel 'PLANT_V_MV'

      PGB(IPGB+17) = PLANT_V_MV

! 1630:[pgb] Output Channel 'PCU2_Phs'

      PGB(IPGB+22) = PCU2_Phs

! 1650:[pgb] Output Channel 'PCU1_Phs'

      PGB(IPGB+24) = PCU1_Phs

! 1680:[pgb] Output Channel 'PCU2_Arms_LV'

      PGB(IPGB+27) = PCU2_Arms_LV

! 1690:[pgb] Output Channel 'PCU1_Arms_LV'

      PGB(IPGB+28) = PCU1_Arms_LV

! 1710:[DEBUG_HyCon_Scope]  'HyCon1'
      CALL DEBUG_HyCon_ScopeOut()


! 1730:[pgb] Output Channel 'PCU2_Q_MV'

      PGB(IPGB+31) = PCU2_Q_MV

! 1760:[pgb] Output Channel 'PCU1_Q_MV'

      PGB(IPGB+34) = PCU1_Q_MV

! 1780:[pgb] Output Channel 'PCU2_P_MV'

      PGB(IPGB+36) = PCU2_P_MV

! 1800:[pgb] Output Channel 'PCU1_P_MV'

      PGB(IPGB+38) = PCU1_P_MV

! 1840:[pgb] Output Channel 'PCU2_A_MV'

      DO IVD1_1 = 1, 3
         PGB(IPGB+42+IVD1_1-1) = 1000.0 * PCU2_A_MV(IVD1_1)
      ENDDO

! 1850:[pgb] Output Channel 'PCU1_A_MV'

      DO IVD1_1 = 1, 3
         PGB(IPGB+45+IVD1_1-1) = 1000.0 * PCU1_A_MV(IVD1_1)
      ENDDO

! 1900:[pgb] Output Channel 'PLANT_Phs'

      PGB(IPGB+52) = PLANT_Phs

! 1930:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeOut()


! 1940:[pgb] Output Channel 'PCU2_Q_LV'

      PGB(IPGB+55) = PCU2_Q_LV

! 1950:[pgb] Output Channel 'PLANT_Q_HV'

      PGB(IPGB+56) = PLANT_Q_HV

! 1970:[pgb] Output Channel 'PCU1_Q_LV'

      PGB(IPGB+58) = PCU1_Q_LV

! 1980:[pgb] Output Channel 'PCU2_P_LV'

      PGB(IPGB+59) = PCU2_P_LV

! 1990:[pgb] Output Channel 'PLANT_P_HV'

      PGB(IPGB+60) = PLANT_P_HV

! 2000:[pgb] Output Channel 'PCU1_P_LV'

      PGB(IPGB+61) = PCU1_P_LV

! 2010:[pgb] Output Channel 'PCU2_A_LV'

      DO IVD1_1 = 1, 3
         PGB(IPGB+62+IVD1_1-1) = PCU2_A_LV(IVD1_1)
      ENDDO

! 2030:[pgb] Output Channel 'PCU1_A_LV'

      DO IVD1_1 = 1, 3
         PGB(IPGB+66+IVD1_1-1) = PCU1_A_LV(IVD1_1)
      ENDDO

! 2040:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeOut()


!---------------------------------------
! Feedbacks and transfers to storage 
!---------------------------------------

      STOI(ISTOI + 1) = No_PCU1
      STOF(ISTOF + 123) = RT_4
      STOF(ISTOF + 133) = RT_12
      STOF(ISTOF + 135) = RT_14
      STOF(ISTOF + 171) = RT_15
      STOF(ISTOF + 172) = RT_16
      STOF(ISTOF + 173) = RT_17
      STOF(ISTOF + 177) = Vab_PPC
      STOF(ISTOF + 178) = Vbc_PPC
      STOF(ISTOF + 179) = Vca_PPC
      STOF(ISTOF + 183) = PCU1_P_LV
      STOF(ISTOF + 184) = PCU1_Q_LV
      STOF(ISTOF + 189) = PCU1_Q_MV
      STOF(ISTOF + 190) = PCU1_P_MV
      STOF(ISTOF + 194) = RT_18
      STOF(ISTOF + 195) = RT_19
      STOF(ISTOF + 196) = RT_20
      STOF(ISTOF + 197) = RT_21
      STOF(ISTOF + 198) = RT_22
      STOF(ISTOF + 199) = RT_23
      STOF(ISTOF + 203) = PCU2_P_MV
      STOF(ISTOF + 204) = PCU2_Q_MV
      STOF(ISTOF + 205) = PCU2_Q_LV
      STOF(ISTOF + 206) = PCU2_P_LV
      STOI(ISTOI + 3) = PCU2_BRK
      STOI(ISTOI + 4) = POI_BRK
      STOF(ISTOF + 207) = PCU1_Arms_LV
      STOF(ISTOF + 208) = PCU2_Arms_LV
      STOF(ISTOF + 209) = PCU2_Phs
      STOF(ISTOF + 210) = PCU1_Phs
      STOF(ISTOF + 211) = PLANT_Phs
      STOI(ISTOI + 7) = MVBRK
      STOF(ISTOF + 212) = RT_24
      STOI(ISTOI + 8) = IT_3
      STOF(ISTOF + 213) = MV_Bus_Vol
      STOF(ISTOF + 215) = Fsys
      STOI(ISTOI + 9) = No_PCU2
      STOI(ISTOI + 13) = IT_6
      STOF(ISTOF + 247) = PCU1_P_MV_AGGR
      STOF(ISTOF + 248) = PCU1_Q_MV_AGGR
      STOF(ISTOF + 249) = PCU2_P_MV_AGGR
      STOF(ISTOF + 250) = PCU2_Q_MV_AGGR
      STOF(ISTOF + 255) = PCU1_V_LV
      STOF(ISTOF + 257) = PCU1_V_MV
      STOF(ISTOF + 259) = PCU2_V_MV
      STOF(ISTOF + 260) = MV_Vol_base
      STOF(ISTOF + 262) = RT_27
      STOF(ISTOF + 270) = P_Base_PV
      STOF(ISTOF + 275) = P_Base_BESS
      STOF(ISTOF + 279) = PCU2_V_LV
      STOF(ISTOF + 280) = LV_Vol_base
      STOF(ISTOF + 284) = HV_Vol_base
      STOF(ISTOF + 288) = Q_Base_PV
      STOF(ISTOF + 289) = Q_Base_BESS
      STOF(ISTOF + 300) = RT_36
      STOF(ISTOF + 304) = RT_40
      STOF(ISTOF + 305) = Ia_PoC
      STOF(ISTOF + 306) = Ib_PoC
      STOF(ISTOF + 307) = Ic_PoC
      STOF(ISTOF + 309) = PLANT_P_HV
      STOF(ISTOF + 310) = PLANT_Q_HV
      STOF(ISTOF + 314) = GcbStt
      STOF(ISTOF + 324) = PLANT_Q_MV
      STOF(ISTOF + 325) = PLANT_P_MV
      STOF(ISTOF + 326) = PLANT_V_MV
      STOF(ISTOF + 624) = PLANT_V_HV
      STOF(ISTOF + 628) = PLANT_I_MV

! Array (1:3) quantities...
      DO IT_0 = 1,3
         STOF(ISTOF + 184 + IT_0) = PCU1_A_LV(IT_0)
         STOF(ISTOF + 190 + IT_0) = PCU1_A_MV(IT_0)
         STOF(ISTOF + 199 + IT_0) = PCU2_A_MV(IT_0)
         STOF(ISTOF + 280 + IT_0) = PCU2_A_LV(IT_0)
         STOF(ISTOF + 360 + IT_0) = V_ph(IT_0)
         STOF(ISTOF + 624 + IT_0) = Amp_MV(IT_0)
      END DO


!---------------------------------------
! Close Model Data read 
!---------------------------------------

      IF ( TIMEZERO ) CALL EMTDC_CLOSEFILE
      RETURN
      END

!=======================================================================

      SUBROUTINE MainDyn_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    InvFbDummyDyn_Begin  ! 
!     SUBR    DPS_DummyDyn_Begin  ! 
!     SUBR    GridSourceDyn_Begin  ! 
!     SUBR    FaultBlockDyn_Begin  ! 
!     SUBR    SymmetricalComponentsCalc_1_1Dyn_Begin  ! 
!     SUBR    SymmetricalComponentsCalcDyn_Begin  ! 
!     SUBR    setpointProfilesDyn_Begin  ! 
!     SUBR    TapCtrl_1Dyn_Begin  ! 
!     SUBR    Aggr_Fb_ScaledDyn_Begin  ! 
!     SUBR    DDSRF_PLL_1Dyn_Begin  ! 
!     SUBR    HyCtlDyn_Begin  ! 
!     SUBR    SCxxxxDyn_Begin  ! SMA  SC xxxx
!     SUBR    DEBUG_HyCon_ScopeDyn_Begin  ! 
!     SUBR    SC_ScopeDyn_Begin  ! Scopes for monitoring

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices

! Control Signals
      INTEGER  No_PCU1, PCU2_BRK, POI_BRK, MVBRK
      INTEGER  No_PCU2, IT_6
      REAL     RT_4, RT_12, RT_14, RT_18, RT_19
      REAL     RT_20, RT_21, RT_22, RT_23, RT_24
      REAL     Fsys, MV_Vol_base, RT_27
      REAL     P_Base_PV, P_Base_BESS
      REAL     LV_Vol_base, HV_Vol_base
      REAL     Q_Base_PV, Q_Base_BESS, RT_36
      REAL     RT_40, GcbStt

! Internal Variables
      INTEGER  IVD1_1, IVD1_2, IVD1_3, IVD1_4
      REAL     RVD1_1, RVD1_2, RVD1_3, RVD1_4
      REAL     RVD1_5, RVD1_6

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ICX                                 ! Control/Monitoring
      INTEGER ISUBS, SS(8), IBRCH(8), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      ICX       = NCX
      NCX       = NCX + 7
      INODE     = NNODE + 2
      NNODE     = NNODE + 96
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 8

      DO IT_0 = 1,8
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 113


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 3


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 1


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 0


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0


      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 3


      IBRCH(7)     = NBRCH(SS(7))
      NBRCH(SS(7)) = NBRCH(SS(7)) + 0


      IBRCH(8)     = NBRCH(SS(8))
      NBRCH(SS(8)) = NBRCH(SS(8)) + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------


!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'HV Vol base'
      HV_Vol_base = 220.0

! 20:[const] Real Constant 'MV Vol base'
      MV_Vol_base = 33.0

! 30:[const] Real Constant 'Freq base'
      Fsys = 50.0

! 40:[const] Real Constant 'LV Vol base'
      LV_Vol_base = 0.63

! 50:[const] Real Constant 'P_Base_PV'
      P_Base_PV = 4200.0

! 60:[const] Real Constant 'P_Base_BESS'
      P_Base_BESS = 4200.0

! 70:[const] Real Constant 'Q_Base_PV'
      Q_Base_PV = 2520.0

! 80:[const] Real Constant 
      RT_18 = 127947.2

! 90:[const] Real Constant 'Q_Base_BESS'
      Q_Base_BESS = 2520.0

! 100:[const] Real Constant 
      RT_20 = 119000.0

! 110:[consti] Integer Constant 'HV_BRK'
      POI_BRK = 0

! 120:[const] Real Constant 
      RT_21 = -100000.0

! 130:[const] Real Constant 
      RT_22 = 47005.0

! 140:[unity] Type/Shape conversion block 

! 150:[inv] Interpolated Logic Inverter 

! 160:[bin_delay] Timed ON/OFF Logic Transition 

! 170:[unity] Type/Shape conversion block 

! 180:[const] Real Constant 
      RT_23 = -47005.0

! 190:[const] Real Constant 'Gcb'
      GcbStt = 0.0

! 200:[const] Real Constant 
      RT_19 = 50.0

! 210:[InvFbDummy]  
      CALL InvFbDummyDyn_Begin()


! 220:[const] Real Constant 
      RT_40 = 96.77

! 230:[var] Variable Input Slider 'Vstp_manual'

! 240:[const] Real Constant 
      RT_36 = 96.77

! 250:[var] Variable Input Slider 'Qstp_manual'

! 260:[var_switch] Two State Switch 'PV'

! 270:[unity] Type/Shape conversion block 

! 280:[var] Variable Input Slider 'Pstp_manual'

! 290:[unity] Type/Shape conversion block 

! 300:[var] Variable Input Slider 'PFstp_manual'

! 310:[consti] Integer Constant 'PCU1_BRK'
      IT_6 = 0

! 320:[inv] Interpolated Logic Inverter 

! 330:[const] Real Constant 
      RT_12 = 0.0

! 340:[var] Variable Input Slider 'P1stp_manual'

! 350:[consti] Integer Constant 'PCU2_BRK'
      PCU2_BRK = 0

! 360:[const] Real Constant 
      RT_14 = 0.0

! 370:[consti] Integer Constant 'MVBRK'
      MVBRK = 0

! 380:[var] Variable Input Slider 'Irradiance'

! 390:[time-sig] Output of Simulation Time 

! 400:[const] Real Constant 'inf_BRK_time'
      RT_27 = 1000.0

! 410:[consti] Integer Constant 
      No_PCU1 = 36

! 420:[const] Real Constant 
      RT_24 = 25.0

! 440:[xfmr_2w_scaled] 3 Phase 2 Winding Transformer - With Scaling! 'T1_2'

! 470:[const] Real Constant 
      RT_4 = 1.03

! 480:[DPS_Dummy]  
      CALL DPS_DummyDyn_Begin()


! 490:[breaker3] 3 Phase Breaker 'MVBRK'
      CALL COMPONENT_ID(ICALL_NO,943764813)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 520:[breaker3] 3 Phase Breaker 'POI_BRK'
      CALL COMPONENT_ID(ICALL_NO,715073575)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 540:[consti] Integer Constant 
      No_PCU2 = 40

! 570:[GridSource]  'GridSource_1'
      CALL GridSourceDyn_Begin(0, 0.0, 0.0, 0.0, 0.0, 0.999776463133, 0,&
     & 0.0, 0.0, 50.0, 50.0, 51.0, 51.0, 51.5, 51.5, 50.0, 50.0, 0.0, 5.&
     &0, 5.5, 1, 10.0, 10.5, 15.0, 15.5, 25.0, 0.0, 0.0, 0.0, 0, 0, 8, 1&
     &.02, 1, 1.02, 0.918, 0.918, 1.02, 1.02, 0.0, 0.0, 0.0, 0.0, 0.0, 5&
     &.0, 5.001, 10.0, 10.001, 15.0, 0.0, 0.0, 0.0, 0.0, 1, 0, 6, 0.1, 1&
     &0.0, 0, 0.0, 5.0, 0.0, 1, 0.0, 90.0, 90.0, 0.0, 0.0, 0.0, 0.0, 0.0&
     &, 0.0, 0.0, 5.0, 5.01, 10.0, 10.01, 15.0, 15.01, 0.0, 0.0, 0.0, 6)


! 580:[xfmr_2w_scaled] 3 Phase 2 Winding Transformer - With Scaling! 'T1_2'

! 620:[breaker3] 3 Phase Breaker 'PCU2_BRK'
      CALL COMPONENT_ID(ICALL_NO,1701648050)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 640:[DPS_Dummy]  
      CALL DPS_DummyDyn_Begin()


! 660:[FaultBlock]  'FaultBlock_1'
      CALL FaultBlockDyn_Begin(0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, &
     &0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0,&
     & 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0&
     &, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 30.0,&
     & 0.43, 0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 0.0, 0.0, 3.0, 1, 1, 5.0, 0.43, 0, 18.0, 3.0, 50.0, 0.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)


! 720:[SymmetricalComponentsCalc_1_1]  'SymmetricalComponentsCalc_1_1'
      CALL SymmetricalComponentsCalc_1_1Dyn_Begin(50.0)


! 730:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcDyn_Begin(50.0)


! 740:[div] Divider 

! 750:[div] Divider 

! 760:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcDyn_Begin(50.0)


! 770:[setpointProfiles]  'setpointProfiles_1'
      CALL setpointProfilesDyn_Begin(0.0, 1.02, 1.02, 1.0, 1.05, 1.05, 1&
     &.02, 1.02, 0.0, 0.0, 0.0, 4.0, 4.001, 2, 10.0, 10.001, 100.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 6, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.&
     &0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.&
     &0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0&
     &.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1&
     &.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,&
     & 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, &
     &1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 1000.0)


! 780:[gain] Gain Block 

! 790:[gain] Gain Block 

! 810:[gain] Gain Block 

! 820:[compar] Two Input Comparator 

! 830:[TapCtrl_1]  
      CALL TapCtrl_1Dyn_Begin(1, 220.0, 0.0125, 0.64, 8, 8, 3.0, 3.0, 1)


! 840:[sumjct] Summing/Differencing Junctions 

! 850:[scale_changer] Scale Changer 
      CALL COMPONENT_ID(ICALL_NO,1009100837)
      CALL CONVERT_SCALE1_CFG(-47005.0,5000.0,47000.0,2500.0)

! 860:[gain] Gain Block 

! 870:[datamerge] Merges data signals into an array 

! 880:[sumjct] Summing/Differencing Junctions 

! 890:[gain] Gain Block 

! 900:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledDyn_Begin()


! 910:[select] Two Input Selector 
      RTCI(NRTCI) = 1
      NRTCI = NRTCI + 1

! 920:[DDSRF_PLL_1]  
      CALL DDSRF_PLL_1Dyn_Begin(220.0, 50.0)


! 930:[datatap] Scalar/Array Tap 

! 940:[datatap] Scalar/Array Tap 

! 950:[datatap] Scalar/Array Tap 

! 960:[datamerge] Merges data signals into an array 

! 970:[datamerge] Merges data signals into an array 

! 980:[datamerge] Merges data signals into an array 

! 990:[HyCtl]  'HyCon1'
      CALL HyCtlDyn_Begin(1, 0, 50.0, 21521, 0.04, 1.9)


! 1000:[datatap] Scalar/Array Tap 

! 1010:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxDyn_Begin(51, 16641, 9, 0, 1700)


! 1020:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledDyn_Begin()


! 1030:[datatap] Scalar/Array Tap 

! 1040:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxDyn_Begin(57, 82177, 9, 0, 1500)


! 1050:[div] Divider 

! 1060:[hardlimit] Hard Limiter 

! 1070:[div] Divider 

! 1080:[square] Square 

! 1090:[hardlimit] Hard Limiter 

! 1100:[div] Divider 

! 1110:[square] Square 

! 1120:[sumjct] Summing/Differencing Junctions 

! 1130:[datatap] Scalar/Array Tap 

! 1140:[sqrt] Square Root 

! 1150:[datatap] Scalar/Array Tap 

! 1160:[datatap] Scalar/Array Tap 

! 1170:[datatap] Scalar/Array Tap 

! 1180:[datatap] Scalar/Array Tap 

! 1190:[datatap] Scalar/Array Tap 

! 1200:[datatap] Scalar/Array Tap 

! 1210:[gain] Gain Block 

! 1220:[gain] Gain Block 

! 1230:[gain] Gain Block 

! 1240:[div] Divider 

! 1250:[datatap] Scalar/Array Tap 

! 1260:[datatap] Scalar/Array Tap 

! 1270:[datatap] Scalar/Array Tap 

! 1280:[datatap] Scalar/Array Tap 

! 1300:[breaker3] 3 Phase Breaker 'inf_BRK'
      CALL COMPONENT_ID(ICALL_NO,371043801)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1310:[xfmr-3p2w] 3 Phase 2 Winding Transformer 'T2'
      CALL COMPONENT_ID(ICALL_NO,581045017)
      RVD1_1 = ONE_3RD*170.0
      RVD1_2 = 220.0*SQRT_1BY3
      RVD1_3 = 33.0
      CALL E_TF2W_CFG((IXFMR + 7),1,RVD1_1,50.0,0.168,0.003529,RVD1_2,RV&
     &D1_3,1.0)
      CALL E_TF2W_CFG((IXFMR + 8),1,RVD1_1,50.0,0.168,0.003529,RVD1_2,RV&
     &D1_3,1.0)
      CALL E_TF2W_CFG((IXFMR + 9),1,RVD1_1,50.0,0.168,0.003529,RVD1_2,RV&
     &D1_3,1.0)
      IF (0.0 .LT. 1.0E-6) THEN
        RVD1_5 = 0.0
        RVD1_6 = 0.0
        IVD1_1 = 0
      ELSE
        RVD1_6 = 0.0
        RVD1_4 = 6.0/(170.0*RVD1_6)
        RVD1_5 = RVD1_4*RVD1_2*RVD1_2
        RVD1_6 = RVD1_4*RVD1_3*RVD1_3
        IVD1_1 = 1
      ENDIF
      CALL E_BRANCH_CFG( (IBRCH(1)+40),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+41),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+42),SS(1),IVD1_1,0,0,RVD1_5,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+43),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+44),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL E_BRANCH_CFG( (IBRCH(1)+45),SS(1),IVD1_1,0,0,RVD1_6,0.0,0.0)
      CALL TSAT1_CFG( (IBRCH(1)+46), (IBRCH(1)+47), (IBRCH(1)+48),SS(1),&
     &RVD1_1,RVD1_2,0.2,1.25,50.0,1.0,1.0,0.1)

! 1320:[pgb] Output Channel 'Tap_position'

! 1330:[breaker3] 3 Phase Breaker 'PCU1_BRK'
      CALL COMPONENT_ID(ICALL_NO,2042303879)
      RTCF(NRTCF) = ABS(0.0)
      NRTCF = NRTCF + 1

! 1340:[pgb] Output Channel 'maintap'

! 1350:[photovoltaic_source] photovoltaic source 'PVarray1'
      CALL COMPONENT_ID(ICALL_NO,1473112425)
      CALL PHOTOVOLT1_CFG(24,2000,72,1,0.02,1000.0,0.01,1.5,1.103,1.0e-1&
     &2,0.0025,0.001,1000.0,25.0)

! 1380:[pgb] Output Channel 'Itot_PoC'

! 1390:[div] Divider 

! 1410:[div] Divider 

! 1420:[div] Divider 

! 1430:[pgb] Output Channel 'Ineg_PoC'

! 1440:[div] Divider 

! 1450:[div] Divider 

! 1460:[div] Divider 

! 1470:[pgb] Output Channel 'Ipos_PoC'

! 1480:[pgb] Output Channel 'Iq_PoC'

! 1490:[pgb] Output Channel 'Izero_PoC'

! 1500:[div] Divider 

! 1510:[div] Divider 

! 1520:[pgb] Output Channel 'FRT_flag_POC'

! 1540:[pgb] Output Channel 'FRT_flag_BESS'

! 1560:[pgb] Output Channel 'FRT_flag_PV'

! 1570:[pgb] Output Channel 'Vneg_PoC'

! 1590:[pgb] Output Channel 'Id_PoC'

! 1600:[pgb] Output Channel 'Vpos_PoC'

! 1610:[pgb] Output Channel 'Qout_INV_BESS'

! 1620:[pgb] Output Channel 'BESSspt_MW'

! 1640:[pgb] Output Channel 'Vzero_PoC'

! 1660:[pgb] Output Channel 'Pout_INV_BESS'

! 1670:[pgb] Output Channel 'Qspt_MVAr'

! 1700:[pgb] Output Channel 'Qout_INV_PV'

! 1710:[DEBUG_HyCon_Scope]  'HyCon1'
      CALL DEBUG_HyCon_ScopeDyn_Begin()


! 1720:[pgb] Output Channel 'Pspt_MW'

! 1740:[pgb] Output Channel 'Pout_INV_PV'

! 1750:[pgb] Output Channel 'PoiPfSpt'

! 1770:[pgb] Output Channel 'Iqneg_PoC'

! 1790:[pgb] Output Channel 'PoiVolSpt_pu'

! 1810:[pgb] Output Channel 'Qcmd_PPC_to_INV_BESS'

! 1820:[pgb] Output Channel 'Iqpos_PoC'

! 1830:[pgb] Output Channel 'Iq_neg_pos_ratio'

! 1860:[pgb] Output Channel 'Hz_POI'

! 1870:[pgb] Output Channel 'Pcmd_PPC_to_INV_BESS'

! 1880:[pgb] Output Channel 'Iqzero_PoC'

! 1890:[pgb] Output Channel 'PCU2_V_MV_pu'

! 1910:[pgb] Output Channel 'PCU1_V_MV_pu'

! 1920:[pgb] Output Channel 'Qcmd_PPC_to_INV_PV'

! 1930:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeDyn_Begin()


! 1960:[pgb] Output Channel 'Pcmd_PPC_to_INV_PV'

! 2020:[pgb] Output Channel 'PLANT_V_HV_pu'

! 2040:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeDyn_Begin()


! 2050:[pgb] Output Channel 'PCU2_V_LV_pu'

! 2060:[pgb] Output Channel 'PCU1_V_LV_pu'

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,1154644512)
      CALL PI3_SECTION_CFG(3,1,0, 33.0,100.0,50.0,1.0,0.001732,0.002928,&
     &0.012514,0.007515,0.001222,0.012514,RVD1_1,RVD1_2,RVD1_3,RVD1_4,RV&
     &D1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+67),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+68),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+69),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+70),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+71),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+72),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+73),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+74),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+75),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+76),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+77),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+78),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 10),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5&
     &)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line132'
      CALL COMPONENT_ID(ICALL_NO,56359452)
      CALL PI3_SECTION_CFG(3,1,0, 220.0,100.0,50.0,1.0,0.000156,0.000524&
     &,0.006823,0.000113,0.000524,0.006823,RVD1_1,RVD1_2,RVD1_3,RVD1_4,R&
     &VD1_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+97),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+98),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+99),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+100),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+101),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+102),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+103),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+104),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+105),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+106),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+107),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+108),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 11),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5&
     &)

! 1:[source1] Single Phase Voltage Source Model 1 'Battery'
      CALL COMPONENT_ID(ICALL_NO,1439784191)
      CALL ESYS651_CFG(2,1,1,0,0,SS(6), (IBRCH(6)+1),0,0,0,0,0,50.0,0.0,&
     &PI_BY2,1.3,0.0,0.0,1.0,1.3,1.3,0.01,80.0,2.0,1.0,1.0,0.1,0.0,0.0,0&
     &.0,0.0)

! 1:[newpi] Coupled Pi Section Transmission Line 'Line1'
      CALL COMPONENT_ID(ICALL_NO,662294091)
      CALL PI3_SECTION_CFG(3,1,0, 33.0,100.0,50.0,1.0,0.000176,0.00012,0&
     &.000127,0.000377,5.7e-05,0.000127,RVD1_1,RVD1_2,RVD1_3,RVD1_4,RVD1&
     &_5,RVD1_6,IVD1_1,IVD1_2,IVD1_3,IVD1_4)
      CALL E_BRANCH_CFG( (IBRCH(1)+79),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+80),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+81),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+82),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+83),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+84),SS(1),0,0,IVD1_3,0.0,0.0,RVD1_6)
      CALL E_BRANCH_CFG( (IBRCH(1)+85),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+86),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+87),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+88),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+89),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+90),SS(1),0,0,IVD1_4,0.0,0.0,RVD1_3)
      CALL COUPLED_PI3_TF_CFG((IXFMR + 12),2,RVD1_1,RVD1_2,RVD1_4,RVD1_5&
     &)

! 1:[filter] Tuned Filter  
      CALL CHECK_INEQUILITY(3,17.86,0.0,IVD1_1)
      CALL CHECK_INEQUILITY(3,0.00134,0.0,IVD1_2)
      CALL CHECK_INEQUILITY(3,26.22,0.0,IVD1_3)
      RVD1_1 = 17.86
      RVD1_2 = 0.00134
      RVD1_3 = 26.22
      CALL E_BRANCH_CFG( (IBRCH(1)+34),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+35),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+36),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)

! 1:[filter] Tuned Filter  
      CALL CHECK_INEQUILITY(3,100.89,0.0,IVD1_1)
      CALL CHECK_INEQUILITY(3,0.00217,0.0,IVD1_2)
      CALL CHECK_INEQUILITY(3,2.92,0.0,IVD1_3)
      RVD1_1 = 100.89
      RVD1_2 = 0.00217
      RVD1_3 = 2.92
      CALL E_BRANCH_CFG( (IBRCH(1)+31),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+32),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+33),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)

! 1:[filter] Tuned Filter  
      CALL CHECK_INEQUILITY(3,100.89,0.0,IVD1_1)
      CALL CHECK_INEQUILITY(3,0.00217,0.0,IVD1_2)
      CALL CHECK_INEQUILITY(3,2.92,0.0,IVD1_3)
      RVD1_1 = 100.89
      RVD1_2 = 0.00217
      RVD1_3 = 2.92
      CALL E_BRANCH_CFG( (IBRCH(1)+19),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+20),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+21),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)

! 1:[filter] Tuned Filter  
      CALL CHECK_INEQUILITY(3,17.86,0.0,IVD1_1)
      CALL CHECK_INEQUILITY(3,0.00134,0.0,IVD1_2)
      CALL CHECK_INEQUILITY(3,26.22,0.0,IVD1_3)
      RVD1_1 = 17.86
      RVD1_2 = 0.00134
      RVD1_3 = 26.22
      CALL E_BRANCH_CFG( (IBRCH(1)+28),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+29),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)
      CALL E_BRANCH_CFG( (IBRCH(1)+30),SS(1),IVD1_1,IVD1_2,IVD1_3,RVD1_1&
     &,RVD1_2,RVD1_3)

      RETURN
      END

!=======================================================================

      SUBROUTINE MainOut_Begin()

!---------------------------------------
! Standard includes 
!---------------------------------------

      INCLUDE 'nd.h'
      INCLUDE 'emtconst.h'
      INCLUDE 's0.h'
      INCLUDE 's1.h'
      INCLUDE 's4.h'
      INCLUDE 'branches.h'
      INCLUDE 'pscadv3.h'
      INCLUDE 'radiolinks.h'
      INCLUDE 'rtconfig.h'

!---------------------------------------
! Function/Subroutine Declarations 
!---------------------------------------

!     SUBR    InvFbDummyOut_Begin  ! 
!     SUBR    DPS_DummyOut_Begin  ! 
!     SUBR    GridSourceOut_Begin  ! 
!     SUBR    FaultBlockOut_Begin  ! 
!     SUBR    SymmetricalComponentsCalc_1_1Out_Begin  ! 
!     SUBR    SymmetricalComponentsCalcOut_Begin  ! 
!     SUBR    setpointProfilesOut_Begin  ! 
!     SUBR    TapCtrl_1Out_Begin  ! 
!     SUBR    Aggr_Fb_ScaledOut_Begin  ! 
!     SUBR    DDSRF_PLL_1Out_Begin  ! 
!     SUBR    HyCtlOut_Begin  ! 
!     SUBR    SCxxxxOut_Begin  ! SMA  SC xxxx
!     SUBR    DEBUG_HyCon_ScopeOut_Begin  ! 
!     SUBR    SC_ScopeOut_Begin  ! Scopes for monitoring

!---------------------------------------
! Variable Declarations 
!---------------------------------------


! Subroutine Arguments

! Electrical Node Indices
      INTEGER  PCU1_LVBUS(3), PCU2_LVBUS(3)
      INTEGER  NT_14(3), NT_34, NT_35, NT_36

! Control Signals
      INTEGER  No_PCU1, PCU2_BRK, POI_BRK, MVBRK
      INTEGER  No_PCU2, IT_6
      REAL     RT_4, RT_12, RT_14, RT_18, RT_19
      REAL     RT_20, RT_21, RT_22, RT_23, RT_24
      REAL     Fsys, MV_Vol_base, RT_27
      REAL     P_Base_PV, P_Base_BESS
      REAL     LV_Vol_base, HV_Vol_base
      REAL     Q_Base_PV, Q_Base_BESS, RT_36
      REAL     RT_40, GcbStt

! Internal Variables
      INTEGER  IVD1_1

! Indexing variables
      INTEGER ICALL_NO                            ! Module call num
      INTEGER IT_0                                ! Storage Indices
      INTEGER ISUBS, SS(8), IBRCH(8), INODE       ! SS/Node/Branch/Xfmr
      INTEGER IXFMR


!---------------------------------------
! Local Indices 
!---------------------------------------


! Increment and assign runtime configuration call indices

      ICALL_NO  = NCALL_NO
      NCALL_NO  = NCALL_NO + 1

! Increment global storage indices

      NCX       = NCX + 0
      INODE     = NNODE + 2
      NNODE     = NNODE + 96
      IXFMR     = NXFMR
      NXFMR     = NXFMR + 12
      NCSCS     = NCSCS + 0
      NCSCR     = NCSCR + 0

! Initialize Subsystem Mapping

      ISUBS = NSUBS + 0
      NSUBS = NSUBS + 8

      DO IT_0 = 1,8
         SS(IT_0) = SUBS(ISUBS + IT_0)
      END DO

! Initialize Branch Mapping.

      IBRCH(1)     = NBRCH(SS(1))
      NBRCH(SS(1)) = NBRCH(SS(1)) + 113


      IBRCH(2)     = NBRCH(SS(2))
      NBRCH(SS(2)) = NBRCH(SS(2)) + 3


      IBRCH(3)     = NBRCH(SS(3))
      NBRCH(SS(3)) = NBRCH(SS(3)) + 1


      IBRCH(4)     = NBRCH(SS(4))
      NBRCH(SS(4)) = NBRCH(SS(4)) + 0


      IBRCH(5)     = NBRCH(SS(5))
      NBRCH(SS(5)) = NBRCH(SS(5)) + 0


      IBRCH(6)     = NBRCH(SS(6))
      NBRCH(SS(6)) = NBRCH(SS(6)) + 3


      IBRCH(7)     = NBRCH(SS(7))
      NBRCH(SS(7)) = NBRCH(SS(7)) + 0


      IBRCH(8)     = NBRCH(SS(8))
      NBRCH(SS(8)) = NBRCH(SS(8)) + 0

!---------------------------------------
! Electrical Node Lookup 
!---------------------------------------

      NT_34 = NODE(INODE + 34)
      NT_35 = NODE(INODE + 35)
      NT_36 = NODE(INODE + 33)

! Array (1:3) quantities...
      DO IT_0 = 1,3
         PCU1_LVBUS(IT_0) = NODE(INODE + 0 + IT_0)
         PCU2_LVBUS(IT_0) = NODE(INODE + 15 + IT_0)
         NT_14(IT_0) = NODE(INODE + 42 + IT_0)
      END DO

!---------------------------------------
! Generated code from module definition 
!---------------------------------------


! 10:[const] Real Constant 'HV Vol base'
      HV_Vol_base = 220.0

! 20:[const] Real Constant 'MV Vol base'
      MV_Vol_base = 33.0

! 30:[const] Real Constant 'Freq base'
      Fsys = 50.0

! 40:[const] Real Constant 'LV Vol base'
      LV_Vol_base = 0.63

! 50:[const] Real Constant 'P_Base_PV'
      P_Base_PV = 4200.0

! 60:[const] Real Constant 'P_Base_BESS'
      P_Base_BESS = 4200.0

! 70:[const] Real Constant 'Q_Base_PV'
      Q_Base_PV = 2520.0

! 80:[const] Real Constant 
      RT_18 = 127947.2

! 90:[const] Real Constant 'Q_Base_BESS'
      Q_Base_BESS = 2520.0

! 100:[const] Real Constant 
      RT_20 = 119000.0

! 110:[consti] Integer Constant 'HV_BRK'
      POI_BRK = 0

! 120:[const] Real Constant 
      RT_21 = -100000.0

! 130:[const] Real Constant 
      RT_22 = 47005.0

! 180:[const] Real Constant 
      RT_23 = -47005.0

! 190:[const] Real Constant 'Gcb'
      GcbStt = 0.0

! 200:[const] Real Constant 
      RT_19 = 50.0

! 210:[InvFbDummy]  
      CALL InvFbDummyOut_Begin()


! 220:[const] Real Constant 
      RT_40 = 96.77

! 240:[const] Real Constant 
      RT_36 = 96.77

! 310:[consti] Integer Constant 'PCU1_BRK'
      IT_6 = 0

! 330:[const] Real Constant 
      RT_12 = 0.0

! 350:[consti] Integer Constant 'PCU2_BRK'
      PCU2_BRK = 0

! 360:[const] Real Constant 
      RT_14 = 0.0

! 370:[consti] Integer Constant 'MVBRK'
      MVBRK = 0

! 400:[const] Real Constant 'inf_BRK_time'
      RT_27 = 1000.0

! 410:[consti] Integer Constant 
      No_PCU1 = 36

! 420:[const] Real Constant 
      RT_24 = 25.0

! 430:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = Fsys
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 450:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.05
      RTCF(IVD1_1+3) = Fsys

! 460:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 470:[const] Real Constant 
      RT_4 = 1.03

! 480:[DPS_Dummy]  
      CALL DPS_DummyOut_Begin()


! 500:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(33.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(33.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 530:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(220.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(220.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = Fsys
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 540:[consti] Integer Constant 
      No_PCU2 = 40

! 560:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = Fsys
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+4) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+4) = 1.0
      ENDIF

! 570:[GridSource]  'GridSource_1'
      CALL GridSourceOut_Begin(0, 0.0, 0.0, 0.0, 0.0, 0.999776463133, 0,&
     & 0.0, 0.0, 50.0, 50.0, 51.0, 51.0, 51.5, 51.5, 50.0, 50.0, 0.0, 5.&
     &0, 5.5, 1, 10.0, 10.5, 15.0, 15.5, 25.0, 0.0, 0.0, 0.0, 0, 0, 8, 1&
     &.02, 1, 1.02, 0.918, 0.918, 1.02, 1.02, 0.0, 0.0, 0.0, 0.0, 0.0, 5&
     &.0, 5.001, 10.0, 10.001, 15.0, 0.0, 0.0, 0.0, 0.0, 1, 0, 6, 0.1, 1&
     &0.0, 0, 0.0, 5.0, 0.0, 1, 0.0, 90.0, 90.0, 0.0, 0.0, 0.0, 0.0, 0.0&
     &, 0.0, 0.0, 5.0, 5.01, 10.0, 10.01, 15.0, 15.01, 0.0, 0.0, 0.0, 6)


! 600:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = Fsys

! 610:[multimeter] Multimeter 
      IVD1_1 = NRTCF
      NRTCF  = NRTCF + 5
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1) = 1.0
      ENDIF
      IF (ABS(1.0) .GT. 1.0E-20) THEN
        RTCF(IVD1_1+1) = 1.0/ABS(1.0)
      ELSE
        RTCF(IVD1_1+1) = 1.0
      ENDIF
      RTCF(IVD1_1+2) = 0.02
      RTCF(IVD1_1+3) = 50.0

! 640:[DPS_Dummy]  
      CALL DPS_DummyOut_Begin()


! 660:[FaultBlock]  'FaultBlock_1'
      CALL FaultBlockOut_Begin(0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, &
     &0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0,&
     & 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0&
     &, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 0.0, 0.0, 0, 0.0, 30.0,&
     & 0.43, 0, 18.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 0.0, 0.0, 3.0, 1, 1, 5.0, 0.43, 0, 18.0, 3.0, 50.0, 0.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)


! 690:[datatap] Scalar/Array Tap 

! 700:[datatap] Scalar/Array Tap 

! 710:[datatap] Scalar/Array Tap 

! 720:[SymmetricalComponentsCalc_1_1]  'SymmetricalComponentsCalc_1_1'
      CALL SymmetricalComponentsCalc_1_1Out_Begin(50.0)


! 730:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcOut_Begin(50.0)


! 760:[SymmetricalComponentsCalc]  'SymmetricalComponentsCalc_1'
      CALL SymmetricalComponentsCalcOut_Begin(50.0)


! 770:[setpointProfiles]  'setpointProfiles_1'
      CALL setpointProfilesOut_Begin(0.0, 1.02, 1.02, 1.0, 1.05, 1.05, 1&
     &.02, 1.02, 0.0, 0.0, 0.0, 4.0, 4.001, 2, 10.0, 10.001, 100.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 6, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.&
     &0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, &
     &0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.&
     &0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0&
     &.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1&
     &.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0,&
     & 0.0, 0.0, 0.0, 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,&
     & 0.0, 0.0, 10, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 0.0, 0.0, 0.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 10, &
     &1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0&
     &.0, 2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0, 1000.0)


! 830:[TapCtrl_1]  
      CALL TapCtrl_1Out_Begin(1, 220.0, 0.0125, 0.64, 8, 8, 3.0, 3.0, 1)


! 900:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledOut_Begin()


! 920:[DDSRF_PLL_1]  
      CALL DDSRF_PLL_1Out_Begin(220.0, 50.0)


! 990:[HyCtl]  'HyCon1'
      CALL HyCtlOut_Begin(1, 0, 50.0, 21521, 0.04, 1.9)


! 1010:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxOut_Begin(51, 16641, 9, 0, 1700)


! 1020:[Aggr_Fb_Scaled]  
      CALL Aggr_Fb_ScaledOut_Begin()


! 1040:[SCxxxx] SMA  SC xxxx 
      CALL SCxxxxOut_Begin(57, 82177, 9, 0, 1500)


! 1290:[rms3ph] Three Phase RMS Meter 
      RTCF(NRTCF) = 1.0
      IF (1.0 .GT. 1.0E-20) RTCF(NRTCF) = 1.0/1.0
      RTCF(NRTCF+1) = Fsys
      RTCF(NRTCF+2) = 0.0
      NRTCF = NRTCF + 3

! 1350:[photovoltaic_source] photovoltaic source 'PVarray1'
      RTCF(NRTCF) = 1.0/REAL(24*2000)
      NRTCF = NRTCF + 1

! 1360:[pgb] Output Channel 'Ic_PoC'

! 1370:[pgb] Output Channel 'Ib_PoC'

! 1400:[pgb] Output Channel 'Ia_PoC'

! 1530:[pgb] Output Channel 'PLANT_Q_MV'

! 1550:[pgb] Output Channel 'PLANT_P_MV'

! 1580:[pgb] Output Channel 'PLANT_V_MV'

! 1630:[pgb] Output Channel 'PCU2_Phs'

! 1650:[pgb] Output Channel 'PCU1_Phs'

! 1680:[pgb] Output Channel 'PCU2_Arms_LV'

! 1690:[pgb] Output Channel 'PCU1_Arms_LV'

! 1710:[DEBUG_HyCon_Scope]  'HyCon1'
      CALL DEBUG_HyCon_ScopeOut_Begin()


! 1730:[pgb] Output Channel 'PCU2_Q_MV'

! 1760:[pgb] Output Channel 'PCU1_Q_MV'

! 1780:[pgb] Output Channel 'PCU2_P_MV'

! 1800:[pgb] Output Channel 'PCU1_P_MV'

! 1840:[pgb] Output Channel 'PCU2_A_MV'

! 1850:[pgb] Output Channel 'PCU1_A_MV'

! 1900:[pgb] Output Channel 'PLANT_Phs'

! 1930:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeOut_Begin()


! 1940:[pgb] Output Channel 'PCU2_Q_LV'

! 1950:[pgb] Output Channel 'PLANT_Q_HV'

! 1970:[pgb] Output Channel 'PCU1_Q_LV'

! 1980:[pgb] Output Channel 'PCU2_P_LV'

! 1990:[pgb] Output Channel 'PLANT_P_HV'

! 2000:[pgb] Output Channel 'PCU1_P_LV'

! 2010:[pgb] Output Channel 'PCU2_A_LV'

! 2030:[pgb] Output Channel 'PCU1_A_LV'

! 2040:[SC_Scope] Scopes for monitoring 
      CALL SC_ScopeOut_Begin()


      RETURN
      END

